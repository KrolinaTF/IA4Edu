#!/usr/bin/env python3
"""
Sistema de Agentes con CrewAI y Ollama para Generaci√≥n de Actividades Educativas
Un sistema multi-agente especializado en la creaci√≥n de actividades educativas adaptadas
"""

import json
import os
from datetime import datetime
from typing import Dict, List, Optional
from dataclasses import dataclass
import logging

# Configurar variables de entorno para LiteLLM/CrewAI (192.168.1.10)
os.environ["OLLAMA_BASE_URL"] = "http://192.168.1.10:11434"
os.environ["OLLAMA_HOST"] = "http://192.168.1.10:11434"
os.environ["OLLAMA_API_BASE"] = "http://192.168.1.10:11434"
os.environ["LITELLM_LOG"] = "DEBUG"  # Para debug

# Configuraci√≥n para forzar Ollama sin LiteLLM
os.environ["OPENAI_API_KEY"] = "not-needed"  # Placeholder
os.environ["OPENAI_MODEL_NAME"] = "qwen3:latest"
# Desactivar LiteLLM en CrewAI
os.environ["CREWAI_DISABLE_TELEMETRY"] = "true"

# Configuraci√≥n de timeout
os.environ["HTTPX_TIMEOUT"] = "120"

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("CREWAI_EDUCATION_SYSTEM")

try:
    from crewai import Agent, Task, Crew, Process
    from crewai.tools import BaseTool
    from crewai_tools import FileReadTool, DirectoryReadTool
    
    # Forzar uso de langchain-community para compatibilidad con CrewAI
    from langchain_community.llms import Ollama
    logger.info("‚úÖ Usando langchain-community.llms.Ollama (compatible con CrewAI)")
        
    from langchain.callbacks.manager import CallbackManagerForLLMRun
    from langchain.llms.base import LLM
    from typing import Any, List, Mapping
except ImportError as e:
    logger.error(f"‚ùå Error de importaci√≥n: {e}")
    logger.error("üí° Instala dependencias: pip install crewai crewai-tools langchain-community")
    raise ImportError("Dependencias no est√°n disponibles")

from ollama_api_integrator import OllamaAPIEducationGenerator
from prompt_template import PromptTemplateGenerator, TEMAS_MATEMATICAS_4_PRIMARIA, TEMAS_LENGUA_4_PRIMARIA, TEMAS_CIENCIAS_4_PRIMARIA


class DirectOllamaLLM(LLM):
    """LLM completamente personalizado que bypassa LiteLLM"""
    
    def __init__(self, ollama_host: str = "192.168.1.10", ollama_model: str = "qwen3:latest"):
        super().__init__()
        
        # Separar host y puerto si viene junto
        if ":" in ollama_host:
            host_only = ollama_host.split(":")[0]
        else:
            host_only = ollama_host
            
        # Crear generador de Ollama
        self.ollama_generator = OllamaAPIEducationGenerator(
            host=host_only, 
            model_name=ollama_model
        )
        self.model_name = ollama_model
        self.host = host_only
    
    @property
    def _llm_type(self) -> str:
        return "direct_ollama"
    
    def _call(
        self,
        prompt: str,
        stop: Optional[List[str]] = None,
        run_manager: Optional[CallbackManagerForLLMRun] = None,
        **kwargs: Any,
    ) -> str:
        """Llamada principal al LLM - usa nuestro OllamaAPIEducationGenerator"""
        try:
            result = self.ollama_generator.generar_texto(
                prompt=prompt,
                max_tokens=kwargs.get('max_tokens', 800),
                temperature=kwargs.get('temperature', 0.7)
            )
            return result
        except Exception as e:
            logger.error(f"Error en DirectOllamaLLM: {e}")
            return f"Error generando respuesta con Ollama local: {str(e)}"
    
    @property
    def _identifying_params(self) -> Mapping[str, Any]:
        """Par√°metros que identifican este LLM"""
        return {
            "llm_type": "direct_ollama",
            "model_name": self.model_name,
            "host": self.host
        }


@dataclass
class ActividadEducativa:
    """Estructura de datos para una actividad educativa"""
    id: str
    titulo: str
    materia: str
    tema: str
    contenido: str
    estudiantes_objetivo: List[str]
    tipo: str  # "individual", "grupal", "colaborativa"
    adaptaciones: List[str]
    metadatos: Dict
    timestamp: str


class OllamaIntegrationTool(BaseTool):
    """Herramienta personalizada para integrar Ollama con CrewAI"""
    name: str = "ollama_generator"
    description: str = "Genera texto educativo usando modelos locales de Ollama"
    
    # Declarar campos para Pydantic v2
    ollama_generator: Optional[object] = None
    
    def __init__(self, ollama_host: str = "192.168.1.10", ollama_model: str = "qwen3:latest", **kwargs):
        # Separar host y puerto si viene junto
        if ":" in ollama_host:
            host_only = ollama_host.split(":")[0]
        else:
            host_only = ollama_host
            
        # Crear generador antes de llamar super()
        ollama_gen = OllamaAPIEducationGenerator(
            host=host_only, 
            model_name=ollama_model
        )
        
        # Inicializar con los datos
        super().__init__(ollama_generator=ollama_gen, **kwargs)
    
    def _run(self, prompt: str, max_tokens: int = 500, temperature: float = 0.7) -> str:
        """Ejecuta la generaci√≥n de texto con Ollama"""
        return self.ollama_generator.generar_texto(prompt, max_tokens, temperature)


class SistemaAgentesEducativos:
    """Sistema principal de agentes para generaci√≥n de actividades educativas"""
    
    def __init__(self, 
                 ollama_host: str = "192.168.1.10", 
                 perfiles_model: str = "qwen3:latest",      # Modelo para an√°lisis de perfiles
                 disenador_model: str = "qwen3:latest",     # Modelo para dise√±o de actividades
                 ambiente_model: str = "qwen2:latest",  # Modelo para coordinaci√≥n colaborativa
                 evaluador_model: str = "mistral:latest",     # Modelo para evaluaci√≥n
                 perfiles_path: str = "perfiles_4_primaria.json"):
        """
        Inicializa el sistema de agentes
        
        Args:
            ollama_host: Host del servidor Ollama
            perfiles_model: Modelo para el agente de an√°lisis de perfiles
            disenador_model: Modelo para el agente dise√±ador de actividades
            ambiente_model: Modelo para el agente de coordinaci√≥n colaborativa
            evaluador_model: Modelo para el agente evaluador
            perfiles_path: Ruta al archivo de perfiles de estudiantes
        """
        self.ollama_host = ollama_host
        self.ambiente_model = ambiente_model
        self.disenador_model = disenador_model
        self.perfiles_model = perfiles_model
        self.evaluador_model = evaluador_model
        self.perfiles_path = perfiles_path
        
        # Modelo general para compatibilidad (usar el primero como base)
        self.ollama_model = perfiles_model
        
        # Crear LLMs espec√≠ficos para cada agente
        logger.info("üîß Configurando LLMs espec√≠ficos para cada agente...")
        
        try:
            # Configurar LiteLLM correctamente para Ollama
            import litellm
            
            # Configuraciones espec√≠ficas para Ollama local
            logger.info(f"üîß Configurando LiteLLM para Ollama local...")
            
            # Mapear todos los modelos para LiteLLM
            modelos_unicos = set([self.ambiente_model, self.disenador_model, self.perfiles_model, self.evaluador_model])
            for modelo in modelos_unicos:
                litellm.model_cost[f"ollama/{modelo}"] = {
                    "input_cost_per_token": 0,
                    "output_cost_per_token": 0,
                    "max_tokens": 4096
                }
            
            # Configurar variables espec√≠ficas para LiteLLM + Ollama
            os.environ["OLLAMA_API_BASE"] = f"http://{ollama_host}:11434"
            os.environ["OLLAMA_BASE_URL"] = f"http://{ollama_host}:11434"
            
            # Crear LLMs espec√≠ficos para cada agente
            logger.info(f"üîÑ Creando LLMs espec√≠ficos:")
            logger.info(f"   üìä Perfiles: {self.perfiles_model}")
            logger.info(f"   üé® Dise√±ador: {self.disenador_model}")
            logger.info(f"   ü§ù ambiente: {self.ambiente_model}")
            logger.info(f"   ‚úÖ Evaluador: {self.evaluador_model}")
            
            self.ambiente_llm = Ollama(
                model=f"ollama/{self.ambiente_model}",
                base_url=f"http://{ollama_host}:11434"
            )
            
            self.disenador_llm = Ollama(
                model=f"ollama/{self.disenador_model}",
                base_url=f"http://{ollama_host}:11434"
            )
            
            self.perfiles_llm = Ollama(
                model=f"ollama/{self.perfiles_model}",
                base_url=f"http://{ollama_host}:11434"
            )
            
            self.evaluador_llm = Ollama(
                model=f"ollama/{self.evaluador_model}",
                base_url=f"http://{ollama_host}:11434"
            )
            
            # Test b√°sico con el primer LLM
            logger.info(f"üß™ Probando conexi√≥n con {self.perfiles_model}...")
            try:
                test_response = self.perfiles_llm.invoke("Hello")
                logger.info(f"‚úÖ LLMs configurados exitosamente")
            except Exception as test_error:
                logger.warning(f"‚ö†Ô∏è Test inicial fall√≥ pero continuando: {test_error}")
            
        except Exception as e:
            logger.error(f"‚ùå Error configurando LLMs: {e}")
            logger.error("üö® No se pudieron configurar LLMs para CrewAI.")
            raise e
        
        # Cargar perfiles directamente para usar en las descripciones de tareas
        self.perfiles_data = self._cargar_perfiles(perfiles_path)
        
        # Crear agentes especializados
        self._crear_agentes()
        
        logger.info(f"ü§ñ Sistema de agentes inicializado con modelos:")
        logger.info(f"   ambiente: {self.ambiente_model}")
        logger.info(f"   Dise√±ador: {self.disenador_model}")
        logger.info(f"   Perfiles: {self.perfiles_model}")
        logger.info(f"   Evaluador: {self.evaluador_model}")
    
    def _cargar_perfiles(self, perfiles_path: str) -> List[Dict]:
        """Cargar perfiles de estudiantes desde archivo JSON"""
        try:
            import json
            with open(perfiles_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return data.get('estudiantes', [])
        except Exception as e:
            logger.error(f"Error cargando perfiles: {e}")
            return []
    
    def _crear_agentes(self):
        """Crea los agentes especializados del sistema"""
        
        # Agente Coordinador ambiente
        self.agente_ambiente = Agent(
            role="Especialista en crear ambientes adecuados para que el aprendizaje emerga de forma natural",
            goal="Crear el ambiente que mejor se ajuste al momento vital del alumnado de manera que el aprendizaje emerja de forma natural",
            backstory="""Eres un experto en pedagog√≠a colaborativa y gesti√≥n de la diversidad en el aula. Eres experto en comprender qu√© tipo de actividad
            necesita un grupo en un momento dado. Eres como el jardinero que sabe en qu√© momento exacto ha de regar, en qu√© momento hay que podar y en
            qu√© momento hay que dejar que las plantas crezcan. Tu objetivo es crear un ambiente que favorezca que el aprendizaje emerja de forma natural. 
            Tienes que ver el grupo como una unidad y encontrar el clima que favorezca el m√°ximo al grupo. 
            Tienes que responderte a preguntas del tipo: ¬øqu√© nivel de agitaci√≥n necesita este grupo en este momento? 

            IMPORTANTE: Siempre responde en ESPA√ëOL. Nunca uses ingl√©s en tus respuestas. Todos los roles, responsabilidades y estrategias deben estar en espa√±ol.""",
            tools=[],  
            llm=self.ambiente_llm,  # Modelo espec√≠fico para coordinaci√≥n del ambiente adecuado
            verbose=True,
            allow_delegation=False  # Desactivar delegaci√≥n para evitar errores
        )
        # Agente Dise√±ador de Actividades
        self.agente_disenador = Agent(
            role="Dise√±ador de Actividades Educativas Adaptadas",
            goal="Crear actividades educativas innovadoras y adaptadas a las necesidades espec√≠ficas de cada estudiante",
            backstory="""Eres un docente innovador especializado en metodolog√≠as activas y educaci√≥n personalizada. 
            Tu experiencia incluye trabajo con aulas diversas, DUA (Dise√±o Universal para el Aprendizaje). 
            La actividad se ha de dise√±ar teniendo en cuenta las especificaciones y luego reconocer qu√© tareas precisa para que se lleve a cabo. Es muy importante
            tener en cuenta que las tareas pueden ocurrir de manera secuencial o en paralelo, pero cada estudiante tiene que tener tarea (o tareas) a lo largo de todo el 
            proceso de la actividad. La actividad tiene que estar dise√±ada para que todo el mundo vaya trabajando en unas cosas u otras y poco a poco compongan el aprendizaje colaborativo. 
            Tu especialidad es dise√±ar actividades que fomenten la colaboraci√≥n, la creatividad y el aprendizaje significativo.
            El muy importante que reconozcas el tiempo que hay y el numero de estudiantes que van a llevar a cabo la actividad de manera que tengas en cuenta que todos
            han de estar ocupados durante todo el tiempo que dure la actividad. 
            
            IMPORTANTE: Siempre responde en ESPA√ëOL. Nunca uses ingl√©s en tus respuestas. Todos los nombres, descripciones y contenidos deben estar en espa√±ol.""",
            tools=[],  # Sin herramientas - usar solo LLM principal
            llm=self.disenador_llm,  # Modelo espec√≠fico para dise√±o de actividades
            verbose=True,
            allow_delegation=False  # Desactivar delegaci√≥n para evitar errores
        )
        # Agente Analizador de Perfiles
        self.agente_perfiles = Agent(
            role="Especialista en repartir Perfiles Educativos",
            goal="Analizar perfiles de estudiantes y identificar necesidades espec√≠ficas para actividades educativas",
            backstory="""Eres un psicopedagogo experto con 15 a√±os de experiencia en educaci√≥n inclusiva. 
            Tu especialidad es analizar perfiles de estudiantes con diversas necesidades educativas (TEA, TDAH, 
            altas capacidades) y determinar las mejores estrategias de adaptaci√≥n para cada caso. Eres capaz de adaptar cualquier actividad a las necesidades de
            cada estudiante. Tienes la capacidad de coger un grupo de tareas y repartirlas de manera equilibrada seg√∫n sus capacidades a un grup de alumnos 
            de manera que todos hagan la tarea que mejor les compete. 
            
            Conoces perfectamente a estos 8 estudiantes del AULA_A_4PRIM y puedes analizar su diversidad sin necesidad de herramientas externas.
            
            IMPORTANTE: Siempre responde en ESPA√ëOL. Nunca uses ingl√©s en tus respuestas.""",
            tools=[],  # Sin herramientas por ahora, informaci√≥n directa
            llm=self.perfiles_llm,  # Modelo espec√≠fico para an√°lisis de perfiles
            verbose=True,
            allow_delegation=False
        )
        
        
        # Agente Evaluador de Calidad (SUPERVISOR JER√ÅRQUICO)
        self.agente_evaluador = Agent(
            role="Supervisor Educativo y Coordinador del Equipo",
            goal="Supervisar el trabajo de todos los agentes, coordinar tareas y garantizar que se cumplan todos los est√°ndares pedag√≥gicos y de calidad",
            backstory="""Eres un SUPERVISOR EDUCATIVO con 20 a√±os de experiencia en evaluaci√≥n pedag√≥gica.
            Tu rol es revisar, validar que todas las premisas se cumplen. Si una premisa no se esta cumpliendo, has de devolver a los agentes la tarea 
            para que la revisen. 
            Tienes que asegurarte de que una actividad es:
            - Relevante al tema que se est√° tratando
            - Realizable en un aula estandar. 
            - Que todos los estudiantes tienen tareas a lo largo de todo el proceso, nadie tiene momentos en los que est√° sin hacer nada.
            - Que se cumplen los principios del DUA (Dise√±o Universal para el Aprendizaje)
            - Que se cumplen los objetivos curriculares seg√∫n la edad del grupo

            IMPORTANTE: Siempre responde en ESPA√ëOL y act√∫a como un supervisor constructivo.""",
            tools=[],
            llm=self.evaluador_llm,
            verbose=True,
            allow_delegation=False  # Sin delegaci√≥n en proceso secuencial
        )
    
    def generar_actividad_colaborativa(self, materia: str, tema: str = None) -> ActividadEducativa:
        """Genera una actividad colaborativa para toda el aula usando el sistema de agentes"""
        
        logger.info(f"üë• Generando actividad colaborativa para {materia}")
        
        # Crear tareas para actividad colaborativa
        tarea_analisis_aula = Task(
            description=f"""Analiza la diversidad del AULA_A_4PRIM (8 estudiantes de 4¬∫ de Primaria) para {materia}:

ESTUDIANTES CONOCIDOS:
- 001 ALEX M.: 9 a√±os, reflexivo, visual, CI 102, nivel apoyo bajo, ning√∫n diagn√≥stico
- 002 MAR√çA L.: 9 a√±os, reflexivo, auditivo, nivel apoyo medio, ning√∫n diagn√≥stico  
- 003 ELENA R.: 9 a√±os, reflexivo, visual, CI 118, nivel apoyo alto, TEA nivel 1
- 004 LUIS T.: 9 a√±os, impulsivo, kinest√©sico, CI 102, nivel apoyo alto, TDAH combinado
- 005 ANA V.: 8 a√±os, reflexivo, auditivo, CI 141, nivel apoyo bajo, altas capacidades
- 006 SARA M.: 9 a√±os, equilibrado, auditivo, CI 115, nivel apoyo medio, ning√∫n diagn√≥stico
- 007 EMMA K.: 9 a√±os, reflexivo, visual, CI 132, nivel apoyo medio, ning√∫n diagn√≥stico
- 008 HUGO P.: 9 a√±os, equilibrado, visual, CI 114, nivel apoyo bajo, ning√∫n diagn√≥stico

PROPORCIONA (TODO EN ESPA√ëOL):
1. Mapa de diversidad (diagn√≥sticos, estilos, niveles de apoyo)
2. Fortalezas grupales aprovechables
3. Desaf√≠os de inclusi√≥n a considerar
4. Oportunidades de colaboraci√≥n e interdependencia
5. Recomendaciones para agrupamiento efectivo

IMPORTANTE: Responde √∫nicamente en ESPA√ëOL. No uses palabras en ingl√©s.""",
            agent=self.agente_ambiente,
            expected_output="An√°lisis detallado de la diversidad del aula con estrategias espec√≠ficas"
        )
        
        tarea_diseno_base = Task(
            description=f"""Bas√°ndote en el analisis de la diversidad de los perfiles, dise√±a la estructura base de una actividad de {materia} {f'sobre {tema}' if tema else ''} que:
            1. Debe ser adecuada para el nivel del grupo que va a trabajar.
            2. Debe definir sus tareas de manera que cada estudiante est√© ocupado en una u otra tarea a lo largo de toda la actividad.
            3. Estas tareas han de pensarse espec√≠ficamente para el grupo en su conjunto y los estudiantes de forma individual, pudiendo agregar o quitar 
            tareas que nos interesen para el aprendizaje. 
            4. Siempre que se pueda incorporar√° otros aspectos curriculares relevantes en el momento en el que est√° el grupo. 
            5. Debe tener en cuenta los principios del DUA (Dise√±o Universal para el Aprendizaje).
            6. Debe ser viable en un aula estandar.

            
            Dise√±a:
            - T√≠tulo y objetivos pedag√≥gicos
            - Descripci√≥n general de la actividad
            - Proceso paso a paso
            - Materiales necesarios
            - Criterios de evaluaci√≥n
            - Duraci√≥n estimada
            
            Este es un ejemplo: ACTIVIDAD: Supermercado de N√∫meros
OBJETIVO_PRINCIPAL: Trabajar matem√°ticas aplicadas con dinero real
DURACI√ìN_FLEXIBLE: 1-1.5 horas (termina cuando todos los clientes completan sus listas)
PARTICIPANTES: 8 estudiantes de 4¬∫ Primaria (AULA_A)
COMPETENCIAS_CURRICULARES: N√∫meros decimales, operaciones b√°sicas, dinero, comunicaci√≥n oral, escritura, medidas (peso/volumen), expresi√≥n, trabajo colaborativo

=== CONTEXTO PEDAG√ìGICO ===

MOMENTO_CURSO: Semana 1 del curso - Repaso y evaluaci√≥n inicial
NIVEL_GRUPO: 4¬∫_primaria_evaluaci√≥n_inicial
- Productos: Precios variados 6‚Ç¨-25‚Ç¨ (enteros) y algunos con decimales simples (.50‚Ç¨)
- Operaciones: Sumas de m√∫ltiples d√≠gitos con llevadas, algunos decimales .50
- Presupuesto: 60‚Ç¨ por cliente (deben gestionar y que les sobre dinero)
- Cambio: variado seg√∫n compras (pr√°ctica realista)
- Presi√≥n temporal: media-baja
- Interacci√≥n social: normal, cort√©s

MODALIDAD: preparaci√≥n_integrada + ejecuci√≥n_simult√°nea
INSTALACIONES: Aula habitual convertida en centro comercial con 3 tiendas tem√°ticas
MATERIALES_GENERALES: Productos etiquetados, dinero real, cajas registradoras simuladas, materiales de decoraci√≥n, papel, rotuladores, tijeras, l√°pices

=== TIENDAS TEM√ÅTICAS ===

TIENDA 1 - "MATERIAL ESCOLAR" (Cajero: Alex)
Productos: Mochila 25‚Ç¨, Estuche 12‚Ç¨, Diccionario 18‚Ç¨, Set rotuladores 9‚Ç¨, Agenda 15‚Ç¨, Comp√°s 11‚Ç¨
Contexto: "Valorar cu√°nto gastan las familias en material escolar"

TIENDA 2 - "SOUVENIRS DE VIAJE" (Cajero: Elena)  
Productos: Camiseta 16‚Ç¨, Llavero 7‚Ç¨, Im√°n nevera 4‚Ç¨, Gorra 13‚Ç¨, Postal 2‚Ç¨, Taza 8‚Ç¨
Contexto: "Compras de recuerdos para familiares"

TIENDA 3 - "HOBBIES Y TIEMPO LIBRE" (Cajero: Emma)
Productos: Libro 14‚Ç¨, Juego mesa 22‚Ç¨, Pelota 10‚Ç¨, Puzzle 17‚Ç¨, Cartas 6‚Ç¨, Kit manualidades 19‚Ç¨
Contexto: "Actividades para el tiempo libre"

=== GESTI√ìN DOCENTE ===

ROL_PROFESOR:
1. **Explicaci√≥n inicial** (5 min): Presentar actividad general a todos
2. **Reuniones individuales** (durante preparaci√≥n):
   - Ana (Supervisor): Coordinar organizaci√≥n espacial y flujo de actividad
   - Elena (Cajero TEA): Revisar secuencias, protocolo de interacci√≥n, uso de apoyos
   - Luis (Cliente TDAH): Momento de centrado, revisar plan, estrategias de organizaci√≥n
3. **Supervisi√≥n general**: Circular por aula, resolver dudas, gestionar tiempos
4. **Apoyo en dictados**: Colaborar y supervisar en dictados individualizados
5. **Registro de observaciones**: Documentar uso de adaptaciones y efectividad

CRITERIO_FINALIZACI√ìN:
La actividad termina cuando todos los clientes han completado sus listas de compra, sin presi√≥n temporal. Se estima 1-1.5 horas incluyendo preparaci√≥n.

=== TAREAS IDENTIFICADAS ===

1. CAJERO (3 estudiantes)
   - Funci√≥n: Cobrar productos, dar cambio, atender con cortes√≠a, crear listados de precios (dictado)
   - Competencias: Matem√°ticas dinero, atenci√≥n sostenida, comunicaci√≥n, medidas
   - Interacciones: Clientes individuales, supervisor
   - Preparaci√≥n: Organizar caja, revisar dinero, preparar tickets, decorar puesto
   - Entrega de cuentas: Reporte final de ventas y caja

2. SUPERVISOR/REPONEDOR (1 estudiante)
   - Funci√≥n: Coordinar actividad, reponer productos, resolver problemas, realizar dictados
   - Competencias: Liderazgo, organizaci√≥n, matem√°ticas b√°sicas, comunicaci√≥n, lectura
   - Interacciones: Todos los roles, cajeros (consultas), clientes (dictados y problemas)
   - Preparaci√≥n: Organizar productos, crear se√±alizaci√≥n, preparar listas para dictado
   - Informe de gesti√≥n: S√≠ntesis de incidencias y coordinaci√≥n

3. CLIENTE (4 estudiantes)
   - Funci√≥n: Comprar productos seg√∫n lista dictada, interactuar con cajeros
   - Competencias: Escritura (dictado), planificaci√≥n, c√°lculo presupuesto, comunicaci√≥n
   - Interacciones: Cajeros, supervisor (dictado), otros clientes (cola)
   - Preparaci√≥n: Escribir lista por dictado, calcular presupuesto aproximado, organizar compra por tiendas
   - Compras:
		- Sara: mochila (25), llavero (7), libro (14) y gorra (13) = 59 
		- Luis: estuche (12), kit de manualidades (19), puzzle (17) y postal (2) = 50
		- Mar√≠a: diccionario (18), iman de nevera (4), taza (8) y pelota (10) = 40
		- Hugo: camiseta (16), juegos de mesa (22), cartas (6), set de rotuladores (9) = 52

=== PAR√ÅMETROS CONFIGURABLES POR TAREA ===

COMPLEJIDAD_C√ÅLCULO:
- b√°sica: n√∫meros enteros, operaciones simples
- media: decimales b√°sicos, operaciones combinadas
- alta: decimales complejos, descuentos, estimaciones

PRESI√ìN_TEMPORAL:
- baja: ritmo pausado, tiempo para reflexionar
- media: ritmo normal, cierta urgencia
- alta: ritmo acelerado, decisiones r√°pidas

APOYO_DISPONIBLE:

- visual: tablas, secuencias, gu√≠as, √°bacos
- manipulativo: dedos, pegatinas, objetos para contar
- social: compa√±ero para consultas
- material: cascos reducci√≥n ruido, informaci√≥n estructurada, estrategias TDAH, cuerda delimitadora

INTERACCI√ìN_SOCIAL:
- m√≠nima: tareas individuales, comunicaci√≥n b√°sica
- normal: comunicaci√≥n est√°ndar, cortes√≠a
- intensa: negociaci√≥n, resoluci√≥n conflictos, liderazgo

=== BANCO DE RECURSOS DISPONIBLES ===

ZONA_AUTOSELECCI√ìN (disponible para quien la necesite):
- √Åbacos y manipulativos para c√°lculo
- Pegatinas organizativas (productos, cantidades)
- Folios con cuadrantes para organizar listas por tienda
- Tablas de apoyo visual para operaciones
- Cascos de reducci√≥n de ruido
- Cuerdas delimitadoras para "cerrar tienda" temporalmente
- Leyendas visuales de procedimientos
- Carteles con precios √∫nicos para todos

DIFERENCIACI√ìN_CONTROLADA:
- Complejidad matem√°tica gestionada desde dictados personalizados
- Todos los cajeros manejan los mismos precios (simplifica gesti√≥n)
- Adaptaci√≥n por perfil mediante listas de compra individualizadas

CONTROL_FINANCIERO_TOTAL:
- 3 cajeros empiezan con 30‚Ç¨ cada uno = 90‚Ç¨ (cambio inicial)
- 4 clientes empiezan con 60‚Ç¨ cada uno = 240‚Ç¨
- TOTAL EN CIRCULACI√ìN: 330‚Ç¨

VERIFICACI√ìN_FINAL (la magia de las matem√°ticas):
- Suma dinero final de 3 cajeros + dinero final de 4 clientes = 330‚Ç¨
- Cada cajero declara: 30‚Ç¨ inicial + ventas realizadas - dinero final = beneficio obtenido
- Suma de beneficios de 3 cajeros = total gastado por 4 clientes
- Si todo cuadra: ¬°Las matem√°ticas funcionan!

Este es otro ejemplo: 

Sumas Con Llevadas

¬øQu√© significa "me llevo 1"?

Descripci√≥n de la actividad:

Realizaremos sumas conjuntas. 
Colocaremos 6 mesas, dos a dos, separadas para poder moverse entre ellas y enfrentadas entre si. 
6 estudiantes se colocar√°n a cada lado, mir√°ndose. Cada pareja que se mira ser√°, respectivamente, las unidades, las decenas y las centenas. 

Daremos dos n√∫meros, por ejemplo: 145 + 168 

Cada estudiante recibe en su lado de la mesa su cantidad correspondiente, en unidades o en paquetes (bolsas de 10, cajitas de 100). 
La clave es que ninguno puede tener m√°s de 9 en sus mesas conjuntas. 
Al crear una bolsa o un paquete, han de pasarlo a sus compa√±eros y el resultado de cada pareja ha de quedar en el centro de la mesa.

Finalmente, reconocemos el n√∫mero de resultado deber√≠a reflejar 313. 

Mientras, las 2 personas que no est√°n en las mesas, han hecho las cuentas individualmente (en pizarra, cuadernos, como quieran). Si tenemos suficientes paquetes, pueden ponerse a realizar estas sumas de manera individual con ellos.

Finalmente, todxs deber√≠amos tener el mismo resultado. 

Hacemos rotaciones y vamos haciendo cuentas. Quiz√°s la cosa fluya a que cada uno quiere hacer cuentas individualmente o por parejas o equipos. Se permite la exploraci√≥n. 


Materiales:
Lentejas, garbanzos, cuentas, fichas, bolsas, cajitas.

Preparaci√≥n:

Luis y Emma pueden preparar las mesas. 

El resto pueden ir haciendo paquetes de 10. Teniendo unos cuantos de 10 e individuales ya podemos dar las cantidades de salida. 
Quiz√°s para Elena (o para cualqier otro) esta pueda ser una tarea estimulante, si se hacen bastantes nos da m√°s flexibilidad para trastear. 
Cuando creamos que tenemos suficientes, podemos empezar. 
Si el material se elige con cierta conciencia, puede servir de estrategia metodol√≥gica, puede ser muy reutilizable para m√∫ltiples tareas y como estrategia cognitiva del aula para realizar cuentas. 
Por ejemplo, usar lentejas potencia la concentraci√≥n, la motricidad fina. Se pueden guardar en bolsitas herm√©ticas de 10 que ocupan poco espaci. Los paquetes 100 pueden ser cajitas o bolsas m√°s grandes, pero es accesible de guardar en un aula. 

Versi√≥n para peques:

Imprimimos folios con 10 (circulos, estrellas..) tama√±o pegatina y que ponga 1 en cada dibujito y 10 en grande como t√≠tulo del folio. Tenemos que tener pegatinas o se pueden colorear con pintura de dedos, rotus de punta gorda...
Cada vez que completamos el folio lo pasamos al otro lado. Cuando tengamos 10 folios, lo metemos en un portafolio con un cartel que ponga 10. Al final tenemos un resultado, reconocemos el numero y lo escribimos. 

Versi√≥n m√°s compleja: 

A las bolsas de 10 les podemos ahora cambiar el nombre a 1, y al resto de forma correspondiente. De este modo, podemos trabajar con decimales. ¬ø0.5 = 1/2?. Podemos representarlo. 

Este es otro ejemplo: Mejoren las habilidades de orientaci√≥n espacial y reconstrucci√≥n de mapas.

Adem√°s, la actividad incorpora aspectos curriculares transversales como:

Ciencias Naturales: Propiedades del agua (volumen), la forma de los objetos.

Lengua Castellana: Vocabulario geom√©trico, descripci√≥n de procesos de resoluci√≥n, comunicaci√≥n oral.

Habilidades del Siglo XXI: Pensamiento cr√≠tico, resoluci√≥n de problemas, colaboraci√≥n.

Descripci√≥n de la Actividad
La actividad se llevar√° a lo largo de la semana que culminar√° el viernes en una Feria Matem√°tica. 

Rol del Profesor
El docente ir√° presentando las actividades sin hacer referencia a que vayan a ser utilizadas m√°s adelante. Simplemente permitiendo que se despierte o no su curiosidad y estas cosas son las que iremos viendo del desarrollo del aula. 

Gesti√≥n del Aula durante la Actividad:
Observaci√≥n Activa y Gu√≠a Discreta: Circular√° por las estaciones, observando las din√°micas de las parejas y los desaf√≠os individuales. Proporcionar√° pistas indirectas a trav√©s de preguntas abiertas ("¬øHab√©is probado a...? ¬øQu√© pasar√≠a si...?"), en lugar de dar soluciones.

Gesti√≥n del Clima Emocional: Monitorear√° la frustraci√≥n y el aburrimiento. Recordar√° la importancia del tono tranquilo y respetuoso entre los compa√±eros, y el valor del esfuerzo. Puede sugerir peque√±os "descansos cerebrales" si percibe altos niveles de ansiedad, especialmente para Elena y Luis.

Fomento de la Autonom√≠a: Evitar√° la sobreintervenci√≥n. Su objetivo es que los estudiantes encuentren sus propias soluciones y estrategias.

Gesti√≥n del Tiempo: Aunque la actividad es flexible, el docente puede dar avisos de tiempo para que las parejas avancen y no se queden atascadas demasiado tiempo en un reto.

Registro de Observaciones: Anotar√° qu√© estrategias utiliza cada pareja, qu√© desaf√≠os surgen, y c√≥mo colaboran, para la evaluaci√≥n formativa posterior.

Planteamiento de la Actividad:
Narrativa Inmersiva: Presentar√° la actividad con una historia de piratas y tesoros, enfatizando que el verdadero tesoro es el conocimiento y la capacidad de resolver misterios.

Preparaci√≥n de Estaciones: Asegurar√° que cada estaci√≥n est√© perfectamente preparada con los materiales adecuados y las instrucciones visuales/auditivas necesarias.


Agrupamientos y Tareas/Roles Espec√≠ficos por Pareja
Las parejas se han formado buscando un equilibrio entre niveles de apoyo, canales preferentes y temperamentos, fomentando la ayuda mutua y el desaf√≠o √≥ptimo para ambos miembros. Los roles dentro de cada pareja ser√°n flexibles, permitiendo a los estudiantes decidir c√≥mo se dividen el trabajo.
 
Preparaci√≥n de la actividad: 

Durante la semana iremos preparando los materiales que vamos a necesitar.
Se pedir√° que traigan botellas durante la semana y el jueves las trabajaremos.  

Lunes: Taller formas geom√©tricas. 1.Recortables y montables. Hacer etiquetas con los nombres y guardarlas en un bote, carpeta... 2. Encontrar objetos en el aula (se puede favorecer por ejemplo, con dados de varias caras), categorizarlos, creandos dos tarjetas por objeto: nombre y forma geom√©trica. Y se guardan las tarjetas en otro bote o carpeta. 

Martes: Haremos una din√°mica de c√≥mo calcular √°reas con diferentes materiales, con cuerdas para c√≠rculos y rectas, con bloques de domin√≥, imanix, la idea es jugar con diferentes formas de calcular cu√°nto ocupan las cosas. Una superficie puede ocupar un folio y 5 imanix. Dentro de esta actividad, dejaremos hechas, como 3 por estudiante, tarjetas con nombres de objetos del aula que podr√≠amos medir con cualquier cosa. Por ejemplo puede haber tarjetas en las que ponga, "el libro de ciencias" o "el respaldo de las sillas", se deja libertad. Estas tarjetas tambi√©n se guardan en un bote o carpetita.  As√≠ mismo, se crear√°n tarjetas con los objetos que puedan servir de unidades de medida (los imanix, domin√≥, cuerda) que tambi√©n se guardan. 

Mi√©rcoles:
Din√°mica de l√≥gica: 
Sacaremos diferentes actividades t√≠picas de:
estrella+estrella=16

estrella+luna=25

luna‚àísol=10

sol√óestrella+luna=?

Se puede hacer una actividad grupal de ir haci√©ndo varias en la pizarra entre todos primero. Y luego se les pide que traten de crear una ellos. Se deja el tiempo necesario hasta que todos han hecho por lo menos, una. Si en ese tiempo alguien hace m√°s, se incluir√°n en su respectivo bote o carpeta. Todos los ejercicios han de ser validados antes de incluirlos. Dependiendo del ritmo se pueden hacer m√°s. 

Jueves:
Botellas y revelaci√≥n. 
Durante la semana habremos ido recopilando botellas en alg√∫n espacio del aula. Hoy las vamos a contar y catalogar. 
La idea es tener varias garrafas por ejemplo de 6 y 8 litros. Las dejaremos aparte y crearemos tarjetas de cantidades que podr√≠an entrar (por ejemplo, 4,75L, 5,5L, 7,60L) bote totales
Todas las que sean como de 1,5L (aprox) para abajo, las iremos cogiendo una a una y escribiremos un cartelito por cada una con el volumen en decimales y fracciones, por ejemplo 0,5L y 1/2L. Y esos cartelitos se guardan tambi√©n en un bote o carpeta. bote c√°lculos
 
Una vez cerrado el material, se revela la actividad: !Haremos una Feria Matem√°tica!

Se explican los puestos brevemente. 

Garrafas. 
Se sacar√° una tarjeta del bote cantidades y dos tarjetas de las botellas. Cada equipo tendr√° que elegir una garrafa y usar las dos botellas peque√±as que correspondan a sus tarjetas para rellenar la garrafa. 

Geometr√≠a.
Se descolocan las figuras geom√©tricas. 
Cada equipo tendr√° que colocar cada figura geom√©trica con su nombre correspondiente. Adem√°s, sacar√° 5 tarjetas de nombre de objeto y tendr√° a disposici√≥n otra tanda de nombes de formas donde elegir. 

L√≥gica:
Cada equipo sacar√° 2 (o 3, dependiendo de cu√°ntas se crearan) de las actividades que dise√±aron ellos mismos y tendr√°n que resolverlas. 

√Åreas:
Coger√°n una tarjeta de objeto de aula y dos tarjetas de unidades de medida. Tendr√°n que encontrar la manera de describir en t√©rminos de las unidades que les hayan salido, cu√°nto ocupa el objeto. 

Repartiremos un puesto por grupo: 

Alex y Mar√≠a: equipo equilibrado, pareja bastante parecida a nivel funcional. 

Elena y Emma: tarea que puede generar tensi√≥n a Elena y Emma es muy tranquila. 

Ana y Hugo: ambos van a incurrir en conversaci√≥n para llegar a una l√≥gica. Buenos argumentando. 

Sara y Luis: Sara ayudar√° con buena argumentaci√≥n y Luis crear√° opciones creativas. 

Cada equipo elige un puesto o coge una tarjetita aleatoria y el resto del d√≠a lo dedicaremos a organizar la feria. Primeramente cada equipo tendr√° que crear un panel informativo de en qu√© consiste el puesto. Evaluaremos como van integrando la informaci√≥n. Ayudaremos a que cada uno tenga claro, al menos, su puesto. As√≠ podr√°n crear las tarjetas con sentido. Despu√©s seguiremos decorando y colocando: dejar las garrafas preparadas, las carpetas o botes de cada puesto, hacer dibujos, etc. 

Viernes:

Ya tenemos todo preparado y deber√≠a haber al menos algo de expectaci√≥n. 

Cada equipo puede coger una tarjeta de puesto, o coger un n√∫mero y ser√° el orden para elegir. 
La idea es incluir muchos aspectos de probabilidad y aleatoriedad en la din√°mica. 
Cada equipo empieza en un puesto y luego rotan en un sentido o otro. En este momento hay que dar cierta libertad al juego, pero tratando de mantener un volumen adecuado. Aqu√≠ el profesor tendr√° que ir validando la realizaci√≥n de cada prueba. Los grupos tendr√°n que esperar a que el/la profe est√© disponible para ir a revisar y mientras deber√°n repasar sus resultados. 

Al acabar cada ronda, reciben por ejemplo, un trozo de frase de alg√∫n matem√°tico famoso o referente a la magia de las matem√°ticas. Una vez que tienen todos sus trozos construyen su frase. 
O al acabar todas las pruebas cada equipo recibe un trozo de acertijo que tienen que resolver entre todo el aula. 



Adaptaciones: 

Elena siempre deber√≠a tener a disposici√≥n sus cascos y estrategias de regulaci√≥n (por ejemplo, llevar un trozo de plastilina en la mano). 
El aula debe disponer de diferentes materiales que les sirvan de estrategia de organizaci√≥n, cuadernos, l√°pices, cuentas, etc. 
Para Luis es una actividad movida, motivante y estructurada. 
Para Ana es un reto donde adem√°s, juega el papel de la aleatoriedad. 


Proporcionar m√∫ltiples medios de representaci√≥n (El "Qu√©" del Aprendizaje): tienen las garrafas y tienen las tarjetas, o los simbolos y las cuentas, las formas geom√©tricas estrictas y las del "mundo", junto con nombres escritos. Numerosos materiales con los que medir √°reas... 

Todos: La propia acci√≥n de verter agua, mover fichas, colocar carteles facilita la comprensi√≥n concreta.

Proporcionar m√∫ltiples medios de acci√≥n y expresi√≥n (El "C√≥mo" del Aprendizaje):

Expresi√≥n Oral: Discusi√≥n de estrategias en pareja, justificaci√≥n de respuestas al profesor, explicaci√≥n de conceptos.

Expresi√≥n Escrita/Dibujo: Registro de c√°lculos, diagramas, esquemas, listas de fracciones, dibujos de las soluciones de √°rea.

Manipulaci√≥n: Soluci√≥n f√≠sica de los problemas (llenar garrafas, cubrir √°reas).

Autoregulaci√≥n:

Gesti√≥n del tiempo: Reloj en el aula. 

Estrategias de afrontamiento: Se recordar√°n herramientas para la frustraci√≥n (pausas, respiraci√≥n, pedir ayuda). En los momentos entre ronda y ronda, se pueden hacer pausas estrat√©gicas, parales un poco, antes de seguir. 

Elecci√≥n: Dentro de cada reto, las parejas podr√°n decidir c√≥mo se organizan el trabajo.

Proporcionar m√∫ltiples medios de implicaci√≥n (El "Por qu√©" del Aprendizaje):

Colaboraci√≥n y Pertenencia: El trabajo en pareja y la posterior resoluci√≥n conjunta.

Novedad y Curiosidad: toda la actividad est√° dise√±ada para despertar curiosidad y puesta en conciencia.

Retroalimentaci√≥n Inmediata y Formativa: La validaci√≥n del profesor en cada reto ofrece retroalimentaci√≥n instant√°nea, y la incapacidad de avanzar sin una respuesta correcta fomenta la auto-correcci√≥n.





Si hay opci√≥n de incorporar material nuevo al aula. Puede haber un premio de la feria que sea nuevo un libro para el aula, de curiosidades matem√°ticas, con datos interesantes y acertijos nuevos.

Los premios pueden ser "tesoros de conocimiento". Al acabar la √∫ltima ronda, cada equipo recibe un "dato m√°gico" o una pregunta sobre una curiosidad que cuestionarse. 

"El n√∫mero Pi (œÄ) es un n√∫mero infinito que nos ayuda a calcular la circunferencia de cualquier c√≠rculo. Se usa desde la construcci√≥n de las pir√°mides hasta los viajes al espacio." (Con un n√∫mero largo de Pi escrito)

"¬øSab√≠as que un rayo puede contener tanta energ√≠a como 100 bombillas encendidas durante un d√≠a? La electricidad es una forma de energ√≠a que se mide con n√∫meros muy grandes y muy peque√±os." (Con un dibujo de un rayo y una bombilla).

"Las abejas construyen sus panales con hex√°gonos perfectos. Esta forma geom√©trica es la m√°s eficiente para guardar miel, ¬°porque ocupa el m√≠nimo espacio y usa el m√≠nimo material!" (Con una imagen de un panal y un hex√°gono).

"Nuestro cerebro pesa solo un 2% de nuestro cuerpo, ¬°pero consume un 20% de toda la energ√≠a que usamos! Es una m√°quina incre√≠ble para resolver problemas, como los que hab√©is resuelto hoy."

Conexi√≥n con Intereses: Si es posible, se puede intentar que el dato final conecte con un inter√©s general del grupo (ciencia, naturaleza, el cuerpo humano, etc.).

Capacidad de reflexi√≥n y de pensamiento abstracto. Durante la semana, si empiezan a ver que algo se cuece, y al organizar la actividad el jueves, van recreando posibles opciones que les pueden tocar, conocen los materiales, y las posibilidades. 

La Curiosidad como Motor

Autonom√≠a en la Resoluci√≥n: El docente no da las soluciones, lo que empodera a los estudiantes a confiar en sus propias capacidades para encontrar las respuestas.

            IMPORTANTE: 
            - Enfocate el/la profesor/a en estos ejemplos, sabe exactamente qu√© hace cada uno en cada momento. Sabe si puede realizar las cuentas o las 
            tareas que se les asigna o no. 
            - Las tareas estan repartidas, no se dejan como "libres" o "a elecci√≥n", sino que cada uno tiene una tarea concreta y definida.
            - Responde √∫nicamente en ESPA√ëOL. No uses palabras en ingl√©s
            - Todos los t√≠tulos, descripciones y materiales deben estar en espa√±ol""",
            agent=self.agente_disenador,
            context=[tarea_analisis_aula],
            expected_output="Dise√±o estructural de actividad educativa lista y detallada para coordinaci√≥n colaborativa"
        )

        tarea_coordinacion_colaborativa = Task(
            description=f"""Toma la actividad dise√±ada y convi√©rtela en una experiencia colaborativa asignando roles espec√≠ficos a cada estudiante:

ESTUDIANTES DEL AULA:
- 001 ALEX M.: reflexivo, visual, CI 102, apoyo bajo
- 002 MAR√çA L.: reflexivo, auditivo, apoyo medio  
- 003 ELENA R.: reflexivo, visual, CI 118, apoyo alto, TEA nivel 1
- 004 LUIS T.: impulsivo, kinest√©sico, CI 102, apoyo alto, TDAH combinado
- 005 ANA V.: reflexivo, auditivo, CI 141, apoyo bajo, altas capacidades
- 006 SARA M.: equilibrado, auditivo, CI 115, apoyo medio
- 007 EMMA K.: reflexivo, visual, CI 132, apoyo medio
- 008 HUGO P.: equilibrado, visual, CI 114, apoyo bajo

ASIGNA:
1. ROL ESPEC√çFICO para cada estudiante (por nombre/ID)
2. Responsabilidades particulares que aprovechen sus fortalezas
3. Interdependencia positiva (todos necesarios para el √©xito)
4. Adaptaciones espec√≠ficas para TEA, TDAH y altas capacidades
5. Estrategias de apoyo e inclusi√≥n
6. Din√°micas de interacci√≥n y comunicaci√≥n

IMPORTANTE: Responde √∫nicamente en ESPA√ëOL. Todos los roles, responsabilidades y estrategias deben estar en espa√±ol.""",
                        agent=self.agente_perfiles,
            context=[tarea_diseno_base],
            expected_output="Coordinaci√≥n colaborativa con roles espec√≠ficos y estrategias de inclusi√≥n"
        )
        
        tarea_supervision_final = Task(
            description="""Como SUPERVISOR FINAL, revisa y valida todo el trabajo realizado por el equipo:
            
            REVISI√ìN Y VALIDACI√ìN COMPLETA:
            1. EVAL√öA el an√°lisis de perfiles del especialista en diversidad
            2. VALIDA el dise√±o pedag√≥gico del dise√±ador de actividades  
            3. SUPERVISA la propuesta colaborativa del especialista en ambiente
            4. INTEGRA todas las fases en una propuesta coherente y optimizada
            
            CRITERIOS DE SUPERVISI√ìN:
            ‚úÖ Todos los estudiantes tienen roles significativos y apropiados
            ‚úÖ Las adaptaciones para TEA, TDAH y altas capacidades son efectivas
            ‚úÖ La interdependencia es aut√©ntica y pedagogicamente justificada
            ‚úÖ Los objetivos curriculares de 4¬∫ Primaria se cumplen completamente
            ‚úÖ La evaluaci√≥n es equitativa y adaptada a cada perfil
            ‚úÖ La actividad es viable y realista para el aula
            ‚úÖ Se respetan los principios del DUA
            
            ENTREGA FINAL:
            - Actividad completamente validada y optimizada
            - Justificaci√≥n pedag√≥gica de todas las decisiones
            - Plan de implementaci√≥n claro para el docente
            - Criterios de √©xito espec√≠ficos y medibles
            
            IMPORTANTE: Como supervisor, tienes la responsabilidad final de la calidad. Responde √∫nicamente en ESPA√ëOL.""",
            agent=self.agente_evaluador,

            expected_output="Actividad colaborativa completamente supervisada, validada y optimizada con plan de implementaci√≥n"
        )
        
        # Crear y ejecutar el crew con proceso secuencial supervisado

        crew = Crew(
            agents=[self.agente_perfiles, self.agente_disenador, self.agente_ambiente, self.agente_evaluador],
            tasks=[tarea_analisis_aula, tarea_diseno_base, tarea_coordinacion_colaborativa, tarea_supervision_final],
            process=Process.sequential,  # Cambiar a secuencial para evitar problemas de delegaci√≥n
            verbose=True
        )
        
        resultado = crew.kickoff()
        
        # Capturar resultados de todas las tareas
        contenido_completo = ""
        
        # Intentar acceder a los resultados individuales de las tareas
        try:
            if hasattr(resultado, 'tasks_output') and resultado.tasks_output:
                contenido_completo += "=== AN√ÅLISIS DE DIVERSIDAD DEL AULA ===\n"
                contenido_completo += str(resultado.tasks_output[0]) + "\n\n"
                
                contenido_completo += "=== DISE√ëO BASE DE LA ACTIVIDAD ===\n"
                contenido_completo += str(resultado.tasks_output[1]) + "\n\n"
                
                contenido_completo += "=== COORDINACI√ìN COLABORATIVA ===\n"
                contenido_completo += str(resultado.tasks_output[2]) + "\n\n"
                
                contenido_completo += "=== SUPERVISI√ìN Y VALIDACI√ìN FINAL ===\n"
                contenido_completo += str(resultado.tasks_output[3]) + "\n\n"
            else:
                # Fallback al resultado principal
                contenido_completo = str(resultado)
        except Exception as e:
            logger.warning(f"No se pudieron obtener resultados individuales: {e}")
            contenido_completo = str(resultado)
        
        # Crear estructura de actividad colaborativa
        actividad = ActividadEducativa(
            id=f"colaborativa_{materia.lower()}_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            titulo=f"Actividad Colaborativa - {materia}",
            materia=materia,
            tema=tema or "Tema ambiente",
            contenido=contenido_completo,
            estudiantes_objetivo=["001", "002", "003", "004", "005", "006", "007", "008"],
            tipo="colaborativa",
            adaptaciones=["roles_diferenciados", "multiple_canales", "interdependencia_positiva"],
            metadatos={
                "total_estudiantes": 8,
                "modelos_usados": {
                    "perfiles": self.perfiles_model,
                    "disenador": self.disenador_model,
                    "ambiente": self.ambiente_model,
                    "evaluador": self.evaluador_model
                },
                "agentes_participantes": ["perfiles", "disenador", "ambiente", "evaluador"]
            },
            timestamp=datetime.now().isoformat()
        )
        
        return actividad
    
    def guardar_actividad(self, actividad: ActividadEducativa, output_dir: str = "actividades_crewai") -> str:
        """Guarda una actividad en un archivo"""
        
        # Asegurar que se guarde en el directorio del script
        script_dir = os.path.dirname(os.path.abspath(__file__))
        full_output_dir = os.path.join(script_dir, output_dir)
        os.makedirs(full_output_dir, exist_ok=True)
        
        filename = f"{actividad.id}.txt"
        filepath = os.path.join(full_output_dir, filename)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write("=" * 80 + "\n")
            f.write(f"ACTIVIDAD GENERADA CON CREWAI + OLLAMA\n")
            f.write("=" * 80 + "\n\n")
            f.write(f"ID: {actividad.id}\n")
            f.write(f"T√≠tulo: {actividad.titulo}\n")
            f.write(f"Materia: {actividad.materia}\n")
            f.write(f"Tema: {actividad.tema}\n")
            f.write(f"Tipo: {actividad.tipo}\n")
            f.write(f"Estudiantes objetivo: {', '.join(actividad.estudiantes_objetivo)}\n")
            f.write(f"Timestamp: {actividad.timestamp}\n")
            f.write("\n" + "-" * 50 + "\n")
            f.write("CONTENIDO DE LA ACTIVIDAD:\n")
            f.write("-" * 50 + "\n\n")
            f.write(actividad.contenido)
            f.write("\n\n" + "=" * 80 + "\n")
            f.write("METADATOS:\n")
            f.write(json.dumps(actividad.metadatos, indent=2, ensure_ascii=False))
            f.write("\n")
        
        logger.info(f"üíæ Actividad guardada en: {filepath}")
        return filepath
    
    def ejecutar_workflow_completo(self, materia: str, tema: str = None) -> Dict:
        """Ejecuta un workflow simplificado generando solo actividades colaborativas"""
        
        logger.info(f"üöÄ Iniciando workflow ambiente para {materia}")
        
        resultados = {
            "materia": materia,
            "tema": tema,
            "timestamp": datetime.now().isoformat(),
            "actividades_generadas": [],
            "archivos_creados": []
        }
        
        try:
            # Generar √∫nicamente actividad colaborativa
            logger.info("ü§ù Generando actividad colaborativa...")
            actividad_colaborativa = self.generar_actividad_colaborativa(materia, tema)
            archivo_colaborativa = self.guardar_actividad(actividad_colaborativa)
            
            resultados["actividades_generadas"].append({
                "tipo": "colaborativa",
                "id": actividad_colaborativa.id,
                "archivo": archivo_colaborativa
            })
            resultados["archivos_creados"].append(archivo_colaborativa)
            
            logger.info(f"‚úÖ Workflow ambiente terminado. 1 actividad generada.")
            
        except Exception as e:
            logger.error(f"‚ùå Error en workflow ambiente: {e}")
            resultados["error"] = str(e)
        
        return resultados


def main():
    """Funci√≥n principal de demostraci√≥n del sistema de agentes"""
    
    print("="*60)
    print("ü§ñ SISTEMA DE AGENTES CREWAI + OLLAMA PARA EDUCACI√ìN")
    print("="*60)
    
    try:
        # Configuraci√≥n (ajusta seg√∫n tu setup)
        OLLAMA_HOST = "192.168.1.10"  # Ollama local
        PERFILES_MODEL = "qwen3:latest"     # Modelo para an√°lisis de perfiles
        DISENADOR_MODEL = "qwen3:latest"    # Modelo para dise√±o de actividades  
        ambiente_MODEL = "qwen3:latest" # Modelo para coordinaci√≥n colaborativa
        EVALUADOR_MODEL = "qwen3:latest"    # Modelo para evaluaci√≥n
        PERFILES_PATH = "perfiles_4_primaria.json"
        
        # Inicializar sistema
        print(f"\nüîß Inicializando sistema con:")
        print(f"   Host Ollama: {OLLAMA_HOST}")
        print(f"   Modelo Perfiles: {PERFILES_MODEL}")
        print(f"   Modelo Dise√±ador: {DISENADOR_MODEL}")
        print(f"   Modelo ambiente: {ambiente_MODEL}")
        print(f"   Modelo Evaluador: {EVALUADOR_MODEL}")
        print(f"   Perfiles: {PERFILES_PATH}")
        
        sistema = SistemaAgentesEducativos(
            ollama_host=OLLAMA_HOST,
            perfiles_model=PERFILES_MODEL,
            disenador_model=DISENADOR_MODEL,
            ambiente_model=ambiente_MODEL,
            evaluador_model=EVALUADOR_MODEL,
            perfiles_path=PERFILES_PATH
        )
        
        print("\n‚úÖ Sistema inicializado correctamente!")
        
        # Men√∫ simplificado - Solo actividades colaborativas
        while True:
            print("\n" + "="*50)
            print("üéØ SISTEMA DE ACTIVIDADES COLABORATIVAS")
            print("1. ü§ù Generar actividad colaborativa")
            print("2. üöÄ Ejecutar workflow ambiente")
            print("3. ‚ùå Salir")
            
            opcion = input("\nüëâ Selecciona una opci√≥n (1-3): ").strip()
            
            if opcion == "1":
                print("\nü§ù GENERACI√ìN DE ACTIVIDAD COLABORATIVA")
                materia = input("üìö Materia (Matem√°ticas/Lengua/Ciencias): ").strip()
                tema = input("üìù Tema espec√≠fico (opcional): ").strip() or None
                
                actividad = sistema.generar_actividad_colaborativa(materia, tema)
                archivo = sistema.guardar_actividad(actividad)
                
                print(f"\n‚úÖ Actividad colaborativa generada:")
                print(f"   üìÑ ID: {actividad.id}")
                print(f"   üìÅ Archivo: {archivo}")
                print(f"   üë• Estudiantes: {len(actividad.estudiantes_objetivo)}")
            
            elif opcion == "2":
                print("\nüöÄ WORKFLOW ambiente")
                materia = input("üìö Materia (Matem√°ticas/Lengua/Ciencias): ").strip()
                tema = input("üìù Tema espec√≠fico (opcional): ").strip() or None
                
                print(f"\n‚è≥ Ejecutando workflow ambiente para {materia}...")
                print("   (Esto puede tomar varios minutos)")
                
                resultados = sistema.ejecutar_workflow_completo(materia, tema)
                
                if "error" not in resultados:
                    print(f"\nüéâ ¬°Workflow ambiente completado exitosamente!")
                    print(f"   üìä Total actividades: {len(resultados['actividades_generadas'])}")
                    print(f"   üìÅ Archivos creados: {len(resultados['archivos_creados'])}")
                    print("\nüìã Resumen:")
                    for act in resultados['actividades_generadas']:
                        print(f"   ‚Ä¢ {act['tipo'].capitalize()}: {act['id']}")
                else:
                    print(f"\n‚ùå Error en workflow: {resultados['error']}")
            
            elif opcion == "3":
                print("\nüëã ¬°Hasta luego!")
                break
            
            else:
                print("\n‚ùå Opci√≥n no v√°lida. Selecciona 1-3.")
    
    except ImportError as e:
        print(f"\n‚ùå Error de importaci√≥n: {e}")
        print("\nüí° Para usar este sistema necesitas instalar:")
        print("   pip install crewai crewai-tools")
        print("   pip install requests  # para Ollama")
    
    except Exception as e:
        print(f"\n‚ùå Error inicializando sistema: {e}")
        print("\nüí° Verifica que:")
        print("   1. Ollama est√© ejecut√°ndose")
        print("   2. El modelo especificado est√© disponible")
        print("   3. El archivo de perfiles exista")


if __name__ == "__main__":
    main()