#!/usr/bin/env python3

"""
Sistema de Agentes CrewAI JER√ÅRQUICO para Generaci√≥n de Actividades Educativas
Versi√≥n con estructura jer√°rquica y coordinador general
"""

from typing import List, Dict
from dataclasses import dataclass
import logging
import os
import json
from datetime import datetime

# Configuraci√≥n b√°sica
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("CREWAI_JERARQUICO")

# Configurar entorno
os.environ["CREWAI_DISABLE_TELEMETRY"] = "true"

try:
    from crewai import Agent, Task, Crew, Process
    from langchain_ollama.llms import OllamaLLM
except ImportError as e:
    logger.error(f"Error de importaci√≥n: {e}")
    raise

@dataclass
class ActividadEducativa:
    """Estructura para actividades educativas"""
    id: str
    titulo: str
    materia: str
    tema: str
    contenido: str
    estudiantes_objetivo: List[str]
    tipo: str
    adaptaciones: List[str]
    metadatos: Dict
    timestamp: str

class SistemaJerarquico:
    """Sistema con estructura jer√°rquica de agentes"""
    def __init__(self, ollama_host: str = "192.168.1.10"):
        self.ollama_host = ollama_host
        self.base_url = f"http://{self.ollama_host}:11434"

        # Instancias LLM directas a Ollama usando la clase actual
        self.llm_qwen3 = OllamaLLM(model="ollama/qwen3", base_url=self.base_url, temperature=0.7)
        self.llm_qwen2 = OllamaLLM(model="ollama/qwen2", base_url=self.base_url, temperature=0.7)
        self.llm_mistral = OllamaLLM(model="ollama/mistral", base_url=self.base_url, temperature=0.7)

        self._crear_agentes_jerarquicos()
        # Crear directorio para actividades si no existe (ruta absoluta)
        script_dir = os.path.dirname(os.path.abspath(__file__))
        self.directorio_actividades = os.path.join(script_dir, "actividades_jerarquicas")
        os.makedirs(self.directorio_actividades, exist_ok=True)
        
        logger.info("‚úÖ Sistema jer√°rquico inicializado")

    def _crear_agentes_jerarquicos(self):
        """Crea la estructura jer√°rquica de agentes"""
        self.coordinador = Agent(
            role="Coordinador General Educativo",
            goal="Supervisar y coordinar todo el proceso de dise√±o de actividades educativas",
            backstory="""Experto en pedagog√≠a y gesti√≥n educativa esperas de las actividades que est√©n perfectamente definidas, de manera que
            el docente tenga claro qu√© hace cada quien en cada momento y que el flujo de actividad discurre de manera fluida.
            Adem√°s, estas deber√°n estar correctamente ajustadas a los perfiles de los alumnos tanto en aspectos curriculares como adaptaciones""",
            llm=self.llm_qwen3,
            verbose=True,
            allow_delegation=True
        )

        self.director_diseno = Agent(
            role="Director de Dise√±o Educativo",
            goal="Supervisar el dise√±o completo de la actividad educativa",
            backstory="""Especialista en dise√±o curricular y pedag√≥gico, encargado de asegurar que todas las actividades 
            est√©n alineadas con los objetivos educativos y las necesidades de los estudiantes""",
            llm=self.llm_qwen3,
            verbose=True,
            allow_delegation=True
        )

        self.disenador_ambiente = Agent(
            role="Dise√±ador de Ambientes de Aprendizaje",
            goal="Dise√±ar el ambiente √≥ptimo para la actividad",
            backstory="""Especialista en psicolog√≠a educativa perfectamente conocedor de que para que el aprendizaje emerja, el ambiente debe ser
            propicio. Sabes que el espacio f√≠sico, la distribuci√≥n de grupos, los materiales disponibles y la atm√≥sfera emocional
            son elementos fundamentales que condicionan el √©xito de cualquier actividad educativa. Tu experiencia te permite dise√±ar
            ambientes que fomenten la colaboraci√≥n, reduzcan la ansiedad y maximicen las oportunidades de aprendizaje para todos
            los estudiantes, independientemente de sus caracter√≠sticas individuales.""",
            llm=self.llm_qwen2,
            verbose=True
        )

        self.disenador_actividades = Agent(
            role="Dise√±ador de Actividades Educativas",
            goal="Crear actividades educativas efectivas",
            backstory="""Pedagogo especializado en experiencias de aprendizaje colaborativo con m√°s de 15 a√±os de experiencia dise√±ando actividades
            que integran teor√≠a y pr√°ctica. Dominas las metodolog√≠as activas, el aprendizaje basado en proyectos y las estrategias
            de trabajo cooperativo. Tu enfoque se centra en crear experiencias significativas que conecten con los intereses de los
            estudiantes y promuevan el desarrollo de competencias tanto acad√©micas como socioemocionales. Eres experto en graduar
            la dificultad y crear secuencias did√°cticas que mantengan la motivaci√≥n y el engagement de todos los participantes.""",
            llm=self.llm_qwen3,
            verbose=True
        )

        self.especialista_adaptaciones = Agent(
            role="Especialista en Adaptaciones Educativas",
            goal="Asegurar que las actividades sean inclusivas",
            backstory="""Experto en educaci√≥n inclusiva con profundo conocimiento del Dise√±o Universal para el Aprendizaje (DUA).
            Tu especialidad es identificar las barreras de aprendizaje y proponer adaptaciones espec√≠ficas que permitan la
            participaci√≥n efectiva de todos los estudiantes. Conoces las necesidades educativas especiales m√°s comunes,
            las estrategias de diferenciaci√≥n curricular y las tecnolog√≠as de apoyo. Tu objetivo es que ning√∫n estudiante
            quede excluido del proceso de aprendizaje, garantizando m√∫ltiples formas de representaci√≥n, expresi√≥n y
            participaci√≥n seg√∫n los principios del DUA.""",
            llm=self.llm_mistral,
            verbose=True
        )

        self.planificador_tareas = Agent(
            role="Planificador de Tareas Educativas",
            goal="Descomponer actividades en tareas ejecutables",
            backstory="""Experto en an√°lisis de tareas educativas y secuenciaci√≥n did√°ctica. Tu especialidad es descomponer actividades
            complejas en tareas espec√≠ficas, concretas y ejecutables, estableciendo tiempos realistas, dependencias entre tareas
            y criterios de evaluaci√≥n claros. Dominas las t√©cnicas de scaffolding (andamiaje) para estructurar el apoyo que
            necesitan los estudiantes en cada fase del proceso. Tu enfoque metodol√≥gico asegura que cada tarea tenga un prop√≥sito
            claro, contribuya al objetivo global del aprendizaje y sea apropiada para el nivel de desarrollo de los estudiantes.""",
            llm=self.llm_qwen3,
            verbose=True
        )

        self.asignador_roles = Agent(
            role="Asignador de Roles Educativos",
            goal="Asignar roles a estudiantes seg√∫n sus caracter√≠sticas",
            backstory="""Conocedor profundo de las necesidades individuales de los estudiantes y experto en asignaci√≥n estrat√©gica de roles.
            Tu experiencia te permite analizar los perfiles de cada estudiante (fortalezas, √°reas de mejora, estilos de aprendizaje,
            motivaciones) para asignar roles que potencien sus capacidades y les ayuden a superar sus dificultades. Entiendes que
            los roles no son est√°ticos y pueden rotar para favorecer el desarrollo integral. Tu objetivo es crear equipos
            equilibrados donde cada estudiante se sienta valorado, tenga oportunidades de liderazgo y pueda aprender de sus
            compa√±eros a trav√©s de la interdependencia positiva.""",
            llm=self.llm_mistral,
            verbose=True
        )

        logger.info("‚úÖ Estructura jer√°rquica de agentes creada")
    
    def _guardar_actividad(self, actividad: ActividadEducativa):
        """Guarda la actividad en un archivo de texto"""
        try:
            nombre_archivo = f"{actividad.id}.txt"
            ruta_archivo = os.path.join(self.directorio_actividades, nombre_archivo)
            
            # Debug: mostrar rutas
            logger.info(f"üîç Directorio: {self.directorio_actividades}")
            logger.info(f"üîç Archivo: {nombre_archivo}")
            logger.info(f"üîç Ruta completa: {ruta_archivo}")
            logger.info(f"üîç Directorio existe: {os.path.exists(self.directorio_actividades)}")
            
            # Asegurar que el directorio existe
            os.makedirs(self.directorio_actividades, exist_ok=True)
            
            with open(ruta_archivo, 'w', encoding='utf-8') as f:
                f.write(f"ACTIVIDAD EDUCATIVA JER√ÅRQUICA\n")
                f.write(f"="*50 + "\n\n")
                f.write(f"ID: {actividad.id}\n")
                f.write(f"T√≠tulo: {actividad.titulo}\n")
                f.write(f"Materia: {actividad.materia}\n")
                f.write(f"Tema: {actividad.tema}\n")
                f.write(f"Tipo: {actividad.tipo}\n")
                f.write(f"Timestamp: {actividad.timestamp}\n")
                f.write(f"Estudiantes objetivo: {', '.join(actividad.estudiantes_objetivo)}\n")
                f.write(f"Adaptaciones: {', '.join(actividad.adaptaciones)}\n\n")
                f.write(f"CONTENIDO DE LA ACTIVIDAD:\n")
                f.write(f"="*50 + "\n")
                f.write(actividad.contenido)
                f.write(f"\n\n" + "="*50 + "\n")
                f.write(f"METADATOS:\n{json.dumps(actividad.metadatos, indent=2, ensure_ascii=False)}\n")
            
            logger.info(f"‚úÖ Actividad guardada en: {ruta_archivo}")
            print(f"üìÅ Actividad guardada en: {ruta_archivo}")
            
        except Exception as e:
            logger.error(f"Error guardando actividad: {e}")
            print(f"‚ùå Error guardando actividad: {e}")

    def generar_actividad(self, materia: str, tema: str = None) -> ActividadEducativa:
        logger.info(f"üöÄ Iniciando generaci√≥n de actividad para {materia}")
        try:
            tarea_ambiente = Task(
                description=f"""Dise√±a el ambiente f√≠sico y emocional √≥ptimo para una actividad colaborativa de {materia} sobre {tema or 'un tema general'}.
                Considera: 1) Distribuci√≥n del espacio f√≠sico (agrupaciones, movilidad, zonas de trabajo), 2) Materiales y recursos necesarios,
                3) Condiciones ambientales (iluminaci√≥n, ruido, temperatura), 4) Estrategias para crear un clima emocional seguro y motivador,
                5) Elementos que fomenten la participaci√≥n de todos los estudiantes. El ambiente debe facilitar la colaboraci√≥n,
                minimizar distracciones y ser accesible para estudiantes con diferentes necesidades.""",
                agent=self.disenador_ambiente,
                expected_output="Descripci√≥n detallada del ambiente con especificaciones f√≠sicas, materiales y estrategias emocionales"
            )

            tarea_actividad = Task(
                description=f"""Dise√±a una actividad colaborativa completa para {materia} sobre {tema or 'un tema general'} que integre:
                1) Objetivos de aprendizaje claros y espec√≠ficos, 2) Metodolog√≠a activa y participativa, 3) Secuencia did√°ctica estructurada,
                4) Estrategias de trabajo cooperativo, 5) Elementos de gamificaci√≥n o motivaci√≥n, 6) Conexi√≥n con situaciones reales,
                7) Oportunidades para el desarrollo de competencias transversales. La actividad debe ser significativa, desafiante
                pero alcanzable, y promover tanto el aprendizaje individual como el grupal. Incluye criterios de evaluaci√≥n formativa.""",
                agent=self.disenador_actividades,
                expected_output="Actividad educativa completa con objetivos, metodolog√≠a, secuencia did√°ctica y evaluaci√≥n"
            )

            tarea_adaptaciones = Task(
                description="""Analiza la actividad propuesta y dise√±a adaptaciones espec√≠ficas siguiendo los principios del DUA:
                1) M√∫ltiples formas de representaci√≥n (visual, auditiva, t√°ctil), 2) M√∫ltiples formas de expresi√≥n y participaci√≥n,
                3) M√∫ltiples formas de motivaci√≥n y engagement. Considera adaptaciones para: estudiantes con dificultades de aprendizaje,
                altas capacidades, diversidad cultural y ling√º√≠stica, necesidades sensoriales o motoras. Prop√≥n alternativas concretas
                para materiales, instrucciones, tiempos, productos finales y formas de participaci√≥n. Asegura que las adaptaciones
                mantengan el rigor acad√©mico y permitan alcanzar los mismos objetivos de aprendizaje.""",
                agent=self.especialista_adaptaciones,
                expected_output="Lista detallada de adaptaciones organizadas por principios DUA con alternativas espec√≠ficas",
                context=[tarea_actividad]
            )

            tarea_desglose = Task(
                description="""Descompone la actividad en tareas espec√≠ficas, secuenciadas y ejecutables:
                1) Identifica las macro-tareas principales, 2) Subdivide cada macro-tarea en micro-tareas concretas,
                3) Establece tiempos estimados realistas, 4) Define dependencias entre tareas, 5) Especifica recursos necesarios,
                6) Determina puntos de control y retroalimentaci√≥n, 7) Incluye momentos de reflexi√≥n y metacognici√≥n.
                Cada tarea debe tener: objetivo espec√≠fico, instrucciones claras, criterios de √©xito, duraci√≥n estimada.
                Considera las adaptaciones propuestas para ajustar tiempos y apoyos adicionales donde sea necesario.""",
                agent=self.planificador_tareas,
                expected_output="Desglose cronol√≥gico detallado con tareas espec√≠ficas, tiempos, recursos y puntos de control",
                context=[tarea_actividad, tarea_adaptaciones]
            )

            tarea_asignacion = Task(
                description="""Asigna roles espec√≠ficos a cada estudiante bas√°ndote en sus perfiles individuales:
                1) Analiza fortalezas, intereses y √°reas de mejora de cada estudiante, 2) Dise√±a roles complementarios que generen
                interdependencia positiva, 3) Asegura rotaci√≥n de roles para desarrollo integral, 4) Define responsabilidades
                espec√≠ficas para cada rol, 5) Establece mecanismos de apoyo mutuo, 6) Considera liderazgos distribuidos.
                Roles deben: potenciar fortalezas individuales, ofrecer desaf√≠os apropiados, promover crecimiento en √°reas d√©biles,
                fomentar la colaboraci√≥n efectiva. Incluye estrategias para resolver conflictos y apoyar a estudiantes con dificultades.""",
                agent=self.asignador_roles,
                expected_output="Asignaci√≥n personalizada de roles con justificaci√≥n pedag√≥gica y estrategias de apoyo",
                context=[tarea_desglose]
            )

            tarea_supervision_diseno = Task(
                description="""Supervisa y valida la coherencia del dise√±o educativo completo:
                1) Verifica alineaci√≥n entre objetivos, metodolog√≠a y evaluaci√≥n, 2) Revisa la integraci√≥n efectiva del ambiente,
                actividad y adaptaciones, 3) Asegura que el dise√±o responda a los principios pedag√≥gicos actuales,
                4) Eval√∫a la viabilidad pr√°ctica en el contexto educativo, 5) Identifica posibles mejoras o ajustes necesarios,
                6) Confirma que todos los elementos contribuyen al aprendizaje significativo. Proporciona retroalimentaci√≥n
                constructiva y recomendaciones espec√≠ficas para optimizar el dise√±o antes de la implementaci√≥n.""",
                agent=self.director_diseno,
                expected_output="Dise√±o educativo validado con retroalimentaci√≥n espec√≠fica y recomendaciones de mejora",
                context=[tarea_ambiente, tarea_actividad, tarea_adaptaciones]
            )

            tarea_supervision_implementacion = Task(
                description="""Supervisa y valida el plan de implementaci√≥n pr√°ctica:
                1) Revisa la secuencia temporal y la viabilidad de los tiempos propuestos, 2) Eval√∫a la coherencia entre
                la asignaci√≥n de roles y el desglose de tareas, 3) Identifica posibles obst√°culos en la implementaci√≥n,
                4) Verifica que todos los estudiantes tengan oportunidades equitativas de participaci√≥n y aprendizaje,
                5) Asegura que existen mecanismos de seguimiento y ajuste durante la implementaci√≥n, 6) Valida la factibilidad
                de los recursos y materiales necesarios. Proporciona un plan de contingencia para situaciones imprevistas.""",
                agent=self.director_diseno,
                expected_output="Plan de implementaci√≥n validado con cronograma, seguimiento y contingencias",
                context=[tarea_desglose, tarea_asignacion]
            )

            tarea_coordinacion = Task(
                description="""Coordina y consolida todo el proceso de dise√±o educativo en una propuesta final:
                1) Integra todos los elementos en una actividad educativa coherente y completa, 2) Asegura que la propuesta
                final sea clara, pr√°ctica y directamente implementable por el docente, 3) Verifica que se mantenga el foco
                en los objetivos de aprendizaje y las necesidades de los estudiantes, 4) Consolida todas las adaptaciones
                y estrategias en un formato accesible, 5) Incluye orientaciones claras para el docente sobre implementaci√≥n,
                seguimiento y evaluaci√≥n, 6) Proporciona una visi√≥n global que permita entender el flujo completo de la actividad.
                La propuesta final debe ser aut√≥noma, completa y lista para implementar en el aula.""",
                agent=self.coordinador,
                expected_output="Actividad educativa completa, integrada y lista para implementaci√≥n con gu√≠a docente",
                context=[tarea_supervision_diseno, tarea_supervision_implementacion]
            )

            crew = Crew(
                agents=[
                    self.director_diseno,
                    self.disenador_ambiente,
                    self.disenador_actividades,
                    self.especialista_adaptaciones,
                    self.planificador_tareas,
                    self.asignador_roles
                ],
                tasks=[
                    tarea_ambiente,
                    tarea_actividad,
                    tarea_adaptaciones,
                    tarea_desglose,
                    tarea_asignacion,
                    tarea_supervision_diseno,
                    tarea_supervision_implementacion,
                    tarea_coordinacion
                ],
                process=Process.hierarchical,
                manager_agent=self.coordinador,
                verbose=True
            )

            logger.info("üèóÔ∏è Ejecutando flujo jer√°rquico...")
            resultado = crew.kickoff()

            actividad = ActividadEducativa(
                id=f"jerarquico_{materia}_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                titulo=f"Actividad de {materia} - {tema or 'tema general'}",
                materia=materia,
                tema=tema or "tema general",
                contenido=str(resultado),
                estudiantes_objetivo=["001", "002", "003", "004", "005", "006", "007", "008"],
                tipo="colaborativa_jerarquica",
                adaptaciones=["inclusiva", "diferenciada"],
                metadatos={
                    "sistema": "jerarquico",
                    "niveles": ["coordinacion", "direccion", "especialistas"]
                },
                timestamp=datetime.now().isoformat()
            )
            
            # Guardar actividad en archivo
            self._guardar_actividad(actividad)
            return actividad

        except Exception as e:
            logger.error(f"Error generando actividad: {e}")
            actividad_fallback = self._crear_actividad_fallback(materia, tema, str(e))
            self._guardar_actividad(actividad_fallback)
            return actividad_fallback

    def _crear_actividad_fallback(self, materia: str, tema: str, error: str) -> ActividadEducativa:
        return ActividadEducativa(
            id=f"fallback_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            titulo=f"Actividad B√°sica de {materia}",
            materia=materia,
            tema=tema or "tema general",
            contenido=f"Error: {error}\n\nActividad b√°sica de ejemplo.",
            estudiantes_objetivo=[],
            tipo="fallback",
            adaptaciones=[],
            metadatos={"error": error},
            timestamp=datetime.now().isoformat()
        )

def main():
    print("="*60)
    print("üè´ SISTEMA JER√ÅRQUICO DE DISE√ëO EDUCATIVO")
    print("="*60)
    try:
        sistema = SistemaJerarquico()
        while True:
            print("\nOpciones:")
            print("1. Generar actividad educativa")
            print("2. Salir")
            opcion = input("Seleccione una opci√≥n: ").strip()
            if opcion == "1":
                materia = input("Materia (matematicas/lengua/ciencias): ").lower()
                tema = input("Tema espec√≠fico (opcional): ").strip() or None
                actividad = sistema.generar_actividad(materia, tema)
                print("\n" + "="*60)
                print(f"üìú ACTIVIDAD GENERADA - {actividad.titulo}")
                print("="*60)
                print(f"üìÅ Archivo guardado: {actividad.id}.txt")
                print(f"üìÇ Directorio: actividades_jerarquicas/")
                print("\nüìã RESUMEN:")
                print(f"Materia: {actividad.materia}")
                print(f"Tema: {actividad.tema}")
                print(f"Tipo: {actividad.tipo}")
                print(f"Estudiantes: {len(actividad.estudiantes_objetivo)}")
                print("\nüí° Puedes encontrar el contenido completo en el archivo generado.")
            elif opcion == "2":
                print("üëã Hasta luego!")
                break
            else:
                print("‚ùå Opci√≥n no v√°lida")
    except Exception as e:
        print(f"‚ùå Error: {e}")

if __name__ == "__main__":
    main()
