#!/usr/bin/env python3
"""
Sistema de Agentes para ABP (Aprendizaje Basado en Proyectos) - Estructura Sencilla
Arquitectura modular con 5 agentes especializados y validaci√≥n iterativa
"""

import json
import os
import re
from datetime import datetime
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, asdict, is_dataclass
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger("SistemaAgentesABP")

def serialize(obj):
    if is_dataclass(obj):
        return asdict(obj)
    raise TypeError(f"Object of type {type(obj).__name__} is not JSON serializable")

def parse_json_seguro(texto: str) -> Optional[dict]:
    """Parseo robusto de JSON con m√∫ltiples estrategias de limpieza"""
    try:
        # Estrategia 1: Limpieza b√°sica
        texto_limpio = texto.replace("```json", "").replace("```", "").strip()
        if texto_limpio.startswith("A continuaci√≥n") or texto_limpio.startswith("Aqu√≠"):
            # El LLM respondi√≥ en texto plano, extraer JSON si existe
            import re
            json_match = re.search(r'\{.*\}', texto_limpio, re.DOTALL)
            if json_match:
                texto_limpio = json_match.group()
            else:
                logger.warning("No se encontr√≥ JSON en la respuesta de texto plano")
                return None
                
        if not texto_limpio:
            raise ValueError("Respuesta vac√≠a")
            
        # Estrategia 2: Buscar el primer { hasta el √∫ltimo }
        start_idx = texto_limpio.find('{')
        end_idx = texto_limpio.rfind('}')
        
        if start_idx != -1 and end_idx != -1 and start_idx < end_idx:
            texto_limpio = texto_limpio[start_idx:end_idx+1]
            
        return json.loads(texto_limpio)
        
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå Error al parsear JSON del LLM: {e}")
        logger.error(f"üîç Texto recibido (primeros 200 chars): {texto[:200]}...")
        return None
    except Exception as e:
        logger.error(f"‚ùå Error inesperado en parseo JSON: {e}")
        return None
    
# ===== ESTRUCTURAS DE DATOS =====

@dataclass
class Actividad:
    """Estructura de la actividad educativa"""
    descripcion: str
    nivel_educativo: str
    competencias_objetivo: List[str]
    duracion_estimada: int
    tipo_producto: str

@dataclass
class Estudiante:
    """Estructura del estudiante"""
    id: str
    nombre: str
    fortalezas: List[str]
    necesidades_apoyo: List[str]
    disponibilidad: int
    historial_roles: List[str]
    adaptaciones: List[str]

@dataclass  
class Tarea:
    """Estructura de la tarea"""
    id: str
    descripcion: str
    competencias_requeridas: List[str]
    complejidad: int  # 1-5
    tipo: str  # "individual", "colaborativa", "creativa"
    dependencias: List[str]
    tiempo_estimado: int

@dataclass
class ProyectoABP:
    """Estructura del proyecto completo de ABP"""
    titulo: str
    descripcion: str
    duracion: str
    competencias_objetivo: List[str]
    fases: List[Dict]
    asignaciones: List[Dict]
    recursos: Dict
    evaluacion: Dict
    metadatos: Dict

# ===== CONTEXTO H√çBRIDO AUTO-DETECTADO =====

@dataclass
class IteracionPrompt:
    """Registro de una iteraci√≥n de prompt"""
    numero: int
    prompt: str
    accion: str  # "INICIAR", "AMPLIAR", "REFINAR", "REEMPLAZAR"
    metadatos_detectados: Dict
    timestamp: str

class ContextoHibrido:
    """Gestiona contexto h√≠brido con auto-detecci√≥n de metadatos"""
    
    def __init__(self):
        # Metadatos estructurados (auto-detectados)
        self.metadatos = {}
        
        # Contenido completo de la √∫ltima respuesta
        self.texto_completo = ""
        
        # Historial de interacciones
        self.historial = []
        
        # Metadata de sesi√≥n
        self.session_id = self._generar_session_id()
        self.timestamp_inicio = datetime.now().isoformat()
        self.prompts_realizados = 0
        
        logger.info(f"üîÑ Contexto h√≠brido inicializado - Session: {self.session_id}")
    
    def _generar_session_id(self) -> str:
        """Genera un ID √∫nico para la sesi√≥n"""
        return f"abp_hibrido_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    def procesar_respuesta_llm(self, respuesta: str, prompt_usuario: str = ""):
        """Procesa la respuesta del LLM y actualiza el contexto autom√°ticamente"""
        # 1. Guardar texto completo
        self.texto_completo = respuesta
        
        # 2. Auto-detectar metadatos
        nuevos_metadatos = self.autodetectar_metadatos(respuesta)
        
        # 3. Actualizar metadatos existentes
        self.metadatos.update(nuevos_metadatos)
        
        # 4. Guardar en historial
        iteracion = IteracionPrompt(
            numero=len(self.historial) + 1,
            prompt=prompt_usuario,
            accion=self.determinar_accion(prompt_usuario),
            metadatos_detectados=nuevos_metadatos,
            timestamp=datetime.now().isoformat()
        )
        
        self.historial.append(iteracion)
        self.prompts_realizados += 1
        
        logger.info(f"üìä Metadatos detectados: {list(nuevos_metadatos.keys())}")
    
    def autodetectar_metadatos(self, texto: str) -> Dict:
        """Auto-detecta metadatos del texto de respuesta del LLM"""
        metadatos = {}
        texto_lower = texto.lower()
        
        # DETECCI√ìN DE MATERIA
        materias_patron = {
            'matematicas': ['matem√°ticas', 'fracciones', 'n√∫meros', 'operaciones', 'mercado de las fracciones', 'c√°lculo', 'geometr√≠a'],
            'lengua': ['escritura', 'lectura', 'texto', 'poes√≠a', 'gram√°tica', 'ortograf√≠a', 'redacci√≥n'],
            'ciencias': ['experimento', 'laboratorio', 'c√©lula', 'planeta', 'cient√≠fico', 'naturaleza', 'f√≠sica', 'qu√≠mica'],
            'geografia': ['geograf√≠a', 'mapa', 'comunidades', 'pa√≠ses', 'ciudades', 'regiones', 'espa√±a', 'andaluc√≠a', 'catalu√±a', 'valencia', 'viajes', 'turismo', 'autonomas'],
            'historia': ['historia', '√©poca', 'siglos', 'acontecimientos', 'pasado'],
            'arte': ['arte', 'pintura', 'dibujo', 'creatividad', 'manualidades']
        }
        
        for materia, palabras_clave in materias_patron.items():
            if any(palabra in texto_lower for palabra in palabras_clave):
                metadatos['materia'] = materia
                break
        
        # DETECCI√ìN DE DURACI√ìN
        patron_duracion = re.search(r'(\d+)\s*(minutos?|min|horas?)', texto_lower)
        if patron_duracion:
            numero = int(patron_duracion.group(1))
            unidad = patron_duracion.group(2)
            if 'hora' in unidad:
                numero *= 60
            metadatos['duracion'] = f"{numero} minutos"
        
        # DETECCI√ìN DE TEMA ESPEC√çFICO
        temas_especificos = ['fracciones', 'multiplicaci√≥n', 'divisi√≥n', 'geometr√≠a', 'ortograf√≠a', 'lectura', 'escritura']
        for tema in temas_especificos:
            if tema in texto_lower:
                metadatos['tema'] = tema
                break
        
        # DETECCI√ìN DE ESTUDIANTES ESPECIALES
        estudiantes_especiales = []
        if 'elena' in texto_lower:
            contextos_elena = ['tea', 'apoyo visual', 'no se sienta perdida', 'tarjetas', 'protocolo visual']
            if any(contexto in texto_lower for contexto in contextos_elena):
                estudiantes_especiales.append('Elena (TEA - apoyo visual)')
        
        if 'luis' in texto_lower:
            contextos_luis = ['tdah', 'moverse', 'movimiento', 'inspector', 'activo', 'cada 15']
            if any(contexto in texto_lower for contexto in contextos_luis):
                estudiantes_especiales.append('Luis (TDAH - necesita movimiento)')
        
        if 'ana' in texto_lower:
            contextos_ana = ['altas capacidades', 'problemas extra', 'auditora', 'desaf√≠os', 'complejos']
            if any(contexto in texto_lower for contexto in contextos_ana):
                estudiantes_especiales.append('Ana (Altas capacidades - desaf√≠os extra)')
        
        if estudiantes_especiales:
            metadatos['estudiantes_especiales'] = estudiantes_especiales
        
        # DETECCI√ìN DE MATERIALES
        materiales_patron = ['productos', 'dinero', 'calculadoras', 'tarjetas', 'papel', 'l√°pices', 'cartulinas', 'tijeras', 'pegamento']
        materiales_detectados = []
        for material in materiales_patron:
            if material in texto_lower:
                materiales_detectados.append(material)
        
        if materiales_detectados:
            metadatos['materiales'] = materiales_detectados
        
        # DETECCI√ìN DE TIPO DE ACTIVIDAD
        tipos_actividad = {
            'simulaci√≥n de mercado': ['mercado', 'tienda', 'comprar', 'vender', 'cajero', 'cliente'],
            'laboratorio': ['experimento', 'laboratorio', 'investigar', 'hip√≥tesis'],
            'juego de roles': ['rol', 'personaje', 'actuar', 'interpretar'],
            'proyecto colaborativo': ['proyecto', 'colaborar', 'equipo', 'grupo']
        }
        
        for tipo, palabras in tipos_actividad.items():
            if any(palabra in texto_lower for palabra in palabras):
                metadatos['tipo_actividad'] = tipo
                break
        
        # DETECCI√ìN DE ROLES ESPEC√çFICOS
        roles_detectados = []
        roles_patron = ['cajero', 'cajera', 'inspector', 'inspectora', 'auditor', 'auditora', 'cliente', 'vendedor', 'contador', 'contable']
        for rol in roles_patron:
            if rol in texto_lower:
                roles_detectados.append(rol)
        
        if roles_detectados:
            metadatos['roles_detectados'] = list(set(roles_detectados))  # Eliminar duplicados
        
        # DETECCI√ìN DE ESTRUCTURA TEMPORAL
        if any(palabra in texto_lower for palabra in ['preparaci√≥n', 'desarrollo', 'cierre', 'fases', 'etapas']):
            metadatos['tiene_estructura_temporal'] = True
        
        return metadatos
    
    def determinar_accion(self, prompt: str) -> str:
        """Determina qu√© tipo de acci√≥n realizar bas√°ndose en el prompt"""
        if not prompt:
            return "INICIAR"
            
        prompt_lower = prompt.lower()
        
        # Indicadores de cambio total
        if any(palabra in prompt_lower for palabra in ['otra cosa', 'diferente', 'cambiar', 'mejor otra', 'no quiero esto']):
            return "REEMPLAZAR"
        
        # Indicadores de refinamiento
        if any(palabra in prompt_lower for palabra in ['m√°s', 'tambi√©n', 'adem√°s', 'incluir', 'a√±adir']):
            return "AMPLIAR"
        
        # Si hay contexto previo, por defecto es refinar
        if self.metadatos:
            return "REFINAR"
        
        return "INICIAR"
    
    def get_contexto_para_llm(self) -> str:
        """Genera el contexto enriquecido para enviar al LLM"""
        contexto_str = "\n=== CONTEXTO DETECTADO ===\n"
        
        if not self.metadatos:
            contexto_str += "(Ning√∫n contexto detectado a√∫n)\n"
        else:
            for clave, valor in self.metadatos.items():
                if isinstance(valor, list):
                    contexto_str += f"- {clave.replace('_', ' ').title()}: {', '.join(valor)}\n"
                else:
                    contexto_str += f"- {clave.replace('_', ' ').title()}: {valor}\n"
        
        if self.texto_completo:
            contexto_str += f"\n=== ACTIVIDAD ANTERIOR ===\n{self.texto_completo[-1500:]}\n"  # √öltimos 1500 chars
        
        if len(self.historial) > 1:
            contexto_str += f"\n=== ITERACIONES REALIZADAS ===\n"
            for iteracion in self.historial[-3:]:  # √öltimas 3 iteraciones
                contexto_str += f"- {iteracion.accion}: {iteracion.prompt[:100]}...\n"
        
        return contexto_str
    
    def get_resumen_sesion(self) -> Dict:
        """Obtiene un resumen de la sesi√≥n actual"""
        return {
            'session_id': self.session_id,
            'prompts_realizados': self.prompts_realizados,
            'metadatos_detectados': self.metadatos,
            'tiene_actividad': bool(self.texto_completo),
            'iteraciones': len(self.historial)
        }
    
    def analizar_continuidad_contexto(self, prompt_nuevo: str) -> str:
        """M√âTODO OBSOLETO - Usar determinar_accion() en su lugar"""
        return self.determinar_accion(prompt_nuevo)
    
    def extraer_informacion_prompt_legacy(self, prompt: str) -> Dict:
        """M√âTODO OBSOLETO - Solo para compatibilidad hacia atr√°s"""
        # Este m√©todo se mantiene por compatibilidad pero ya no se usa
        # La auto-detecci√≥n se hace en autodetectar_metadatos()
        return {}
    
    def actualizar_contexto_legacy(self, prompt: str, accion: str) -> List[str]:
        """M√âTODO OBSOLETO - El contexto ahora se actualiza autom√°ticamente"""
        # Este m√©todo ya no se usa - el contexto se actualiza en procesar_respuesta_llm()
        logger.warning("‚ö†Ô∏è M√©todo obsoleto actualizar_contexto_legacy() llamado")
        return []
    
    def registrar_idea_rechazada_legacy(self, idea: Dict, razon: str = "No especificada"):
        """M√âTODO OBSOLETO - Las ideas rechazadas se manejan autom√°ticamente en ContextoHibrido"""
        logger.info(f"‚ùå Idea rechazada (legacy): {idea.get('titulo', 'Sin t√≠tulo')} - {razon}")
    
    def obtener_contexto_completo_legacy(self) -> str:
        """M√âTODO OBSOLETO - El contexto se maneja ahora en ContextoHibrido"""
        return "Contexto legacy no disponible - usar ContextoHibrido"
        
        return descripcion
    
    def obtener_json_contexto_legacy(self) -> Dict:
        """M√âTODO OBSOLETO - Usar ContextoHibrido en su lugar"""
        return {}  # El contexto ahora est√° en ContextoHibrido

# ===== INTEGRACI√ìN OLLAMA =====
# (Mantiene el mismo integrador de Ollama, no necesita cambios)
class OllamaIntegrator:
    """Integrador simplificado con Ollama API"""
    
    def __init__(self, host: str = "192.168.1.10", port: int = 11434, model: str = "llama3.2"):
        self.host = host
        self.port = port
        self.model = model
        self.base_url = f"http://{host}:{port}"
        
        try:
            from ollama_api_integrator import OllamaAPIEducationGenerator
            self.ollama = OllamaAPIEducationGenerator(host=host, port=port, model_name=model)
            logger.info("‚úÖ Ollama integrado correctamente")
        except ImportError:
            logger.error("‚ùå No se pudo importar OllamaAPIEducationGenerator, usando simulador")
            self.ollama = None
            
    def generar_respuesta(self, prompt: str, max_tokens: int = 500) -> str:
        """Genera respuesta usando Ollama"""
        if self.ollama:
            return self.ollama.generar_texto(prompt, max_tokens=max_tokens, temperature=0.7)
        else:
            # Simulador para desarrollo
            return f"""
            [SIMULADO JSON]
            {{
                "estudiante_001": {{
                    "tareas": ["tarea_01", "tarea_03"],
                    "rol": "coordinador",
                    "justificacion": "Basado en su fortaleza de liderazgo."
                }},
                "estudiante_002": {{
                    "tareas": ["tarea_02"],
                    "rol": "dise√±ador",
                    "justificacion": "Su creatividad visual es perfecta para esta tarea."
                }}
            }}
            """

# ===== AGENTES ESPECIALIZADOS (Refactorizados) =====

class AgenteCoordinador:
    """Agente Coordinador Principal (Master Agent) - CON CONTEXTO H√çBRIDO AUTO-DETECTADO"""
    
    def __init__(self, ollama_integrator: OllamaIntegrator):
        self.ollama = ollama_integrator
        self.historial_prompts = []  # Mantener por compatibilidad
        self.ejemplos_k = self._cargar_ejemplos_k()
    
    def _cargar_ejemplos_k(self) -> Dict[str, str]:
        """Carga ejemplos k_ para few-shot learning"""
        ejemplos = {}
        # Rutas correctas para los archivos k_
        archivos_k = [
            "actividades_generadas/k_feria_acertijos.txt",
            "actividades_generadas/k_sonnet_supermercado.txt", 
            "actividades_generadas/k_celula.txt",
            "actividades_generadas/k_piratas.txt",
            "actividades_generadas/k_sonnet7_fabrica_fracciones.txt"
        ]
        
        for archivo in archivos_k:
            try:
                with open(archivo, 'r', encoding='utf-8') as f:
                    contenido = f.read()
                    nombre_ejemplo = archivo.split('/')[-1].replace('.txt', '').replace('k_', '')
                    ejemplos[nombre_ejemplo] = contenido  # Contenido completo del ejemplo
                    logger.info(f"‚úÖ Cargado ejemplo k_: {nombre_ejemplo}")
            except FileNotFoundError:
                logger.warning(f"‚ùå No se encontr√≥ el archivo: {archivo}")
                continue
        
        if ejemplos:
            logger.info(f"üìö Cargados {len(ejemplos)} ejemplos k_ para few-shot learning")
        else:
            logger.warning("‚ö†Ô∏è No se cargaron ejemplos k_, usando fallback")
            
        return ejemplos
    
    def _crear_fallback_analisis(self, prompt_original: str):
        """Genera un diccionario de fallback basado en el prompt original."""
        
        # Aqu√≠ puedes usar tu l√≥gica para extraer informaci√≥n del prompt
        # Por ejemplo, una simple b√∫squeda de palabras clave
        tema = "indefinido"
        if "arte" in prompt_original.lower():
            tema = "actividad art√≠stica"
        
        duracion = "una semana"
        if "un mes" in prompt_original.lower():
            duracion = "un mes"

        # Retorna un diccionario con los valores extra√≠dos o por defecto
        return {
            "tema": tema,
            "restricciones": [], # Puedes dejar esto vac√≠o o con un valor por defecto
            "formato_arte": "indefinido",
            "objetivo": "indefinido", # No siempre lo podemos extraer, es mejor un valor neutro
            "duracion": duracion
        }
    
    def generar_ideas_actividades_hibrido(self, prompt_profesor: str, contexto_hibrido: ContextoHibrido) -> List[Dict]:
        """Genera 3 ideas de actividades usando contexto h√≠brido auto-detectado"""
        
        # Crear prompt enriquecido con contexto h√≠brido
        prompt_completo = self._crear_prompt_hibrido(prompt_profesor, contexto_hibrido)
        
        # Generar ideas
        respuesta = self.ollama.generar_respuesta(prompt_completo, max_tokens=600)
        ideas = self._parsear_ideas(respuesta)
        
        # PROCESAR RESPUESTA CON CONTEXTO H√çBRIDO
        contexto_hibrido.procesar_respuesta_llm(respuesta, prompt_profesor)
        
        logger.info(f"üìä Contexto actualizado: {list(contexto_hibrido.metadatos.keys())}")
        
        return ideas
    
    def generar_ideas_actividades(self, prompt_profesor: str) -> List[Dict]:
        """M√âTODO LEGACY - Usar generar_ideas_actividades_hibrido() en su lugar"""
        logger.warning("‚ö†Ô∏è M√©todo legacy generar_ideas_actividades() llamado")
        # Fallback al m√©todo h√≠brido con contexto temporal
        contexto_temporal = ContextoHibrido()
        return self.generar_ideas_actividades_hibrido(prompt_profesor, contexto_temporal)
    
    def _crear_prompt_hibrido(self, prompt_profesor: str, contexto_hibrido: ContextoHibrido) -> str:
        """Crea prompt usando contexto h√≠brido auto-detectado"""
        
        # Obtener contexto enriquecido del sistema h√≠brido
        contexto_str = contexto_hibrido.get_contexto_para_llm()
        
        # Seleccionar ejemplo k_ relevante basado en metadatos detectados
        tema_detectado = contexto_hibrido.metadatos.get('materia', '') + ' ' + contexto_hibrido.metadatos.get('tema', '')
        ejemplo_seleccionado = self._seleccionar_ejemplo_relevante(tema_detectado.strip())
        
        # Construir prompt h√≠brido
        prompt_hibrido = f"""
Eres un experto en dise√±o de actividades educativas para 4¬∫ de Primaria.

{contexto_str}

=== NUEVA PETICI√ìN DEL USUARIO ===
{prompt_profesor}

=== ESTUDIANTES ESPEC√çFICOS (AULA_A_4PRIM) ===
- 001 ALEX M.: reflexivo, visual, CI 102
- 002 MAR√çA L.: reflexivo, auditivo
- 003 ELENA R.: reflexivo, visual, TEA nivel 1, CI 118 - Necesita apoyo visual y rutinas
- 004 LUIS T.: impulsivo, kinestetico, TDAH combinado, CI 102 - Necesita movimiento
- 005 ANA V.: reflexivo, auditivo, altas capacidades, CI 141 - Necesita desaf√≠os extra
- 006 SARA M.: equilibrado, auditivo, CI 115
- 007 EMMA K.: reflexivo, visual, CI 132
- 008 HUGO P.: equilibrado, visual, CI 114"""
        
        if ejemplo_seleccionado:
            prompt_hibrido += f"""

=== EJEMPLO DE ACTIVIDAD EXITOSA ===
{ejemplo_seleccionado}

=== PATRONES A SEGUIR ===
‚Ä¢ NARRATIVA INMERSIVA: Contextualizar con historias atractivas
‚Ä¢ OBJETIVOS CLAROS: Competencias espec√≠ficas del tema + habilidades transversales
‚Ä¢ ROL DOCENTE: Observaci√≥n activa, gu√≠a discreta, gesti√≥n emocional
‚Ä¢ ADAPTACIONES: Espec√≠ficas para TEA, TDAH, altas capacidades
‚Ä¢ MATERIALES CONCRETOS: Manipulativos, reales, accesibles"""
        else:
            prompt_hibrido += f"""

=== PRINCIPIOS PEDAG√ìGICOS ===
‚Ä¢ CENTRADO EN EL ESTUDIANTE: Actividades que partan de sus intereses y necesidades
‚Ä¢ APRENDIZAJE SIGNIFICATIVO: Conectar con experiencias reales y contextos aut√©nticos
‚Ä¢ INCLUSI√ìN: Adaptaciones para TEA (Elena), TDAH (Luis), altas capacidades (Ana)
‚Ä¢ COLABORACI√ìN: Fomentar trabajo en equipo y comunicaci√≥n
‚Ä¢ CREATIVIDAD: Permitir m√∫ltiples formas de expresi√≥n y soluci√≥n"""
        
        prompt_hibrido += f"""

=== INSTRUCCIONES CR√çTICAS ===
IMPORTANTE: Lee atentamente la petici√≥n del usuario y c√©ntrate EXCLUSIVAMENTE en el tema que solicita.

Genera exactamente 3 ideas de actividades educativas que:
1. RESPONDAN DIRECTAMENTE al tema espec√≠fico solicitado por el usuario
2. MANTENGAN COHERENCIA TEM√ÅTICA en las 3 ideas (no mezclar materias diferentes)
3. Sean apropiadas para el tema detectado en el contexto: {contexto_hibrido.metadatos.get('materia', 'tema solicitado')}
4. Incluyan adaptaciones para Elena (TEA), Luis (TDAH) y Ana (altas capacidades)
5. Sean completamente ejecutables en 4¬∫ Primaria

SI el usuario pidi√≥ geograf√≠a ‚Üí las 3 ideas deben ser de geograf√≠a
SI el usuario pidi√≥ ciencias ‚Üí las 3 ideas deben ser de ciencias
SI el usuario pidi√≥ matem√°ticas ‚Üí las 3 ideas deben ser de matem√°ticas

NO desv√≠es del tema principal solicitado por el usuario.

FORMATO EXACTO:
IDEA 1:
T√≠tulo: [t√≠tulo del tema espec√≠fico solicitado]
Descripci√≥n: [descripci√≥n detallada del tema solicitado]
Nivel: 4¬∫ Primaria
Competencias: [competencias del tema espec√≠fico]
Duraci√≥n: [tiempo realista]

IDEA 2:
[mismo formato, mismo tema...]

IDEA 3:
[mismo formato, mismo tema...]

C√©ntrate en el tema solicitado y proporciona 3 variaciones creativas del MISMO tema.
"""
        
        return prompt_hibrido
    
    def _crear_prompt_con_contexto_legacy(self) -> str:
        """M√âTODO LEGACY - Mantener por compatibilidad"""
        logger.warning("‚ö†Ô∏è M√©todo legacy _crear_prompt_con_contexto() llamado")
        # M√©todo original conservado pero no usado
        return "Prompt legacy no disponible"
        
        # M√©todo legacy - conservado para compatibilidad
        if ejemplo_seleccionado:
            seccion_ejemplo = f"""
=== EJEMPLO DE ACTIVIDAD EXITOSA ===
{ejemplo_seleccionado}

=== PATRONES A SEGUIR ===
‚Ä¢ NARRATIVA INMERSIVA: Contextualizar con historias atractivas
‚Ä¢ OBJETIVOS CLAROS: Competencias espec√≠ficas del tema + habilidades transversales
‚Ä¢ ROL DOCENTE: Observaci√≥n activa, gu√≠a discreta, gesti√≥n emocional
‚Ä¢ ADAPTACIONES: Espec√≠ficas para TEA, TDAH, altas capacidades
‚Ä¢ MATERIALES CONCRETOS: Manipulativos, reales, accesibles"""
        else:
            seccion_ejemplo = f"""
=== PRINCIPIOS PEDAG√ìGICOS ===
‚Ä¢ CENTRADO EN EL ESTUDIANTE: Actividades que partan de sus intereses y necesidades
‚Ä¢ APRENDIZAJE SIGNIFICATIVO: Conectar con experiencias reales y contextos aut√©nticos
‚Ä¢ INCLUSI√ìN: Adaptaciones para TEA (Elena), TDAH (Luis), altas capacidades (Ana)
‚Ä¢ COLABORACI√ìN: Fomentar trabajo en equipo y comunicaci√≥n
‚Ä¢ CREATIVIDAD: Permitir m√∫ltiples formas de expresi√≥n y soluci√≥n"""

        prompt_fewshot = f"""
Eres un experto en dise√±o de actividades educativas para 4¬∫ de Primaria. 

{contexto_completo}
{seccion_ejemplo}

=== INSTRUCCIONES ===
Bas√°ndote √öNICAMENTE en el CONTEXTO ACUMULATIVO proporcionado, genera exactamente 3 ideas de actividades educativas diferentes que:

1. Sean coherentes con el tema y enfoque ya establecido
2. Eviten repetir las ideas rechazadas anteriormente
3. Incorporen las preferencias del profesor
4. Respeten las restricciones mencionadas
5. NO agregues elementos que no est√©n en el contexto del profesor

FORMATO EXACTO:
IDEA 1:
T√≠tulo: [t√≠tulo contextualizado]
Descripci√≥n: [descripci√≥n que respete exactamente el contexto proporcionado]
Nivel: 4¬∫ Primaria
Competencias: [competencias relevantes al tema espec√≠fico]
Duraci√≥n: [tiempo realista seg√∫n contexto]

IDEA 2:
[mismo formato...]

IDEA 3:
[mismo formato...]
"""
        return prompt_fewshot
    
    def _seleccionar_ejemplo_relevante(self, tema: str) -> str:
        """Selecciona el ejemplo k_ m√°s relevante seg√∫n el tema del contexto JSON"""
        if not tema:
            return ""  # Sin tema, sin ejemplo espec√≠fico
            
        tema_lower = tema.lower()
        
        # Mapeo din√°mico basado en el contexto real
        mapeo_ejemplos = {
            'supermercado': 'sonnet_supermercado',
            'dinero': 'sonnet_supermercado', 
            'comercio': 'sonnet_supermercado',
            'fracciones': 'sonnet7_fabrica_fracciones',
            'f√°brica': 'sonnet7_fabrica_fracciones',
            'ciencias': 'celula',
            'c√©lulas': 'celula',
            'biolog√≠a': 'celula',
            'piratas': 'piratas',
            'tesoro': 'piratas',
            'aventura': 'piratas',
            # NO HAY EJEMPLOS DE GEOGRAF√çA - Devolver vac√≠o para m√°xima creatividad
            'geografia': None,
            'espa√±a': None,
            'comunidades': None,
            'viajes': None
        }
        
        # Buscar coincidencias exactas
        for palabra_clave, ejemplo in mapeo_ejemplos.items():
            if palabra_clave in tema_lower:
                if ejemplo is None:
                    # Intencionalmente sin ejemplo para m√°xima creatividad
                    return ""
                elif ejemplo in self.ejemplos_k:
                    return self.ejemplos_k[ejemplo]
        
        # Si no hay coincidencias, devolver vac√≠o para que el LLM sea m√°s creativo
        return ""
    
    def _get_ejemplo_fallback(self) -> str:
        """Ejemplo de fallback cuando no hay ejemplos k_ disponibles"""
        return """
EJEMPLO ACTIVIDAD ABP:
ACTIVIDAD: Feria Matem√°tica Colaborativa
OBJETIVOS: Desarrollar competencias matem√°ticas mediante resoluci√≥n colaborativa de problemas
DESCRIPCI√ìN: Los estudiantes participan en estaciones rotativas resolviendo desaf√≠os matem√°ticos
ROL PROFESOR: Observaci√≥n activa y gu√≠a discreta
ADAPTACIONES: Apoyo visual para TEA, movimiento para TDAH, retos adicionales para altas capacidades
MATERIALES: Material manipulativo, fichas de problemas, cron√≥metros
"""
    
    def _parsear_ideas(self, respuesta: str) -> List[Dict]:
        """Parsea la respuesta para extraer las 3 ideas con m√∫ltiples patrones"""
        ideas = []
        
        # Intentar m√∫ltiples patrones de divisi√≥n
        patrones_division = ["IDEA ", "**IDEA ", "# IDEA ", "\n\n"]
        partes = None
        
        for patron in patrones_division:
            temp_partes = respuesta.split(patron)
            if len(temp_partes) > 1:
                partes = temp_partes
                break
        
        if not partes:
            # Si no hay divisiones claras, tratar toda la respuesta como una idea
            partes = ["", respuesta]
        
        # Procesar cada parte encontrada
        for i, parte in enumerate(partes[1:]):  # Saltar primera parte vac√≠a
            if not parte.strip() or i >= 3:  # M√°ximo 3 ideas
                continue
                
            idea = {
                "id": f"idea_{i+1}",
                "titulo": self._extraer_titulo_inteligente(parte),
                "descripcion": self._extraer_descripcion_inteligente(parte),
                "nivel": self._extraer_nivel_inteligente(parte),
                "competencias": self._extraer_competencias_inteligente(parte),
                "duracion": self._extraer_duracion_inteligente(parte)
            }
            ideas.append(idea)
        
        # Si no se encontraron ideas estructuradas, crear una √∫nica idea general
        if not ideas:
            ideas.append({
                "id": "idea_1",
                "titulo": self._extraer_titulo_inteligente(respuesta),
                "descripcion": respuesta[:200] + "..." if len(respuesta) > 200 else respuesta,
                "nivel": "4¬∫ Primaria",
                "competencias": "Matem√°ticas, trabajo en equipo",
                "duracion": "2-3 sesiones"
            })
        
        return ideas  # Devolver todas las ideas generadas
    
    def _extraer_titulo_inteligente(self, texto: str) -> str:
        """Extrae t√≠tulo usando m√∫ltiples patrones"""
        patrones = [
            r'T√≠tulo:\s*([^\n]+)',
            r'\*\*([^*]+)\*\*',
            r'"([^"]+)"',
            r'\d+[.:)]\s*([^\n]+)',
            r'^([^\n.!?]+)[.!?]?'
        ]
        
        for patron in patrones:
            match = re.search(patron, texto, re.IGNORECASE | re.MULTILINE)
            if match:
                titulo = match.group(1).strip()
                titulo = re.sub(r'^[\d\s.*:-]+', '', titulo).strip()
                if len(titulo) > 5:
                    return titulo
        
        return "Actividad Educativa"
    
    def _extraer_descripcion_inteligente(self, texto: str) -> str:
        """Extrae descripci√≥n usando m√∫ltiples patrones"""
        desc_match = re.search(r'Descripci√≥n:\s*([^\n]+(?:\n[^\n:]+)*)', texto, re.IGNORECASE)
        if desc_match:
            return desc_match.group(1).strip()
        
        lines = texto.split('\n')
        for line in lines:
            line = line.strip()
            if len(line) > 50 and ':' not in line and not line.startswith(('Nivel', 'Duraci√≥n', 'Competencias')):
                return line
        
        return "Actividad pr√°ctica para desarrollar competencias matem√°ticas"
    
    def _extraer_nivel_inteligente(self, texto: str) -> str:
        """Extrae nivel educativo usando m√∫ltiples patrones"""
        nivel_match = re.search(r'Nivel:\s*([^\n]+)', texto, re.IGNORECASE)
        if nivel_match:
            return nivel_match.group(1).strip()
        
        keywords = {
            'primaria': '4¬∫ Primaria',
            'cuarto': '4¬∫ Primaria', 
            'secundaria': 'Secundaria',
            'infantil': 'Educaci√≥n Infantil'
        }
        
        texto_lower = texto.lower()
        for keyword, nivel in keywords.items():
            if keyword in texto_lower:
                return nivel
        
        return "4¬∫ Primaria"
    
    def _extraer_competencias_inteligente(self, texto: str) -> str:
        """Extrae competencias usando m√∫ltiples patrones"""
        comp_match = re.search(r'Competencias:\s*([^\n]+)', texto, re.IGNORECASE)
        if comp_match:
            return comp_match.group(1).strip()
        
        competencias_encontradas = []
        keywords = {
            'matem√°ticas': 'Competencia matem√°tica',
            'fracciones': 'Competencia matem√°tica',
            'sumas': 'Competencia matem√°tica',
            'decimales': 'Competencia matem√°tica',
            'comunicaci√≥n': 'Competencia ling√º√≠stica',
            'trabajo en equipo': 'Competencia social',
            'creatividad': 'Competencia art√≠stica',
            'tecnolog√≠a': 'Competencia digital'
        }
        
        texto_lower = texto.lower()
        for keyword, competencia in keywords.items():
            if keyword in texto_lower and competencia not in competencias_encontradas:
                competencias_encontradas.append(competencia)
        
        return ', '.join(competencias_encontradas) if competencias_encontradas else "Competencia matem√°tica, trabajo colaborativo"
    
    def _extraer_duracion_inteligente(self, texto: str) -> str:
        """Extrae duraci√≥n usando m√∫ltiples patrones"""
        dur_match = re.search(r'Duraci√≥n:\s*([^\n]+)', texto, re.IGNORECASE)
        if dur_match:
            return dur_match.group(1).strip()
        
        tiempo_patterns = [
            r'(\d+)\s*sesiones?',
            r'(\d+)\s*horas?',
            r'(\d+)\s*d√≠as?',
            r'(\d+)\s*semanas?'
        ]
        
        for pattern in tiempo_patterns:
            match = re.search(pattern, texto, re.IGNORECASE)
            if match:
                return match.group(0)
        
        return "2-3 sesiones"
    
    
    def _parsear_ideas(self, respuesta: str) -> List[Dict]:
        """Parsea la respuesta para extraer las 3 ideas con m√∫ltiples patrones"""
        ideas = []
        
        # Intentar m√∫ltiples patrones de divisi√≥n
        patrones_division = ["IDEA ", "**IDEA ", "# IDEA ", "\n\n"]
        partes = None
        
        for patron in patrones_division:
            temp_partes = respuesta.split(patron)
            if len(temp_partes) > 1:
                partes = temp_partes
                break
        
        if not partes:
            # Si no hay divisiones claras, tratar toda la respuesta como una idea
            partes = ["", respuesta]
        
        # Procesar cada parte encontrada
        for i, parte in enumerate(partes[1:]):  # Saltar primera parte vac√≠a
            if not parte.strip() or i >= 3:  # M√°ximo 3 ideas
                continue
                
            idea = {
                "id": f"idea_{i+1}",
                "titulo": self._extraer_titulo_inteligente(parte),
                "descripcion": self._extraer_descripcion_inteligente(parte),
                "nivel": self._extraer_nivel_inteligente(parte),
                "competencias": self._extraer_competencias_inteligente(parte),
                "duracion": self._extraer_duracion_inteligente(parte)
            }
            ideas.append(idea)
        
        # Si no se encontraron ideas estructuradas, crear una √∫nica idea general
        if not ideas:
            ideas.append({
                "id": "idea_1",
                "titulo": self._extraer_titulo_inteligente(respuesta),
                "descripcion": respuesta[:200] + "..." if len(respuesta) > 200 else respuesta,
                "nivel": "4¬∫ Primaria",
                "competencias": "Matem√°ticas, trabajo en equipo",
                "duracion": "2-3 sesiones"
            })
        
        return ideas  # Devolver todas las ideas generadas
    
    def _extraer_campo(self, texto: str, campo: str) -> str:
        """Extrae un campo espec√≠fico del texto"""
        lines = texto.split('\n')
        for line in lines:
            if campo in line:
                return line.replace(campo, '').strip()
        return "No especificado"
    
    def _extraer_titulo_inteligente(self, texto: str) -> str:
        """Extrae t√≠tulo usando m√∫ltiples patrones"""
        # Patrones en orden de prioridad
        patrones = [
            r'T√≠tulo:\s*([^\n]+)',
            r'\*\*([^*]+)\*\*',
            r'"([^"]+)"',
            r'\d+[.:)]\s*([^\n]+)',
            r'^([^\n.!?]+)[.!?]?'
        ]
        
        for patron in patrones:
            match = re.search(patron, texto, re.IGNORECASE | re.MULTILINE)
            if match:
                titulo = match.group(1).strip()
                # Limpiar caracteres no deseados
                titulo = re.sub(r'^[\d\s.*:-]+', '', titulo).strip()
                if len(titulo) > 5:  # T√≠tulo m√≠nimo razonable
                    return titulo
        
        return "Actividad Educativa"
    
    def _extraer_descripcion_inteligente(self, texto: str) -> str:
        """Extrae descripci√≥n usando m√∫ltiples patrones"""
        # Buscar descripci√≥n expl√≠cita
        desc_match = re.search(r'Descripci√≥n:\s*([^\n]+(?:\n[^\n:]+)*)', texto, re.IGNORECASE)
        if desc_match:
            return desc_match.group(1).strip()
        
        # Buscar p√°rrafos descriptivos (l√≠neas largas sin ":")
        lines = texto.split('\n')
        for line in lines:
            line = line.strip()
            if len(line) > 50 and ':' not in line and not line.startswith(('Nivel', 'Duraci√≥n', 'Competencias')):
                return line
        
        return "Actividad pr√°ctica para desarrollar competencias matem√°ticas"
    
    def _extraer_nivel_inteligente(self, texto: str) -> str:
        """Extrae nivel educativo usando m√∫ltiples patrones"""
        # Buscar nivel expl√≠cito
        nivel_match = re.search(r'Nivel:\s*([^\n]+)', texto, re.IGNORECASE)
        if nivel_match:
            return nivel_match.group(1).strip()
        
        # Buscar palabras clave de nivel
        keywords = {
            'primaria': '4¬∫ Primaria',
            'cuarto': '4¬∫ Primaria', 
            'secundaria': 'Secundaria',
            'infantil': 'Educaci√≥n Infantil'
        }
        
        texto_lower = texto.lower()
        for keyword, nivel in keywords.items():
            if keyword in texto_lower:
                return nivel
        
        return "4¬∫ Primaria"  # Por defecto
    
    def _extraer_competencias_inteligente(self, texto: str) -> str:
        """Extrae competencias usando m√∫ltiples patrones"""
        # Buscar competencias expl√≠citas
        comp_match = re.search(r'Competencias:\s*([^\n]+)', texto, re.IGNORECASE)
        if comp_match:
            return comp_match.group(1).strip()
        
        # Buscar palabras clave de competencias
        competencias_encontradas = []
        keywords = {
            'matem√°ticas': 'Competencia matem√°tica',
            'fracciones': 'Competencia matem√°tica',
            'sumas': 'Competencia matem√°tica',
            'decimales': 'Competencia matem√°tica',
            'comunicaci√≥n': 'Competencia ling√º√≠stica',
            'trabajo en equipo': 'Competencia social',
            'creatividad': 'Competencia art√≠stica',
            'tecnolog√≠a': 'Competencia digital'
        }
        
        texto_lower = texto.lower()
        for keyword, competencia in keywords.items():
            if keyword in texto_lower and competencia not in competencias_encontradas:
                competencias_encontradas.append(competencia)
        
        return ', '.join(competencias_encontradas) if competencias_encontradas else "Competencia matem√°tica, trabajo colaborativo"
    
    def _extraer_duracion_inteligente(self, texto: str) -> str:
        """Extrae duraci√≥n usando m√∫ltiples patrones"""
        # Buscar duraci√≥n expl√≠cita
        dur_match = re.search(r'Duraci√≥n:\s*([^\n]+)', texto, re.IGNORECASE)
        if dur_match:
            return dur_match.group(1).strip()
        
        # Buscar patrones de tiempo
        tiempo_patterns = [
            r'(\d+)\s*sesiones?',
            r'(\d+)\s*horas?',
            r'(\d+)\s*d√≠as?',
            r'(\d+)\s*semanas?'
        ]
        
        for pattern in tiempo_patterns:
            match = re.search(pattern, texto, re.IGNORECASE)
            if match:
                return match.group(0)
        
        return "2-3 sesiones"  # Por defecto
    
    def coordinar_proceso(self, actividad_seleccionada: Dict, info_adicional: str = "") -> Dict:
        """Coordina todo el proceso de creaci√≥n del proyecto ABP"""
        if info_adicional:
            self.historial_prompts.append({
                "tipo": "info_adicional",
                "contenido": info_adicional,
                "timestamp": datetime.now().isoformat()
            })
        
        logger.info(f"üéØ Coordinando proyecto: {actividad_seleccionada.get('titulo', 'Sin t√≠tulo')}")
        
        # Crear estructura base del proyecto
        proyecto_base = {
            "titulo": actividad_seleccionada.get("titulo", "Proyecto ABP"),
            "descripcion": actividad_seleccionada.get("descripcion", ""),
            "nivel": actividad_seleccionada.get("nivel", "4¬∫ Primaria"),
            "competencias_base": actividad_seleccionada.get("competencias", "").split(", "),
            "duracion_base": actividad_seleccionada.get("duracion", "2 semanas"),
            "info_adicional": info_adicional
        }
        
        return proyecto_base

class AgenteAnalizadorTareas:
    """Agente Analizador de Tareas (Task Analyzer Agent)"""
    
    def __init__(self, ollama_integrator: OllamaIntegrator):
        self.ollama = ollama_integrator
    
    def descomponer_actividad(self, proyecto_base: Dict) -> List[Tarea]:
        """Descompone la actividad en subtareas espec√≠ficas"""
        
        prompt_tareas = f"""
Analiza este proyecto educativo siguiendo los patrones exitosos de actividades k_ y descomponlo en subtareas espec√≠ficas:

PROYECTO: {proyecto_base['titulo']}
DESCRIPCI√ìN: {proyecto_base['descripcion']}
NIVEL: {proyecto_base['nivel']}
DURACI√ìN: {proyecto_base['duracion_base']}
INFORMACI√ìN ADICIONAL: {proyecto_base.get('info_adicional', 'No disponible')}

=== PATRONES EXITOSOS K_ ===
‚Ä¢ NARRATIVA INMERSIVA: Mantener contexto atractivo en cada tarea (ofrecer opciones con y sin narrativa)
‚Ä¢ ESTRUCTURA PEDAG√ìGICA: Preparaci√≥n ‚Üí Desarrollo ‚Üí Reflexi√≥n (si el profesor solicita otra estructura, dar prioridad a la suya)
‚Ä¢ ROLES ESPEC√çFICOS: Asignar roles concretos seg√∫n fortalezas (Si la actividad tiene roles, si no, repartir las tareas sin un rol concreto)
‚Ä¢ MATERIAL MANIPULATIVO: Usar objetos reales y tangibles a ser posible, reciclados o accesibles NO tecnol√≥gicos. siempre analogicos
‚Ä¢ ADAPTACIONES DUA: Considerar TEA, TDAH, altas capacidades. Expras en qu√© se traduce la adaptaci√≥n en esta actividad concreta
‚Ä¢ EVALUACI√ìN FORMATIVA: Observaci√≥n y registro continuo

=== ESTRUCTURA RECOMENDADA === adaptar completamente a la especificaci√≥n del profesor
1. PREPARACI√ìN: Contextualizaci√≥n y organizaci√≥n (tantas tareas como requiera la actividad)
2. DESARROLLO: N√∫cleo de la actividad (tantas tareas como requiera la complejidad del proyecto)
3. REFLEXI√ìN: Metacognici√≥n y cierre (seg√∫n necesidades de evaluaci√≥n)

Identifica las subtareas necesarias para completar el proyecto (sin l√≠mite fijo, seg√∫n la complejidad de la actividad). Para cada subtarea proporciona:
- Descripci√≥n clara y espec√≠fica (con contexto narrativo si se solicita)
- Competencias requeridas (matem√°ticas, lengua, ciencias, creativas, digitales)
- Complejidad del 1 al 5 (1=muy f√°cil, 5=muy dif√≠cil)
- Tipo: individual, colaborativa, o creativa
- Tiempo estimado en horas
- Dependencias (qu√© tareas deben completarse antes)
- Adaptaciones sugeridas

Formato:
TAREA 1:
Descripci√≥n: [descripci√≥n espec√≠fica con contexto narrativo]
Competencias: [competencias separadas por comas]
Complejidad: [1-5]
Tipo: [individual/colaborativa/creativa]
Tiempo: [horas]
Dependencias: [ninguna o nombre de tareas previas]
Adaptaciones: [adaptaciones espec√≠ficas para diversidad]

[Repetir para todas las tareas siguiendo estructura Preparaci√≥n-Desarrollo-Reflexi√≥n...]
"""
        
        respuesta = self.ollama.generar_respuesta(prompt_tareas, max_tokens=800)
        return self._parsear_tareas(respuesta)
    
    def _parsear_tareas(self, respuesta: str) -> List[Tarea]:
        """Parsea la respuesta para crear objetos Tarea"""
        tareas = []
        partes = respuesta.split("TAREA ")
        
        for i, parte in enumerate(partes[1:]):  # Saltar el primer elemento vac√≠o
            if not parte.strip():
                continue
                
            tarea = Tarea(
                id=f"tarea_{i+1:02d}",
                descripcion=self._extraer_campo(parte, "Descripci√≥n:"),
                competencias_requeridas=self._extraer_lista(parte, "Competencias:"),
                complejidad=self._extraer_numero(parte, "Complejidad:", 3),
                tipo=self._extraer_campo(parte, "Tipo:"),
                dependencias=self._extraer_lista(parte, "Dependencias:"),
                tiempo_estimado=self._extraer_numero(parte, "Tiempo:", 2)
            )
            tareas.append(tarea)
        
        return tareas
    
    def _extraer_campo(self, texto: str, campo: str) -> str:
        """Extrae un campo espec√≠fico del texto"""
        lines = texto.split('\n')
        for line in lines:
            if campo in line:
                return line.replace(campo, '').strip()
        return "No especificado"
    
    def _extraer_lista(self, texto: str, campo: str) -> List[str]:
        """Extrae una lista de elementos separados por comas"""
        valor = self._extraer_campo(texto, campo)
        if valor and valor != "No especificado":
            return [item.strip() for item in valor.split(",")]
        return []
    
    def _extraer_numero(self, texto: str, campo: str, default: int) -> int:
        """Extrae un n√∫mero del texto"""
        valor = self._extraer_campo(texto, campo)
        try:
            return int(re.findall(r'\d+', valor)[0])
        except:
            return default

class AgentePerfiladorEstudiantes:
    """Agente Perfilador de Estudiantes - AULA_A_4PRIM"""
    
    def __init__(self, ollama_integrator: OllamaIntegrator):
        self.ollama = ollama_integrator
        self.perfiles_base = self._cargar_perfiles_reales()
        logger.info(f"üë• Perfilador inicializado con {len(self.perfiles_base)} estudiantes del AULA_A_4PRIM")
    
    def _cargar_perfiles_reales(self) -> List[Estudiante]:
        """Carga los perfiles reales espec√≠ficos del AULA_A_4PRIM desde el archivo JSON"""
        try:
            with open("perfiles_4_primaria.json", "r", encoding="utf-8") as f:
                data = json.load(f)
            
            estudiantes = []
            for perfil in data["estudiantes"]:
                # Extraer informaci√≥n rica del JSON
                fortalezas = self._extraer_fortalezas(perfil)
                necesidades_apoyo = self._extraer_necesidades_apoyo(perfil)
                adaptaciones = perfil.get("necesidades_especiales", [])
                historial_roles = self._generar_historial_roles(perfil)
                
                estudiante = Estudiante(
                    id=perfil["id"],
                    nombre=perfil["nombre"],
                    fortalezas=fortalezas,
                    necesidades_apoyo=necesidades_apoyo,
                    disponibilidad=self._calcular_disponibilidad(perfil),
                    historial_roles=historial_roles,
                    adaptaciones=adaptaciones
                )
                estudiantes.append(estudiante)
            
            # Log detallado de estudiantes cargados
            logger.info(f"‚úÖ AULA_A_4PRIM: Cargados {len(estudiantes)} perfiles reales:")
            for est in estudiantes:
                # Buscar el perfil original para obtener el diagn√≥stico
                perfil_original = next((p for p in data["estudiantes"] if p["id"] == est.id), {})
                diagnostico = self._obtener_diagnostico_legible(perfil_original.get("diagnostico_formal", "ninguno"))
                logger.info(f"   ‚Ä¢ {est.nombre} (ID: {est.id}) - {diagnostico}")
            
            return estudiantes
            
        except FileNotFoundError:
            logger.error("‚ùå CR√çTICO: No se encontr√≥ perfiles_4_primaria.json")
            logger.error("   El sistema requiere los perfiles reales de estudiantes")
            raise FileNotFoundError("Archivo perfiles_4_primaria.json requerido para el funcionamiento")
        except Exception as e:
            logger.error(f"‚ùå Error cargando perfiles reales: {e}")
            raise
    
    def _extraer_fortalezas(self, perfil: dict) -> List[str]:
        """Extrae fortalezas bas√°ndose en competencias conseguidas y intereses"""
        fortalezas = []
        
        # Basado en competencias conseguidas/superadas
        if perfil["matematicas"].get("numeros_10000") in ["CONSEGUIDO", "SUPERADO"]:
            fortalezas.append("matem√°ticas_n√∫meros")
        if perfil["matematicas"].get("operaciones_complejas") in ["CONSEGUIDO", "SUPERADO"]:
            fortalezas.append("operaciones_matem√°ticas")
        if perfil["lengua"].get("tiempos_verbales") in ["CONSEGUIDO", "SUPERADO"]:
            fortalezas.append("gram√°tica")
        if perfil["lengua"].get("textos_informativos") in ["CONSEGUIDO", "SUPERADO"]:
            fortalezas.append("comunicaci√≥n_escrita")
        if perfil["ciencias"].get("metodo_cientifico") in ["CONSEGUIDO", "SUPERADO"]:
            fortalezas.append("investigaci√≥n")
        
        # Basado en intereses
        for interes in perfil["intereses"]:
            if interes == "ciencias":
                fortalezas.append("curiosidad_cient√≠fica")
            elif interes == "experimentos":
                fortalezas.append("experimentaci√≥n")
            elif interes == "trabajo_en_grupo":
                fortalezas.append("colaboraci√≥n")
            elif interes == "lectura":
                fortalezas.append("comprensi√≥n_lectora")
        
        # Basado en caracter√≠sticas espec√≠ficas
        if perfil["temperamento"] == "reflexivo":
            fortalezas.append("pensamiento_anal√≠tico")
        if perfil["tolerancia_frustracion"] == "alta":
            fortalezas.append("perseverancia")
            
        return fortalezas  # Devolver todas las fortalezas identificadas
    
    def _extraer_necesidades_apoyo(self, perfil: dict) -> List[str]:
        """Extrae necesidades de apoyo bas√°ndose en el perfil completo"""
        necesidades = []
        
        # Basado en nivel de apoyo
        if perfil["nivel_apoyo"] == "alto":
            necesidades.append("supervisi√≥n_continua")
        elif perfil["nivel_apoyo"] == "medio":
            necesidades.append("check_ins_regulares")
        
        # Basado en tolerancia a la frustraci√≥n
        if perfil["tolerancia_frustracion"] == "baja":
            necesidades.append("apoyo_emocional")
            necesidades.append("tareas_graduadas")
        
        # Basado en canal preferido
        if perfil["canal_preferido"] == "visual":
            necesidades.append("apoyos_visuales")
        elif perfil["canal_preferido"] == "auditivo":
            necesidades.append("explicaciones_verbales")
        elif perfil["canal_preferido"] == "kinest√©sico":
            necesidades.append("actividades_manipulativas")
        
        # Basado en diagn√≥stico formal
        diagnostico = perfil.get("diagnostico_formal", "ninguno")
        if "TEA" in diagnostico:
            necesidades.extend(["rutinas_estructuradas", "ambiente_predecible"])
        elif "TDAH" in diagnostico:
            necesidades.extend(["instrucciones_claras", "descansos_frecuentes"])
        elif "altas_capacidades" in diagnostico:
            necesidades.extend(["retos_adicionales", "proyectos_autonomos"])
        
        return necesidades
    
    def _calcular_disponibilidad(self, perfil: dict) -> int:
        """Calcula disponibilidad basada en m√∫ltiples factores"""
        disponibilidad = 85  # Base
        
        # Ajustar por nivel de apoyo
        if perfil["nivel_apoyo"] == "bajo":
            disponibilidad += 10
        elif perfil["nivel_apoyo"] == "alto":
            disponibilidad -= 15
        
        # Ajustar por tolerancia a frustraci√≥n
        if perfil["tolerancia_frustracion"] == "alta":
            disponibilidad += 5
        elif perfil["tolerancia_frustracion"] == "baja":
            disponibilidad -= 10
        
        # Ajustar por temperamento
        if perfil["temperamento"] == "impulsivo":
            disponibilidad -= 5
        
        return max(60, min(100, disponibilidad))  # Entre 60-100
    
    def _generar_historial_roles(self, perfil: dict) -> List[str]:
        """Genera historial de roles basado en fortalezas y estilo de aprendizaje"""
        roles = []
        
        # Roles basados en estilo de aprendizaje
        if "visual" in perfil["estilo_aprendizaje"]:
            roles.append("dise√±ador_visual")
        if "auditivo" in perfil["estilo_aprendizaje"]:
            roles.append("comunicador")
        if "kinest√©sico" in perfil["estilo_aprendizaje"]:
            roles.append("experimentador")
        
        # Roles basados en intereses
        if "ciencias" in perfil["intereses"]:
            roles.append("investigador_cient√≠fico")
        if "experimentos" in perfil["intereses"]:
            roles.append("experimentador")
        if "trabajo_colaborativo" in perfil["intereses"]:
            roles.append("facilitador_grupal")
        if "lectura" in perfil["intereses"]:
            roles.append("analista_informaci√≥n")
        
        # Roles espec√≠ficos por diagn√≥stico
        diagnostico = perfil.get("diagnostico_formal", "ninguno")
        if "altas_capacidades" in diagnostico:
            roles.append("mentor_acad√©mico")
        
        return roles  # Devolver todos los roles identificados
    
    def _obtener_diagnostico_legible(self, diagnostico_formal: str) -> str:
        """Convierte el diagn√≥stico formal en texto legible"""
        if diagnostico_formal == "TEA_nivel_1":
            return "TEA nivel 1"
        elif diagnostico_formal == "TDAH_combinado":
            return "TDAH combinado"
        elif diagnostico_formal == "altas_capacidades":
            return "Altas capacidades"
        elif diagnostico_formal == "ninguno":
            return "Desarrollo t√≠pico"
        else:
            return diagnostico_formal
    
    def analizar_perfiles(self, tareas: List[Tarea]) -> Dict[str, Dict]:
        """Analiza perfiles de estudiantes en relaci√≥n a las tareas"""
        
        # Crear un prompt con informaci√≥n de estudiantes y tareas
        info_estudiantes = "\n".join([
            f"- {e.id}: {e.nombre} - Fortalezas: {', '.join(e.fortalezas)} - Necesidades: {', '.join(e.necesidades_apoyo)}"
            for e in self.perfiles_base
        ])
        
        info_tareas = "\n".join([
            f"- {t.id}: {t.descripcion} - Competencias: {', '.join(t.competencias_requeridas)} - Tipo: {t.tipo}"
            for t in tareas
        ])
        
        prompt_analisis = f"""
Analiza estos estudiantes y tareas para identificar compatibilidades:

ESTUDIANTES:
{info_estudiantes}

TAREAS:
{info_tareas}

Para cada estudiante, identifica:
1. Qu√© tareas se adaptan mejor a sus fortalezas
2. Qu√© tareas podr√≠an ayudarle a desarrollar nuevas competencias
3. Qu√© adaptaciones espec√≠ficas necesita
4. Qu√© rol ser√≠a m√°s apropiado en el proyecto

Formato:
ESTUDIANTE [ID]:
Tareas_compatibles: [lista de IDs de tareas]
Tareas_desarrollo: [tareas para crecer]
Adaptaciones: [adaptaciones espec√≠ficas]

[Repetir para todos los estudiantes...]
"""
        
        respuesta = self.ollama.generar_respuesta(prompt_analisis, max_tokens=900)
        return self._parsear_analisis(respuesta)
    
    def _parsear_analisis(self, respuesta: str) -> Dict[str, Dict]:
        """Parsea el an√°lisis de compatibilidades"""
        analisis = {}
        partes = respuesta.split("ESTUDIANTE ")
        
        for parte in partes[1:]:
            if not parte.strip():
                continue
                
            # Extraer ID del estudiante
            lines = parte.split('\n')
            estudiante_id = lines[0].replace(':', '').strip()
            
            analisis[estudiante_id] = {
                "tareas_compatibles": self._extraer_lista_ids(parte, "Tareas_compatibles:"),
                "tareas_desarrollo": self._extraer_lista_ids(parte, "Tareas_desarrollo:"),
                "adaptaciones": self._extraer_lista_simple(parte, "Adaptaciones:"),
                "rol_sugerido": self._extraer_campo_simple(parte, "Rol_sugerido:")
            }
        
        return analisis
    
    def _extraer_lista_ids(self, texto: str, campo: str) -> List[str]:
        """Extrae lista de IDs de tareas"""
        valor = self._extraer_campo_simple(texto, campo)
        if valor and valor != "No especificado":
            # Buscar patrones como tarea_01, tarea_02, etc.
            ids = re.findall(r'tarea_\d+', valor)
            return ids
        return []
    
    def _extraer_lista_simple(self, texto: str, campo: str) -> List[str]:
        """Extrae lista simple separada por comas"""
        valor = self._extraer_campo_simple(texto, campo)
        if valor and valor != "No especificado":
            return [item.strip() for item in valor.split(",")]
        return []
    
    def _extraer_campo_simple(self, texto: str, campo: str) -> str:
        """Extrae un campo espec√≠fico del texto"""
        lines = texto.split('\n')
        for line in lines:
            if campo in line:
                return line.replace(campo, '').strip()
        return "No especificado"

class AgenteOptimizadorAsignaciones:
    """Agente Optimizador de Asignaciones (Assignment Optimizer Agent)"""
    
    def __init__(self, ollama_integrator: OllamaIntegrator):
        self.ollama = ollama_integrator
        self.perfiles = {}  # Se actualizar√° cuando reciba los perfiles

    def optimizar_asignaciones(self, tareas: List[Tarea], analisis_estudiantes: Dict, perfilador=None) -> Dict:
        """Optimiza las asignaciones de tareas bas√°ndose en el an√°lisis de perfiles."""
        
        # Actualizar perfiles si se proporciona perfilador
        if perfilador and hasattr(perfilador, 'perfiles_base'):
            self.perfiles = {e.id: e for e in perfilador.perfiles_base}
            logger.info(f"üìã Perfiles actualizados: {len(self.perfiles)} estudiantes")
        
        # Convertir la lista de objetos Tarea a una lista de diccionarios para que sea serializable
        tareas_dict_list = [asdict(tarea) for tarea in tareas] 
        
        # Prepara el prompt para el LLM con instrucciones m√°s claras
        prompt_optimizacion = f"""
Eres un experto en asignaci√≥n de tareas educativas del AULA_A_4PRIM.

TAREAS DISPONIBLES:
{json.dumps(tareas_dict_list, indent=2, ensure_ascii=False)}

AN√ÅLISIS DE ESTUDIANTES:
{json.dumps(analisis_estudiantes, indent=2, ensure_ascii=False)}

INSTRUCCIONES:
- Equilibra la carga de trabajo seg√∫n disponibilidad y capacidades
- Asigna seg√∫n fortalezas y necesidades espec√≠ficas de cada estudiante
- Elena (003): TEA - rutinas estructuradas, tareas predecibles
- Luis (004): TDAH - tareas din√°micas, permite movimiento
- Ana (005): Altas capacidades - puede liderar y tomar m√°s responsabilidad
- Considera tiempo estimado y complejidad de cada tarea
- Permite flexibilidad en n√∫mero de tareas seg√∫n el estudiante

RESPONDE √öNICAMENTE CON ESTE JSON (sin texto adicional):
{{
  "asignaciones": {{
    "estudiante_001": ["tarea_01", "tarea_02"],
    "estudiante_002": ["tarea_03"],
    "estudiante_003": ["tarea_04"],
    "estudiante_004": ["tarea_05"],
    "estudiante_005": ["tarea_06"],
    "estudiante_006": ["tarea_07"],
    "estudiante_007": ["tarea_08"],
    "estudiante_008": ["tarea_09"]
  }}
}}"""
        
        try:
            # Llamada al LLM y parseo robusto
            respuesta_llm = self.ollama.generar_respuesta(prompt_optimizacion, max_tokens=500)
            asignaciones_dict = parse_json_seguro(respuesta_llm)
            
            if asignaciones_dict:
                logger.info(f"‚úÖ Asignaciones parseadas correctamente.")
                return asignaciones_dict.get('asignaciones', {})
            else:
                raise ValueError("No se pudo parsear JSON de asignaciones")
        
        except Exception as e:
            logger.error(f"‚ùå Error al parsear asignaciones del LLM: {e}")
            logger.info("‚ö†Ô∏è Usando l√≥gica de fallback para las asignaciones.")
            # L√≥gica de fallback simple: distribuir tareas de manera equitativa
            asignaciones_fallback = {}
            
            # Usar perfiles reales para asignaci√≥n de fallback
            if not self.perfiles:
                logger.warning("No hay perfiles de estudiantes cargados. Devolviendo asignaciones vac√≠as.")
                return {}
            
            estudiantes_ids = list(self.perfiles.keys())
            num_estudiantes = len(estudiantes_ids)
            
            if num_estudiantes == 0:
                logger.warning("No hay estudiantes disponibles para asignaci√≥n.")
                return {}
            
            # Distribuci√≥n equitativa mejorada
            tareas_por_estudiante = len(tareas) // num_estudiantes
            tareas_extra = len(tareas) % num_estudiantes
            
            indice_tarea = 0
            
            for i, estudiante_id in enumerate(estudiantes_ids):
                # Calcular n√∫mero de tareas para este estudiante
                num_tareas_estudiante = tareas_por_estudiante
                if i < tareas_extra:
                    num_tareas_estudiante += 1
                
                # Sin l√≠mite artificial - distribuir seg√∫n capacidad y disponibilidad
                # Ajustar por disponibilidad del estudiante (si est√° disponible)
                if estudiante_id in self.perfiles:
                    disponibilidad = self.perfiles[estudiante_id].disponibilidad
                    # Estudiantes con mayor disponibilidad pueden tomar m√°s tareas
                    if disponibilidad > 85:
                        num_tareas_estudiante = min(num_tareas_estudiante + 1, len(tareas))
                    elif disponibilidad < 70:
                        num_tareas_estudiante = max(1, num_tareas_estudiante - 1)
                
                # Asignar tareas
                tareas_estudiante = []
                for _ in range(num_tareas_estudiante):
                    if indice_tarea < len(tareas):
                        tareas_estudiante.append(tareas[indice_tarea].id)
                        indice_tarea += 1
                
                asignaciones_fallback[f"estudiante_{estudiante_id}"] = tareas_estudiante
            
            logger.info(f"‚úÖ Asignaciones fallback creadas para {len(asignaciones_fallback)} estudiantes usando perfiles reales.")
            return asignaciones_fallback
        

    def _parsear_asignaciones(self, respuesta: str, tareas: List[Tarea]) -> List[Dict]:
        """
        Parsea la respuesta del LLM. Intenta leer JSON primero y luego usa fallback.
        """
        try:
            # Intento de parseo de JSON
            json_str = respuesta.strip().replace("[SIMULADO JSON]\n", "")
            asignaciones_dict = json.loads(json_str)
            
            asignaciones_list = []
            for estudiante_id, data in asignaciones_dict.items():
                asignaciones_list.append({
                    "estudiante_id": estudiante_id.replace("estudiante_", ""),
                    "tareas_asignadas": data.get("tareas", []),
                    "rol_principal": data.get("rol", "colaborador"),
                    "justificacion": data.get("justificacion", "No especificado")
                })
            
            return asignaciones_list

        except json.JSONDecodeError as e:
            logger.error(f"‚ùå Error al parsear JSON del LLM: {e}")
            logger.info("‚ö†Ô∏è Usando l√≥gica de fallback para el parseo.")
            
            # L√≥gica de fallback (simple distribuci√≥n como en el script original, pero con m√°s info)
            asignaciones = []
            estudiantes_ids = list(self.perfiles.keys())
            
            for i, estudiante_id in enumerate(estudiantes_ids):
                tareas_asignadas = [t.id for t in tareas if i == int(t.id.split('_')[1]) % len(estudiantes_ids)]
                
                asignaciones.append({
                    "estudiante_id": estudiante_id,
                    "tareas_asignadas": tareas_asignadas,
                    "rol_principal": "colaborador", # Fallback
                    "justificacion": "Distribuci√≥n por defecto debido a error de formato del LLM."
                })
                
            return asignaciones
            
# A√ëADIMOS LA CLASE QUE FALTABA
class AgenteGeneradorRecursos:
    """Agente Generador de Recursos (Resource Generator Agent)"""
    
    def __init__(self, ollama_integrator: OllamaIntegrator):
        self.ollama = ollama_integrator
    
    def generar_recursos(self, proyecto_base: dict, tareas: list, asignaciones: dict) -> dict:
        """
        Genera una lista de recursos materiales, anal√≥gicos y digitales
        para el proyecto, en formato JSON.
        """
        
        # Prompt mejorado para recursos con contexto espec√≠fico
        prompt_recursos = f"""
Eres un experto en recursos educativos para 4¬∫ de Primaria.

PROYECTO: {proyecto_base.get('titulo', 'Actividad educativa')}
DESCRIPCI√ìN: {proyecto_base.get('descripcion', 'No disponible')}

TAREAS DEL PROYECTO:
{json.dumps([asdict(t) for t in tareas], indent=2, ensure_ascii=False)}

ESTUDIANTES ESPECIALES A CONSIDERAR:
- Elena (TEA): Necesita materiales estructurados y predecibles
- Luis (TDAH): Materiales que permitan movimiento y manipulaci√≥n
- Ana (Altas capacidades): Recursos adicionales para profundizar

RESPONDE √öNICAMENTE CON ESTE JSON (sin texto adicional):
{{
  "recursos_materiales": [
    "Recurso f√≠sico 1",
    "Recurso f√≠sico 2",
    "Recurso f√≠sico 3"
  ],
  "recursos_analogicos": [
    "Herramienta manipulativa 1",
    "Herramienta manipulativa 2"
  ],
  "recursos_digitales": [
    "Recurso digital 1",
    "Recurso digital 2"
  ]
}}"""
        
        try:
            # Llamada al LLM y parseo robusto
            respuesta_llm = self.ollama.generar_respuesta(prompt_recursos, max_tokens=500)
            recursos_dict = parse_json_seguro(respuesta_llm)
            
            if recursos_dict:
                logger.info(f"‚úÖ Recursos parseados correctamente.")
                return recursos_dict
            else:
                raise ValueError("No se pudo parsear JSON de recursos")
                
        except Exception as e:
            logger.error(f"‚ùå Error al parsear recursos del LLM: {e}")
            logger.info("‚ö†Ô∏è Usando l√≥gica de fallback para los recursos.")
            # L√≥gica de fallback expandida (materiales base + contextuales)
            return {
                "recursos_materiales": [
                    # Materiales educativos b√°sicos
                    "Papel", "L√°pices", "Marcadores", "Pintura", "Tijeras", "Pegamento",
                    "Cartulinas", "Rotuladores", "Reglas", "Gomas de borrar",
                    # Materiales espec√≠ficos del contexto (si aplica)
                    "Gu√≠as de viaje", "Mapas f√≠sicos", "Atlas", "Material manipulativo"
                ],
                "recursos_analogicos": [
                    # Recursos manipulativos b√°sicos
                    "Regletas de Cuisenaire", "Bloques l√≥gicos", "Material de construcci√≥n",
                    "Juegos de mesa educativos", "Puzzles", "Dados",
                    # Recursos espec√≠ficos del contexto (si aplica)
                    "Br√∫jula", "Herramientas de medici√≥n", "Material de orientaci√≥n"
                ],
                "recursos_digitales": [
                    # Herramientas digitales b√°sicas
                    "Editor de texto", "Buscador de im√°genes", "Calculadora", 
                    "Herramientas de presentaci√≥n", "Apps educativas",
                    # Recursos espec√≠ficos del contexto (si aplica)
                    "Recursos web tem√°ticos", "Mapas digitales"
                ]
            }
        
    def _parsear_recursos(self, respuesta: str) -> Dict[str, List[str]]:
        """Parsea una respuesta en formato JSON para crear el diccionario de recursos."""
        
        try:
            # Intenta parsear directamente como JSON si es posible
            recursos = json.loads(respuesta)
            # Verifica que las claves esperadas existan y sean listas
            if not all(k in recursos and isinstance(recursos[k], list) for k in ["recursos_materiales", "recursos_analogicos", "recursos_digitales"]):
                raise ValueError("El JSON no tiene el formato esperado.")
            
            return recursos
        
        except json.JSONDecodeError as e:
            # En caso de que el LLM no devuelva un JSON perfecto, usamos regex como fallback
            print(f"‚ö†Ô∏è Error al parsear JSON. Usando l√≥gica de fallback (regex). Error: {e}")
            
            recursos = {
                "recursos_materiales": [],
                "recursos_analogicos": [],
                "recursos_digitales": []
            }
            
            # Regex para recursos materiales
            materiales_match = re.search(r'"recursos_materiales":\s*\[([^]]*)\]', respuesta, re.DOTALL)
            if materiales_match:
                try:
                    # Usa json.loads para parsear la lista de forma segura
                    recursos['recursos_materiales'] = json.loads(f'[{materiales_match.group(1)}]')
                except json.JSONDecodeError:
                    # Si falla, se hace un parseo simple por comas
                    recursos['recursos_materiales'] = [item.strip().strip('"') for item in materiales_match.group(1).split(",") if item.strip()]

            # Regex para recursos anal√≥gicos
            analogicos_match = re.search(r'"recursos_analogicos":\s*\[([^]]*)\]', respuesta, re.DOTALL)
            if analogicos_match:
                try:
                    recursos['recursos_analogicos'] = json.loads(f'[{analogicos_match.group(1)}]')
                except json.JSONDecodeError:
                    recursos['recursos_analogicos'] = [item.strip().strip('"') for item in analogicos_match.group(1).split(",") if item.strip()]

            # Regex para recursos digitales
            digitales_match = re.search(r'"recursos_digitales":\s*\[([^]]*)\]', respuesta, re.DOTALL)
            if digitales_match:
                try:
                    recursos['recursos_digitales'] = json.loads(f'[{digitales_match.group(1)}]')
                except json.JSONDecodeError:
                    recursos['recursos_digitales'] = [item.strip().strip('"') for item in digitales_match.group(1).split(",") if item.strip()]

            return recursos

# ===== SISTEMA PRINCIPAL =====

class SistemaAgentesABP:
    """Sistema de Agentes para Aprendizaje Basado en Proyectos (ABP) con Contexto H√≠brido"""
    def __init__(self, host_ollama: str = "192.168.1.10", model: str = "llama3.2"):
        self.ollama = OllamaIntegrator(host=host_ollama, model=model)
        
        # CONTEXTO H√çBRIDO (reemplaza el contexto JSON r√≠gido)
        self.contexto_hibrido = ContextoHibrido()
        
        # Inicializar agentes
        self.coordinador = AgenteCoordinador(self.ollama)
        self.analizador_tareas = AgenteAnalizadorTareas(self.ollama)
        self.perfilador = AgentePerfiladorEstudiantes(self.ollama)
        
        # El optimizador recibe referencia al perfilador
        self.optimizador = AgenteOptimizadorAsignaciones(self.ollama)
        self.generador_recursos = AgenteGeneradorRecursos(self.ollama)
        
        self.proyecto_actual = None
        self.validado = False
        
        logger.info("üöÄ Sistema de Agentes ABP inicializado con contexto h√≠brido")
        
    def ejecutar_flujo_completo(self) -> Dict:
        """Ejecuta el flujo completo del sistema"""
        
        print("üéì SISTEMA DE AGENTES PARA ABP - ESTRUCTURA SENCILLA")
        print("=" * 60)
        
        # PASO 1: Prompt inicial del profesor
        prompt_profesor = input("\nüìù Ingrese su prompt de actividad educativa: ")
        
        # PASO 2: Generar ideas de actividades con contexto h√≠brido
        print("\nüß† Generando ideas de actividades...")
        ideas = self.coordinador.generar_ideas_actividades_hibrido(prompt_profesor, self.contexto_hibrido)
        
        print("\nüí° IDEAS GENERADAS:")
        for i, idea in enumerate(ideas, 1):
            print(f"\n{i}. {idea.get('titulo', 'Sin t√≠tulo')}")
            print(f"   Descripci√≥n: {idea.get('descripcion', 'No disponible')}")
            print(f"   Nivel: {idea.get('nivel', 'No especificado')}")
            print(f"   Duraci√≥n: {idea.get('duracion', 'No especificada')}")
        
        # PASO 3: Selecci√≥n de actividad con opciones adicionales
        actividad_seleccionada = None  # Inicializamos la variable fuera del bucle
        
        while True:
            try:
                print(f"\nüéØ Opciones disponibles:")
                print(f"   1-{len(ideas)}: Seleccionar una de las ideas y continuar")
                print(f"   M: Me gusta alguna idea pero quiero matizarla/perfilarla")
                print(f"   0: Generar nuevas ideas con un prompt diferente")
                
                # La opci√≥n -1 solo se muestra si ya hay una actividad seleccionada
                if actividad_seleccionada:
                    print(f"   -1: A√±adir m√°s detalles a la idea '{actividad_seleccionada.get('titulo', 'Sin t√≠tulo')}'")
                
                seleccion_input = input(f"\nüéØ Su elecci√≥n: ").strip().upper()
                
                # Convertir a n√∫mero si es posible, o mantener como string para M
                try:
                    seleccion = int(seleccion_input)
                except ValueError:
                    seleccion = seleccion_input
                
                if seleccion == "M":
                    # Opci√≥n para matizar/perfilar ideas existentes
                    print("\nüîß MATIZAR/PERFILAR IDEAS")
                    print("¬øCu√°l de las ideas te parece m√°s interesante para perfilar?")
                    
                    try:
                        idea_a_perfilar = int(input(f"Selecciona el n√∫mero (1-{len(ideas)}): "))
                        if 1 <= idea_a_perfilar <= len(ideas):
                            idea_seleccionada = ideas[idea_a_perfilar - 1]
                            print(f"\n‚úèÔ∏è Has seleccionado: {idea_seleccionada.get('titulo', 'Sin t√≠tulo')}")
                            
                            # Solicitar matizaciones espec√≠ficas
                            matizaciones = input("\nüìù ¬øQu√© aspectos te gustar√≠a matizar/cambiar de esta idea?: ")
                            
                            # En el contexto h√≠brido, las ideas rechazadas se manejan autom√°ticamente
                            logger.info(f"üìã Usuario seleccion√≥ idea {idea_a_perfilar} para matizar")
                            
                            # Crear prompt para matizar la idea seleccionada
                            prompt_matizacion = f"Toma esta idea: '{idea_seleccionada.get('titulo', '')}' - {idea_seleccionada.get('descripcion', '')} y aplica estos cambios/matizaciones: {matizaciones}"
                            
                            print("\nüß† Generando versiones matizadas...")
                            ideas = self.coordinador.generar_ideas_actividades_hibrido(prompt_matizacion, self.contexto_hibrido)
                            
                            print("\nüí° IDEAS MATIZADAS GENERADAS:")
                            for i, idea in enumerate(ideas, 1):
                                print(f"\n{i}. {idea.get('titulo', 'Sin t√≠tulo')}")
                                print(f"   Descripci√≥n: {idea.get('descripcion', 'No disponible')}")
                                print(f"   Nivel: {idea.get('nivel', 'No especificado')}")
                                print(f"   Duraci√≥n: {idea.get('duracion', 'No especificada')}")
                            
                            # Reiniciar selecci√≥n con nuevas ideas matizadas
                            actividad_seleccionada = None
                            continue
                        else:
                            print(f"‚ùå Selecci√≥n inv√°lida. Elige entre 1 y {len(ideas)}")
                            continue
                    except ValueError:
                        print("‚ùå Ingrese un n√∫mero v√°lido")
                        continue
                
                elif seleccion == 0:
                    # En el contexto h√≠brido, las ideas rechazadas se procesan autom√°ticamente
                    logger.info("üìã Usuario solicit√≥ nuevas ideas, context h√≠brido se actualizar√°")
                    
                    # Generar nuevas ideas usando contexto h√≠brido actualizado
                    nuevo_prompt = input("\nüìù Ingrese un nuevo prompt para generar diferentes ideas: ")
                    print("\nüß† Generando nuevas ideas...")
                    ideas = self.coordinador.generar_ideas_actividades_hibrido(nuevo_prompt, self.contexto_hibrido)
                    
                    print("\nüí° NUEVAS IDEAS GENERADAS:")
                    for i, idea in enumerate(ideas, 1):
                        print(f"\n{i}. {idea.get('titulo', 'Sin t√≠tulo')}")
                        print(f"   Descripci√≥n: {idea.get('descripcion', 'No disponible')}")
                        print(f"   Nivel: {idea.get('nivel', 'No especificado')}")
                        print(f"   Duraci√≥n: {idea.get('duracion', 'No especificada')}")
                    # Reiniciamos la selecci√≥n
                    actividad_seleccionada = None
                    continue
                
                elif seleccion == -1 and actividad_seleccionada:
                    # L√≥gica para a√±adir detalles, solo si ya hay una actividad seleccionada
                    detalle_extra = input(f"\nüìù ¬øDesea a√±adir detalles espec√≠ficos sobre '{actividad_seleccionada.get('titulo', 'la actividad')}'? (Enter para continuar, o escriba detalles): ")
                    
                    if detalle_extra.strip():
                        self.coordinador.historial_prompts.append({
                            "tipo": "detalles_actividad_seleccionada",
                            "actividad_id": actividad_seleccionada.get('id'),
                            "actividad_titulo": actividad_seleccionada.get('titulo'),
                            "detalles_adicionales": detalle_extra,
                            "timestamp": datetime.now().isoformat()
                        })
                        print(f"‚úÖ Detalles adicionales registrados para la actividad")
                    
                    # Salimos del bucle para continuar con el flujo principal
                    break
                        
                elif 1 <= seleccion <= len(ideas):
                    # Seleccionamos una actividad y la guardamos
                    actividad_seleccionada = ideas[seleccion - 1]
                    print(f"‚úÖ Ha seleccionado la actividad: {actividad_seleccionada.get('titulo', 'Sin t√≠tulo')}")
                    
                    # Preguntar si quiere a√±adir detalles despu√©s de la selecci√≥n
                    detalle_extra = input(f"\nüìù ¬øDesea a√±adir detalles espec√≠ficos sobre '{actividad_seleccionada.get('titulo', 'la actividad')}' antes de continuar? (Enter para continuar, o escriba detalles): ")
                    
                    if detalle_extra.strip():
                        self.coordinador.historial_prompts.append({
                            "tipo": "detalles_actividad_seleccionada",
                            "actividad_id": actividad_seleccionada.get('id'),
                            "actividad_titulo": actividad_seleccionada.get('titulo'),
                            "detalles_adicionales": detalle_extra,
                            "timestamp": datetime.now().isoformat()
                        })
                        print(f"‚úÖ Detalles adicionales registrados para la actividad")
                    
                    break
                    
                else:
                    print(f"‚ùå Selecci√≥n inv√°lida. Opciones disponibles:")
                    print(f"   ‚Ä¢ N√∫meros 1-{len(ideas)}: Seleccionar idea")
                    print(f"   ‚Ä¢ M: Matizar/perfilar una idea")
                    print(f"   ‚Ä¢ 0: Generar nuevas ideas")
                    if actividad_seleccionada:
                        print(f"   ‚Ä¢ -1: A√±adir detalles")
                    
            except ValueError:
                print("‚ùå Entrada inv√°lida. Use n√∫meros (1-{}, 0) o 'M' para matizar".format(len(ideas)))
        
        # PASO 4: Informaci√≥n adicional (opcional)
        info_adicional = input("\nüìã ¬øInformaci√≥n adicional espec√≠fica? (Enter para continuar): ")
        
        # PASO 5: Coordinar proceso
        print("\nüéØ Coordinando proyecto...")
        proyecto_base = self.coordinador.coordinar_proceso(actividad_seleccionada, info_adicional)
        
        # PASO 6: Analizar tareas
        print("\nüîç Analizando y descomponiendo tareas...")
        tareas = self.analizador_tareas.descomponer_actividad(proyecto_base)
        
        # PASO 7: Perfilar estudiantes
        print("\nüë• Analizando perfiles de estudiantes...")
        analisis_estudiantes = self.perfilador.analizar_perfiles(tareas)
        
        # PASO 8: Optimizando asignaciones
        print("\n‚öñÔ∏è Optimizando asignaciones...")
        asignaciones = self.optimizador.optimizar_asignaciones(tareas, analisis_estudiantes, self.perfilador)
        
        # PASO 9: Generar recursos
        print("\nüìö Generando recursos necesarios...")
        recursos = self.generador_recursos.generar_recursos(proyecto_base, tareas, asignaciones)
        
        # PASO 10: Crear proyecto final
        proyecto_final = self._crear_proyecto_final(proyecto_base, tareas, asignaciones, recursos)
        
        # PASO 11: Validaci√≥n
        self._ejecutar_validacion(proyecto_final)
        
        return proyecto_final
    
    def _crear_proyecto_final(self, proyecto_base: Dict, tareas: List[Tarea], 
                            asignaciones: Dict, recursos: Dict) -> Dict:
        """Crea la estructura final del proyecto"""
        
        # Organizar tareas por fases
        fases = self._organizar_fases(tareas)
        
        # Crear estructura final
        proyecto_final = {
            "proyecto": {
                "titulo": proyecto_base["titulo"],
                "descripcion": proyecto_base["descripcion"],
                "duracion": proyecto_base["duracion_base"],
                "competencias_objetivo": proyecto_base["competencias_base"],
                # Correcci√≥n: Acceder a la clave 'recursos_materiales' de manera segura
                "recursos_materiales": len(recursos.get('recursos_materiales', [])) if recursos and isinstance(recursos, dict) else 0
            },
            "fases": fases,
            # Correcci√≥n: Las asignaciones ya vienen como un dict, no una lista
            "asignaciones": asignaciones,
            "recursos": recursos,
            "evaluacion": {
                "criterios": ["Calidad del trabajo", "Colaboraci√≥n", "Creatividad", "Competencias espec√≠ficas"],
                "instrumentos": ["R√∫brica", "Autoevaluaci√≥n", "Evaluaci√≥n por pares", "Portfolio digital"]
            },
            "metadatos": {
                "timestamp": datetime.now().isoformat(),
                "sistema": "AgentesABP_v2.0_ContextoAcumulativo",
                "historial_prompts": self.coordinador.historial_prompts,
                "contexto_hibrido": self.contexto_hibrido.get_resumen_sesion(),
                "validado": self.validado
            }
        }
        
        self.proyecto_actual = proyecto_final
        return proyecto_final
    
    def _organizar_fases(self, tareas: List[Tarea]) -> List[Dict]:
        """Organiza las tareas en fases del proyecto"""
        fases = [
            {
                "nombre": "Fase 1: Investigaci√≥n y Planificaci√≥n",
                "duracion": "3-4 d√≠as",
                # Correcci√≥n: Acceder a t.id
                "tareas": [t.id for t in tareas if "investigar" in t.descripcion.lower() or "planificar" in t.descripcion.lower()]
            },
            {
                "nombre": "Fase 2: Desarrollo y Creaci√≥n",
                "duracion": "5-6 d√≠as", 
                # Correcci√≥n: Acceder a t.tipo
                "tareas": [t.id for t in tareas if t.tipo in ["colaborativa", "creativa"]]
            },
            {
                "nombre": "Fase 3: Presentaci√≥n y Evaluaci√≥n",
                "duracion": "2-3 d√≠as",
                # Correcci√≥n: Acceder a t.id
                "tareas": [t.id for t in tareas if "presentar" in t.descripcion.lower() or "evaluar" in t.descripcion.lower()]
            }
        ]
        
        # Asegurar que todas las tareas est√©n asignadas a alguna fase
        tareas_asignadas = set()
        for fase in fases:
            tareas_asignadas.update(fase["tareas"])
        
        # Asignar tareas restantes a la fase de desarrollo
        for tarea in tareas:
            if tarea.id not in tareas_asignadas:
                fases[1]["tareas"].append(tarea.id)
        
        return fases
    
    def _ejecutar_validacion(self, proyecto: Dict) -> bool:
        """Ejecuta el proceso de validaci√≥n con posible iteraci√≥n"""
        
        print("\n‚úÖ VALIDACI√ìN DEL PROYECTO")
        print("-" * 40)
        
        # Mostrar resumen del proyecto
        self._mostrar_resumen_proyecto(proyecto)
        
        while not self.validado:
            validacion = input("\nüîç ¬øValida el proyecto? (s/n): ").lower().strip()
            
            if validacion == 's':
                self.validado = True
                proyecto["metadatos"]["validado"] = True
                print("‚úÖ Proyecto validado correctamente")
                
                # Guardar proyecto
                self._guardar_proyecto(proyecto)
                break
                
            elif validacion == 'n':
                print("\nüîÑ Proceso de iteraci√≥n iniciado")
                cambios_solicitados = input("üìù ¬øQu√© cambios espec√≠ficos desea realizar?: ")
                
                # Guardar feedback para iteraci√≥n
                self.coordinador.historial_prompts.append({
                    "tipo": "feedback_iteracion",
                    "contenido": cambios_solicitados,
                    "timestamp": datetime.now().isoformat()
                })
                
                # Aqu√≠ se implementar√≠a la l√≥gica de iteraci√≥n
                print("üîÑ Aplicando cambios solicitados...")
                # Por simplicidad, se muestra el mensaje y se vuelve a validar
                
            else:
                print("‚ùå Respuesta inv√°lida. Use 's' para s√≠ o 'n' para no")
        
        return self.validado
    
    def _mostrar_resumen_proyecto(self, proyecto: Dict):
        """Muestra un resumen del proyecto para validaci√≥n"""
        print(f"\nüìã RESUMEN DEL PROYECTO:")
        print(f"   T√≠tulo: {proyecto['proyecto']['titulo']}")
        print(f"   Duraci√≥n: {proyecto['proyecto']['duracion']}")
        competencias_texto = ', '.join(proyecto['proyecto']['competencias_objetivo'])
        if len(competencias_texto) > 100:
            competencias_texto = competencias_texto[:100] + "..."
        print(f"   Competencias: {competencias_texto}")
        print(f"   N√∫mero de fases: {len(proyecto['fases'])}")
        print(f"   Estudiantes asignados: {len(proyecto['asignaciones'])}")
        print(f"   Recursos materiales: {len(proyecto['recursos'].get('materiales_fisicos', []))}")
    
    def _guardar_proyecto(self, proyecto: Dict):
        """Guarda el proyecto en un archivo JSON"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        nombre_archivo = f"proyecto_abp_{timestamp}.json"
        
        try:
            with open(nombre_archivo, 'w', encoding='utf-8') as f:
                json.dump(proyecto, f, indent=2, ensure_ascii=False)
            
            logger.info(f"üíæ Proyecto guardado en: {nombre_archivo}")
            print(f"üíæ Proyecto guardado en: {nombre_archivo}")
            
        except Exception as e:
            logger.error(f"‚ùå Error guardando proyecto: {e}")
            print(f"‚ùå Error guardando proyecto: {e}")

# ===== FUNCI√ìN PRINCIPAL =====

def main():
    """Funci√≥n principal del sistema"""
    try:
        # Inicializar sistema (configurar host de Ollama seg√∫n tu setup)
        sistema = SistemaAgentesABP(host_ollama="192.168.1.10", model="llama3.2")
        
        # Ejecutar flujo completo
        proyecto = sistema.ejecutar_flujo_completo()
        
        print("\nüéâ PROCESO COMPLETADO")
        print("=" * 40)
        
        if sistema.validado:
            print("‚úÖ Proyecto validado y guardado exitosamente")
        else:
            print("‚ö†Ô∏è Proyecto creado pero no validado")
            
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Proceso interrumpido por el usuario")
    except Exception as e:
        logger.error(f"‚ùå Error en el sistema: {e}")
        print(f"‚ùå Error en el sistema: {e}")

if __name__ == "__main__":
    main()