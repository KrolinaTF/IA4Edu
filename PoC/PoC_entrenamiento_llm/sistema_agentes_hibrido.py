#!/usr/bin/env python3
"""
Sistema de Agentes CrewAI H√çBRIDO - Validaci√≥n + Proceso Secuencial
Combina sistema v2 (funcional) + validaci√≥n mejorada sin problemas jer√°rquicos
"""

import json
import os
from datetime import datetime
from typing import Dict, List, Optional
from dataclasses import dataclass
import logging

# Configurar variables de entorno para LiteLLM/CrewAI (192.168.1.10)
os.environ["OLLAMA_BASE_URL"] = "http://192.168.1.10:11434"
os.environ["OLLAMA_HOST"] = "http://192.168.1.10:11434"
os.environ["OLLAMA_API_BASE"] = "http://192.168.1.10:11434"
os.environ["LITELLM_LOG"] = "DEBUG"

# Configuraci√≥n para forzar Ollama sin LiteLLM
os.environ["OPENAI_API_KEY"] = "not-needed"
os.environ["OPENAI_MODEL_NAME"] = "qwen3:latest"
os.environ["CREWAI_DISABLE_TELEMETRY"] = "true"
os.environ["HTTPX_TIMEOUT"] = "120"

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("CREWAI_HIBRIDO")

try:
    from crewai import Agent, Task, Crew, Process
    from crewai_tools import FileReadTool, DirectoryReadTool
    
    from langchain_community.llms import Ollama
    logger.info("‚úÖ Usando langchain-community.llms.Ollama (compatible con CrewAI)")
        
    from langchain.callbacks.manager import CallbackManagerForLLMRun
    from langchain.llms.base import LLM
    from typing import Any, List, Mapping
except ImportError as e:
    logger.error(f"‚ùå Error de importaci√≥n: {e}")
    logger.error("üí° Instala dependencias: pip install crewai crewai-tools langchain-community")
    raise ImportError("Dependencias no est√°n disponibles")

from ollama_api_integrator import OllamaAPIEducationGenerator
from prompt_template import PromptTemplateGenerator, TEMAS_MATEMATICAS_4_PRIMARIA, TEMAS_LENGUA_4_PRIMARIA, TEMAS_CIENCIAS_4_PRIMARIA


@dataclass
class ActividadEducativa:
    """Estructura de datos para una actividad educativa"""
    id: str
    titulo: str
    materia: str
    tema: str
    contenido: str
    estudiantes_objetivo: List[str]
    tipo: str
    adaptaciones: List[str]
    metadatos: Dict
    timestamp: str


class SistemaAgentesHibrido:
    """Sistema h√≠brido: v2 funcional + validaci√≥n mejorada + proceso secuencial"""
    
    def __init__(self, 
                 ollama_host: str = "192.168.1.10", 
                 perfiles_model: str = "qwen3:latest",
                 disenador_model: str = "qwen3:latest", 
                 ambiente_model: str = "qwen2:latest",
                 evaluador_model: str = "mistral:latest",
                 perfiles_path: str = "perfiles_4_primaria.json"):
        """
        Inicializa el sistema h√≠brido
        """
        self.ollama_host = ollama_host
        self.perfiles_model = perfiles_model
        self.disenador_model = disenador_model
        self.ambiente_model = ambiente_model
        self.evaluador_model = evaluador_model
        self.perfiles_path = perfiles_path
        
        # Crear LLMs espec√≠ficos para cada agente (igual que v2 funcional)
        logger.info("üîß Configurando LLMs espec√≠ficos...")
        
        try:
            import litellm
            
            modelos_unicos = set([self.ambiente_model, self.disenador_model, self.perfiles_model, self.evaluador_model])
            for modelo in modelos_unicos:
                litellm.model_cost[f"ollama/{modelo}"] = {
                    "input_cost_per_token": 0,
                    "output_cost_per_token": 0,
                    "max_tokens": 4096
                }
            
            os.environ["OLLAMA_API_BASE"] = f"http://{ollama_host}:11434"
            os.environ["OLLAMA_BASE_URL"] = f"http://{ollama_host}:11434"
            
            self.perfiles_llm = Ollama(
                model=f"ollama/{self.perfiles_model}",
                base_url=f"http://{ollama_host}:11434"
            )
            
            self.disenador_llm = Ollama(
                model=f"ollama/{self.disenador_model}",
                base_url=f"http://{ollama_host}:11434"
            )
            
            self.ambiente_llm = Ollama(
                model=f"ollama/{self.ambiente_model}",
                base_url=f"http://{ollama_host}:11434"
            )
            
            self.evaluador_llm = Ollama(
                model=f"ollama/{self.evaluador_model}",
                base_url=f"http://{ollama_host}:11434"
            )
            
            logger.info(f"‚úÖ LLMs configurados exitosamente")
            
        except Exception as e:
            logger.error(f"‚ùå Error configurando LLMs: {e}")
            raise e
        
        # Cargar perfiles
        self.perfiles_data = self._cargar_perfiles(perfiles_path)
        
        # Crear agentes h√≠bridos
        self._crear_agentes_hibridos()
        
        logger.info(f"‚úÖ Sistema h√≠brido inicializado")
    
    def _cargar_perfiles(self, perfiles_path: str) -> List[Dict]:
        """Cargar perfiles de estudiantes desde archivo JSON"""
        try:
            if not os.path.isabs(perfiles_path):
                script_dir = os.path.dirname(os.path.abspath(__file__))
                perfiles_path = os.path.join(script_dir, perfiles_path)
            
            with open(perfiles_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return data.get('estudiantes', [])
        except Exception as e:
            logger.error(f"Error cargando perfiles: {e}")
            return self._crear_perfiles_default()
    
    def _crear_perfiles_default(self) -> List[Dict]:
        """Crea perfiles por defecto si no se pueden cargar"""
        return [
            {"id": "001", "nombre": "ALEX M.", "temperamento": "reflexivo", "canal_preferido": "visual", "diagnostico_formal": "ninguno", "ci_base": 102},
            {"id": "002", "nombre": "MAR√çA L.", "temperamento": "reflexivo", "canal_preferido": "auditivo", "diagnostico_formal": "ninguno"},
            {"id": "003", "nombre": "ELENA R.", "temperamento": "reflexivo", "canal_preferido": "visual", "diagnostico_formal": "TEA_nivel_1", "ci_base": 118},
            {"id": "004", "nombre": "LUIS T.", "temperamento": "impulsivo", "canal_preferido": "kinest√©sico", "diagnostico_formal": "TDAH_combinado", "ci_base": 102},
            {"id": "005", "nombre": "ANA V.", "temperamento": "reflexivo", "canal_preferido": "auditivo", "diagnostico_formal": "altas_capacidades", "ci_base": 141},
            {"id": "006", "nombre": "SARA M.", "temperamento": "equilibrado", "canal_preferido": "auditivo", "diagnostico_formal": "ninguno", "ci_base": 115},
            {"id": "007", "nombre": "EMMA K.", "temperamento": "reflexivo", "canal_preferido": "visual", "diagnostico_formal": "ninguno", "ci_base": 132},
            {"id": "008", "nombre": "HUGO P.", "temperamento": "equilibrado", "canal_preferido": "visual", "diagnostico_formal": "ninguno", "ci_base": 114}
        ]
    
    def _crear_agentes_hibridos(self):
        """Crea agentes h√≠bridos mejorados con validaci√≥n incorporada"""
        
        # AGENTE 1: DISE√ëADOR DE AMBIENTE (Con validaci√≥n incorporada)
        self.agente_ambiente = Agent(
            role="Dise√±ador de Ambiente Validado",
            goal="Proponer actividades coherentes tipo 'Supermercado de N√∫meros' validando coherencia narrativa",
            backstory="""Especialista en ambientes educativos con EXPERIENCIA EN VALIDACI√ìN.

ANTES de proponer cualquier actividad, VALIDAS:
1. ¬øEs coherente la narrativa? (no mezclar supermercado + c√©lulas sin l√≥gica)
2. ¬øUsas solo los 8 estudiantes reales?: ALEX M., MAR√çA L., ELENA R., LUIS T., ANA V., SARA M., EMMA K., HUGO P.
3. ¬øLa actividad tiene sentido educativo para 4¬∫ Primaria?

Solo propones actividades como 'Supermercado de N√∫meros', 'Laboratorio de C√©lulas', 'Banco de Palabras' que sean:
- Narrativamente coherentes
- Con roles que conecten l√≥gicamente
- Para exactamente 8 estudiantes espec√≠ficos

Si detectas incoherencia durante tu dise√±o, la corriges ANTES de presentar la propuesta.
Respondes siempre en espa√±ol.""",
            tools=[],
            llm=self.ambiente_llm,
            verbose=True,
            allow_delegation=False
        )
        
        # AGENTE 2: DISE√ëADOR ESTRUCTURAL (Con validaci√≥n incorporada)
        self.agente_disenador = Agent(
            role="Dise√±ador Estructural Validado",
            goal="Desarrollar estructuras operativas validando viabilidad en aula real",
            backstory="""Docente experto con EXPERIENCIA EN AULAS REALES.

MIENTRAS desarrollas la estructura, VALIDAS continuamente:
1. ¬øLos materiales son realistas para un aula normal? (no 30 computadoras)
2. ¬øLa duraci√≥n es apropiada? (1-1.5 horas m√°ximo)
3. ¬øEl espacio es realizable? (no "naves espaciales")
4. ¬øLos roles funcionan simult√°neamente para 8 estudiantes?

Te basas en actividades exitosas conocidas y ajustas todo para que sea:
- Realizable en aula est√°ndar
- Con materiales disponibles
- Operativamente funcional
- Para exactamente 8 estudiantes

Si algo no es viable durante tu dise√±o, lo modificas para que s√≠ lo sea.
Respondes siempre en espa√±ol.""",
            tools=[],
            llm=self.disenador_llm,
            verbose=True,
            allow_delegation=False
        )
        
        # AGENTE 3: ESPECIALISTA EN CONTROL (Con validaci√≥n matem√°tica incorporada)
        self.agente_desglosador = Agent(
            role="Especialista en Control Matem√°tico Validado",
            goal="Crear sistemas de control validando que todos los c√°lculos sean exactos para 8 estudiantes",
            backstory="""Especialista en matem√°ticas educativas con OBSESI√ìN POR LA EXACTITUD.

DURANTE todo tu trabajo, VALIDAS:
1. ¬øTodos los c√°lculos son para 8 estudiantes? (NUNCA 30)
2. ¬øLos presupuestos son realistas? (no $3000 para actividad escolar)
3. ¬øLas operaciones cuadran matem√°ticamente?
4. ¬øLas adaptaciones son espec√≠ficas para cada diagn√≥stico?

Creas:
- C√°lculos exactos y verificables
- Diferenciaci√≥n real por estudiante
- Recursos pedag√≥gicos apropiados
- Sistemas que funcionan matem√°ticamente

Si encuentras un error matem√°tico durante tu trabajo, lo corriges inmediatamente.
Solo presentas sistemas que cuadran perfectamente.
Respondes siempre en espa√±ol.""",
            tools=[],
            llm=self.perfiles_llm,
            verbose=True,
            allow_delegation=False
        )
        
        # AGENTE 4: ASIGNADOR PERSONALIZADO (Con validaci√≥n de estudiantes incorporada)
        self.agente_asignador = Agent(
            role="Asignador de Roles Validado",
            goal="Asignar roles espec√≠ficos validando que solo se usen los 8 estudiantes reales",
            backstory="""Psicopedagogo que CONOCE PERFECTAMENTE a los 8 estudiantes del aula.

DURANTE cada asignaci√≥n, VALIDAS ESTRICTAMENTE:
1. ¬øSolo usas estos nombres?: ALEX M., MAR√çA L., ELENA R., LUIS T., ANA V., SARA M., EMMA K., HUGO P.
2. ¬øNUNCA usas estos nombres falsos?: CAROLINA G., LUIS A., JUAN P., SARA G. (NO EXISTEN)
3. ¬øCada estudiante tiene rol espec√≠fico y adaptaciones apropiadas?
4. ¬øLas asignaciones consideran TEA (Elena), TDAH (Luis), altas capacidades (Ana)?

Solo asignas roles a estudiantes que EXISTEN realmente en el aula.
Si durante tu trabajo usas un nombre incorrecto, lo corriges inmediatamente.
Cada estudiante real debe tener funci√≥n clara, adaptaciones espec√≠ficas y ejemplos concretos.
Respondes siempre en espa√±ol.""",
            tools=[],
            llm=self.evaluador_llm,
            verbose=True,
            allow_delegation=False
        )
        
        # AGENTE 5: VALIDADOR FINAL (Nuevo agente secuencial)
        self.agente_validador = Agent(
            role="Validador Final y Control de Calidad",
            goal="Revisar la actividad completa y asegurar que cumple todos los criterios de calidad educativa",
            backstory="""Supervisor educativo senior con 25 a√±os de experiencia en 4¬∫ Primaria.

Realizas la VALIDACI√ìN FINAL verificando:

1. COHERENCIA NARRATIVA TOTAL:
   - ¬øLa actividad tiene sentido completo?
   - ¬øNo hay conceptos mezclados sin l√≥gica?
   - ¬øLos roles conectan con la narrativa?

2. ESTUDIANTES CORRECTOS:
   - ¬øSolo aparecen los 8 nombres reales?: ALEX M., MAR√çA L., ELENA R., LUIS T., ANA V., SARA M., EMMA K., HUGO P.
   - ¬øNo aparecen nombres falsos?: CAROLINA G., LUIS A., JUAN P., SARA G.
   - ¬øTodos tienen roles espec√≠ficos?

3. MATEM√ÅTICA EXACTA:
   - ¬øTodo calculado para 8 estudiantes, no 30?
   - ¬øPresupuestos realistas?
   - ¬øOperaciones que cuadran?

4. VIABILIDAD PR√ÅCTICA:
   - ¬øMateriales disponibles en aula normal?
   - ¬øDuraci√≥n apropiada (1-1.5 horas)?
   - ¬øEspacios realistas?

Si encuentras errores, los identificas espec√≠ficamente y sugieres correcciones concretas.
Solo apruebas actividades PERFECTAMENTE coherentes y realizables.
Respondes siempre en espa√±ol.""",
            tools=[],
            llm=self.evaluador_llm,
            verbose=True,
            allow_delegation=False
        )
        
        logger.info("‚úÖ Agentes h√≠bridos creados (4 especialistas + 1 validador final)")
    
    def generar_actividad_hibrida(self, materia: str, tema: str = None) -> ActividadEducativa:
        """Genera actividad usando proceso secuencial con validaci√≥n incorporada"""
        
        logger.info(f"üîÑ Generando actividad h√≠brida para {materia}")
        
        try:
            # EJEMPLO DE REFERENCIA (del k_sonnet_supermercado.txt)
            ejemplo_exitoso = """
EJEMPLO DE ACTIVIDAD EXITOSA - SUPERMERCADO DE N√öMEROS:

ACTIVIDAD: Supermercado de N√∫meros
OBJETIVO_PRINCIPAL: Trabajar matem√°ticas aplicadas con dinero real y fracciones
DURACI√ìN: 1-1.5 horas (termina cuando todos completan sus listas)
PARTICIPANTES: Exactamente 8 estudiantes espec√≠ficos

TIENDAS Y CAJEROS:
- TIENDA 1 "MATERIAL ESCOLAR" (Cajero: ALEX M.)
  Productos: Mochila 25‚Ç¨, Estuche 12‚Ç¨, Diccionario 18‚Ç¨, Set rotuladores 9‚Ç¨, Agenda 15‚Ç¨, Comp√°s 11‚Ç¨

- TIENDA 2 "SOUVENIRS DE VIAJE" (Cajero: ELENA R. - adaptaciones: cascos disponibles)  
  Productos: Camiseta 16‚Ç¨, Llavero 7‚Ç¨, Im√°n nevera 4‚Ç¨, Gorra 13‚Ç¨, Postal 2‚Ç¨, Taza 8‚Ç¨

- TIENDA 3 "HOBBIES Y TIEMPO LIBRE" (Cajero: EMMA K.)
  Productos: Libro 14‚Ç¨, Juego mesa 22‚Ç¨, Pelota 10‚Ç¨, Puzzle 17‚Ç¨, Cartas 6‚Ç¨, Kit manualidades 19‚Ç¨

CLIENTES CON LISTAS EXACTAS:
- SARA M.: mochila (25‚Ç¨), llavero (7‚Ç¨), libro (14‚Ç¨), gorra (13‚Ç¨) = 59‚Ç¨ total
- LUIS T.: estuche (12‚Ç¨), kit manualidades (19‚Ç¨), puzzle (17‚Ç¨), postal (2‚Ç¨) = 50‚Ç¨ total  
- MAR√çA L.: diccionario (18‚Ç¨), im√°n nevera (4‚Ç¨), taza (8‚Ç¨), pelota (10‚Ç¨) = 40‚Ç¨ total
- HUGO P.: camiseta (16‚Ç¨), juego mesa (22‚Ç¨), cartas (6‚Ç¨), set rotuladores (9‚Ç¨) = 53‚Ç¨ total

SUPERVISOR: ANA V. (altas capacidades) - verifica c√°lculos, ayuda con cambios complejos

CONTROL MATEM√ÅTICO EXACTO:
- 3 cajeros empiezan con 30‚Ç¨ cada uno = 90‚Ç¨ total cambio inicial
- 4 clientes + 1 supervisor empiezan con: 59‚Ç¨ + 50‚Ç¨ + 40‚Ç¨ + 53‚Ç¨ + presupuesto supervisor = total
- VERIFICACI√ìN FINAL: Todo el dinero debe cuadrar exactamente

Esta actividad es COHERENTE, REALISTA y funciona perfectamente en aula.
            """
            
            # Crear tareas secuenciales con validaci√≥n incorporada
            tarea_ambiente = Task(
                description=f"""Dise√±a una ACTIVIDAD COMPLETA para {materia} {f'sobre {tema}' if tema else ''} siguiendo el modelo exitoso.

ESTUDIANTES REALES (exactamente estos 8, no otros):
- 001 ALEX M.: reflexivo, visual, ninguno, CI 102
- 002 MAR√çA L.: reflexivo, auditivo, ninguno
- 003 ELENA R.: reflexivo, visual, TEA_nivel_1, CI 118 (necesita cascos, protocolo visual)
- 004 LUIS T.: impulsivo, kinest√©sico, TDAH_combinado, CI 102 (necesita movimiento)
- 005 ANA V.: reflexivo, auditivo, altas_capacidades, CI 141 (puede asumir m√°s complejidad)
- 006 SARA M.: equilibrado, auditivo, ninguno, CI 115
- 007 EMMA K.: reflexivo, visual, ninguno, CI 132
- 008 HUGO P.: equilibrado, visual, ninguno, CI 114

REFERENCIA DE ACTIVIDAD EXITOSA:
{ejemplo_exitoso}

ANTES de proponer, VALIDA INTERNAMENTE:
‚úì ¬øEs coherente la narrativa para {materia}?
‚úì ¬øSolo uso los 8 nombres reales listados arriba?
‚úì ¬øLos roles conectan l√≥gicamente con la materia?
‚úì ¬øEs similar en calidad al Supermercado de N√∫meros?

FORMATO OBLIGATORIO:
ACTIVIDAD: [Nombre atractivo coherente]
OBJETIVO_PRINCIPAL: [Qu√© se aprende espec√≠ficamente en {materia}]
DURACI√ìN: [1-1.5 horas]
NARRATIVA: [Historia/contexto COHERENTE para {materia}]
INSTALACIONES: [C√≥mo se organiza el aula espec√≠ficamente]
ROLES_NECESARIOS: [3-4 roles que funcionen simult√°neamente]

Solo prop√≥n si pasa tu validaci√≥n interna.""",
                agent=self.agente_ambiente,
                expected_output="Propuesta de actividad validada internamente por coherencia y estudiantes correctos"
            )
            
            tarea_estructura = Task(
                description="""Desarrolla COMPLETAMENTE la actividad con VALIDACI√ìN INTERNA de viabilidad.

DURANTE tu desarrollo, VALIDA continuamente:
‚úì ¬øLos materiales son realistas para aula normal?
‚úì ¬øLa duraci√≥n es apropiada (1-1.5 horas)?
‚úì ¬øEl espacio es realizable en aula est√°ndar?
‚úì ¬øLos 8 estudiantes pueden trabajar simult√°neamente?

DESARROLLA OBLIGATORIAMENTE:

=== CONTEXTO PEDAG√ìGICO ===
- Competencias curriculares espec√≠ficas
- Nivel de complejidad para 4¬∫ Primaria
- Materiales REALISTAS disponibles en aula normal

=== ESTRUCTURA DE ROLES ===
Para cada rol especifica:
- Funci√≥n exacta durante toda la actividad
- Responsabilidades espec√≠ficas
- Competencias que desarrolla
- Interacciones con otros roles
- Preparaci√≥n necesaria antes de empezar
- Entrega final/reporte

=== FUNCIONAMIENTO OPERATIVO ===
- Preparaci√≥n inicial (10-15 min) - paso a paso
- Desarrollo principal (1 hora) - fase por fase
- Cierre y verificaci√≥n (15 min) - c√≥mo termina
- Criterio claro de finalizaci√≥n
- Control de calidad continuo

=== MATERIALES ESPEC√çFICOS ===
- Lista exhaustiva de materiales REALISTAS
- Organizaci√≥n del espacio en aula normal
- Recursos espec√≠ficos por rol
- Todo disponible en colegio t√≠pico

Solo presenta si pasa tu validaci√≥n interna de viabilidad.""",
                agent=self.agente_disenador,
                context=[tarea_ambiente],
                expected_output="Estructura operativa completa validada internamente por viabilidad pr√°ctica"
            )
            
            tarea_control = Task(
                description="""Crea el SISTEMA DE CONTROL MATEM√ÅTICO validando exactitud para 8 estudiantes.

DURANTE todo tu trabajo, VALIDA internamente:
‚úì ¬øTodos los c√°lculos son para exactamente 8 estudiantes (no 30)?
‚úì ¬øLos presupuestos son realistas (no miles de euros)?
‚úì ¬øLas operaciones cuadran matem√°ticamente?
‚úì ¬øLas adaptaciones son espec√≠ficas por diagn√≥stico?

DESARROLLA OBLIGATORIAMENTE:

=== C√ÅLCULOS EXACTOS ===
- Si hay dinero: presupuestos exactos para 8 estudiantes
- Si hay medidas: cantidades precisas y realistas
- Si hay problemas: ejercicios graduados por dificultad individual
- Verificaci√≥n final matem√°tica (todo debe cuadrar)

=== DIFERENCIACI√ìN CONTROLADA ===
- Adaptaci√≥n espec√≠fica por estudiante:
  * ELENA R. (TEA): cascos, protocolo visual, pausas
  * LUIS T. (TDAH): movimiento, tareas fraccionadas
  * ANA V. (altas capacidades): retos adicionales
- Complejidad graduada seg√∫n CI y capacidades
- Materiales de apoyo espec√≠ficos disponibles
- Recursos de autorregulaci√≥n (cascos, plastilina, etc.)

=== GESTI√ìN DOCENTE ===
- Rol espec√≠fico del profesor durante cada fase
- Momentos exactos de intervenci√≥n individual
- Supervisi√≥n general realista y factible
- Registro de observaciones concreto
- Apoyo espec√≠fico por necesidades especiales

Todo calculado exactamente para 8 estudiantes reales.
Solo presenta si pasa tu validaci√≥n matem√°tica interna.""",
                agent=self.agente_desglosador,
                context=[tarea_estructura],
                expected_output="Sistema de control matem√°tico exacto validado internamente para 8 estudiantes"
            )
            
            tarea_asignacion = Task(
                description="""Asigna ROL ESPEC√çFICO a cada estudiante VALIDANDO nombres constantemente.

ESTUDIANTES REALES (solo estos, NUNCA otros):
- 001 ALEX M.: reflexivo, visual, ninguno, CI 102
- 002 MAR√çA L.: reflexivo, auditivo, ninguno
- 003 ELENA R.: reflexivo, visual, TEA_nivel_1, CI 118 (cascos, protocolo visual)
- 004 LUIS T.: impulsivo, kinest√©sico, TDAH_combinado, CI 102 (movimiento)
- 005 ANA V.: reflexivo, auditivo, altas_capacidades, CI 141 (reto mayor)
- 006 SARA M.: equilibrado, auditivo, ninguno, CI 115
- 007 EMMA K.: reflexivo, visual, ninguno, CI 132
- 008 HUGO P.: equilibrado, visual, ninguno, CI 114

NOMBRES PROHIBIDOS (NO EXISTEN): CAROLINA G., LUIS A., JUAN P., SARA G.

DURANTE cada asignaci√≥n, VALIDA internamente:
‚úì ¬øSolo uso los 8 nombres listados arriba?
‚úì ¬øNo uso ning√∫n nombre prohibido?
‚úì ¬øCada estudiante tiene funci√≥n clara?
‚úì ¬øLas adaptaciones son apropiadas para cada diagn√≥stico?

FORMATO OBLIGATORIO para cada estudiante:
**NOMBRE EXACTO DE LA LISTA**: ROL ASIGNADO
- Funci√≥n espec√≠fica: [qu√© hace durante toda la actividad]
- Adaptaciones: [apoyos espec√≠ficos seg√∫n diagn√≥stico]
- Complejidad: [nivel asignado seg√∫n CI y capacidades]
- Interacciones: [con qui√©n trabaja principalmente]
- Ejemplo concreto: [qu√© hace exactamente con detalles]

EJEMPLO CORRECTO:
**ELENA R.**: CAJERO Tienda 2
- Funci√≥n espec√≠fica: Cobrar productos, dar cambio, atender clientes
- Adaptaciones: Cascos disponibles, protocolo visual, pausas permitidas
- Complejidad: Precios enteros simples, operaciones b√°sicas
- Interacciones: Clientes individuales, supervisor para consultas
- Ejemplo concreto: Maneja Camiseta 16‚Ç¨, Llavero 7‚Ç¨, da cambio de 3‚Ç¨ a cliente con 10‚Ç¨

Solo presenta si todos los nombres pasan tu validaci√≥n interna.""",
                agent=self.agente_asignador,
                context=[tarea_control],
                expected_output="Asignaci√≥n espec√≠fica validada internamente con solo los 8 estudiantes reales"
            )
            
            tarea_validacion = Task(
                description="""Realiza VALIDACI√ìN FINAL EXHAUSTIVA de toda la actividad completa.

Revisa SISTEM√ÅTICAMENTE cada aspecto:

1. COHERENCIA NARRATIVA:
   ¬øLa actividad completa tiene sentido educativo?
   ¬øLos conceptos est√°n conectados l√≥gicamente?
   ¬øLos roles encajan con la narrativa?
   ¬øEs comparable en calidad al Supermercado de N√∫meros?

2. ESTUDIANTES CORRECTOS:
   ¬øSolo aparecen estos 8?: ALEX M., MAR√çA L., ELENA R., LUIS T., ANA V., SARA M., EMMA K., HUGO P.
   ¬øNO aparecen estos falsos?: CAROLINA G., LUIS A., JUAN P., SARA G.
   ¬øTodos tienen roles espec√≠ficos y significativos?

3. MATEM√ÅTICA EXACTA:
   ¬øTodo calculado para exactamente 8 estudiantes?
   ¬øPresupuestos realistas para actividad escolar?
   ¬øLas operaciones cuadran matem√°ticamente?

4. VIABILIDAD PR√ÅCTICA:
   ¬øMateriales disponibles en aula normal?
   ¬øDuraci√≥n apropiada (1-1.5 horas)?
   ¬øEspacios realistas en colegio t√≠pico?
   ¬øOperativamente funcional?

FORMATO DE RESPUESTA:
=== VALIDACI√ìN FINAL COMPLETA ===

COHERENCIA NARRATIVA: ‚úì APROBADA / ‚ùå ERRORES: [especificar errores]
ESTUDIANTES CORRECTOS: ‚úì APROBADA / ‚ùå ERRORES: [especificar errores]  
MATEM√ÅTICA EXACTA: ‚úì APROBADA / ‚ùå ERRORES: [especificar errores]
VIABILIDAD PR√ÅCTICA: ‚úì APROBADA / ‚ùå ERRORES: [especificar errores]

DICTAMEN FINAL: ‚úÖ ACTIVIDAD APROBADA / ‚ùå REQUIERE CORRECCI√ìN

Si hay errores, identifica espec√≠ficamente qu√© corregir.
Solo aprueba actividades PERFECTAMENTE coherentes y realizables.""",
                agent=self.agente_validador,
                context=[tarea_asignacion],
                expected_output="Validaci√≥n final exhaustiva con dictamen de aprobaci√≥n o correcciones espec√≠ficas"
            )
            
            # Crear crew SECUENCIAL (no jer√°rquico para evitar problemas de delegaci√≥n)
            crew = Crew(
                agents=[
                    self.agente_ambiente,
                    self.agente_disenador, 
                    self.agente_desglosador,
                    self.agente_asignador,
                    self.agente_validador
                ],
                tasks=[tarea_ambiente, tarea_estructura, tarea_control, tarea_asignacion, tarea_validacion],
                process=Process.sequential,  # SECUENCIAL (funciona sin problemas)
                verbose=True
            )
            
            logger.info("üöÄ Ejecutando proceso h√≠brido secuencial con validaci√≥n...")
            resultado = crew.kickoff()
            
            # Procesar resultados
            contenido_completo = self._procesar_resultados(resultado)
            
            return ActividadEducativa(
                id=f"hibrido_{materia.lower()}_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                titulo=f"Actividad H√≠brida Validada - {materia}",
                materia=materia,
                tema=tema or "tema general",
                contenido=contenido_completo,
                estudiantes_objetivo=["001", "002", "003", "004", "005", "006", "007", "008"],
                tipo="colaborativa_hibrida_validada",
                adaptaciones=["validacion_incorporada", "control_matematico_exacto", "coherencia_narrativa"],
                metadatos={
                    "total_estudiantes": 8,
                    "flujo_hibrido": ["ambiente_validado", "estructura_validada", "control_validado", "asignacion_validada", "validacion_final"],
                    "proceso": "secuencial_con_validacion_incorporada",
                    "modelos_usados": {
                        "ambiente": self.ambiente_model,
                        "disenador": self.disenador_model,
                        "desglosador": self.perfiles_model,
                        "asignador": self.evaluador_model,
                        "validador": self.evaluador_model
                    }
                },
                timestamp=datetime.now().isoformat()
            )
        
        except Exception as e:
            logger.error(f"Error en proceso h√≠brido: {e}")
            return ActividadEducativa(
                id=f"error_hibrido_{materia.lower()}_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                titulo=f"Error H√≠brido - {materia}",
                materia=materia,
                tema=tema or "tema general",
                contenido=f"Error en proceso h√≠brido: {e}",
                estudiantes_objetivo=[],
                tipo="error_hibrido",
                adaptaciones=[],
                metadatos={"error": str(e)},
                timestamp=datetime.now().isoformat()
            )
    
    def _procesar_resultados(self, resultado) -> str:
        """Procesa y estructura los resultados del crew h√≠brido"""
        contenido = ""
        
        try:
            if hasattr(resultado, 'tasks_output') and resultado.tasks_output:
                contenido += "=== DISE√ëO DE AMBIENTE VALIDADO ===\\n"
                contenido += str(resultado.tasks_output[0]) + "\\n\\n"
                
                contenido += "=== ESTRUCTURA OPERATIVA VALIDADA ===\\n"
                contenido += str(resultado.tasks_output[1]) + "\\n\\n"
                
                contenido += "=== SISTEMA DE CONTROL MATEM√ÅTICO VALIDADO ===\\n"
                contenido += str(resultado.tasks_output[2]) + "\\n\\n"
                
                contenido += "=== ASIGNACI√ìN PERSONALIZADA VALIDADA ===\\n"
                contenido += str(resultado.tasks_output[3]) + "\\n\\n"
                
                contenido += "=== VALIDACI√ìN FINAL EXHAUSTIVA ===\\n"
                contenido += str(resultado.tasks_output[4]) + "\\n\\n"
            else:
                contenido = str(resultado)
        except Exception as e:
            logger.warning(f"Error procesando resultados: {e}")
            contenido = str(resultado)
        
        return contenido
    
    def guardar_actividad(self, actividad: ActividadEducativa, output_dir: str = "actividades_hibridas") -> str:
        """Guarda una actividad h√≠brida"""
        
        script_dir = os.path.dirname(os.path.abspath(__file__))
        full_output_dir = os.path.join(script_dir, output_dir)
        os.makedirs(full_output_dir, exist_ok=True)
        
        filename = f"{actividad.id}.txt"
        filepath = os.path.join(full_output_dir, filename)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write("=" * 80 + "\\n")
            f.write(f"ACTIVIDAD GENERADA CON SISTEMA H√çBRIDO CrewAI + Ollama\\n")
            f.write("=" * 80 + "\\n\\n")
            f.write(f"ID: {actividad.id}\\n")
            f.write(f"T√≠tulo: {actividad.titulo}\\n")
            f.write(f"Materia: {actividad.materia}\\n")
            f.write(f"Tema: {actividad.tema}\\n")
            f.write(f"Tipo: {actividad.tipo}\\n")
            f.write(f"Estudiantes objetivo: {', '.join(actividad.estudiantes_objetivo)}\\n")
            f.write(f"Timestamp: {actividad.timestamp}\\n")
            f.write("\\n" + "-" * 50 + "\\n")
            f.write("CONTENIDO DE LA ACTIVIDAD:\\n")
            f.write("-" * 50 + "\\n\\n")
            f.write(actividad.contenido)
            f.write("\\n\\n" + "=" * 80 + "\\n")
            f.write("METADATOS DEL SISTEMA H√çBRIDO:\\n")
            f.write(json.dumps(actividad.metadatos, indent=2, ensure_ascii=False))
            f.write("\\n")
        
        logger.info(f"üíæ Actividad h√≠brida guardada en: {filepath}")
        return filepath


def main():
    """Funci√≥n principal del sistema h√≠brido"""
    
    print("="*70)
    print("üîÑ SISTEMA DE AGENTES CREWAI H√çBRIDO - Validaci√≥n + Secuencial")
    print("="*70)
    
    try:
        # Configuraci√≥n
        OLLAMA_HOST = "192.168.1.10"
        PERFILES_MODEL = "qwen3:latest"
        DISENADOR_MODEL = "qwen3:latest"
        AMBIENTE_MODEL = "qwen2:latest"
        EVALUADOR_MODEL = "mistral:latest"
        PERFILES_PATH = "perfiles_4_primaria.json"
        
        # Inicializar sistema
        print(f"\\nüîß Inicializando sistema h√≠brido:")
        print(f"   Host Ollama: {OLLAMA_HOST}")
        print(f"   Proceso: Secuencial con validaci√≥n incorporada")
        print(f"   Modelos especializados:")
        print(f"     üìä Perfiles: {PERFILES_MODEL}")
        print(f"     üé® Dise√±ador: {DISENADOR_MODEL}")
        print(f"     ü§ù Ambiente: {AMBIENTE_MODEL}")
        print(f"     ‚úÖ Validador: {EVALUADOR_MODEL}")
        
        sistema = SistemaAgentesHibrido(
            ollama_host=OLLAMA_HOST,
            perfiles_model=PERFILES_MODEL,
            disenador_model=DISENADOR_MODEL,
            ambiente_model=AMBIENTE_MODEL,
            evaluador_model=EVALUADOR_MODEL,
            perfiles_path=PERFILES_PATH
        )
        
        print("\\n‚úÖ Sistema h√≠brido inicializado!")
        
        # Men√∫
        while True:
            print("\\n" + "="*50)
            print("üîÑ GENERACI√ìN H√çBRIDA CON VALIDACI√ìN")
            print("1. üéØ Generar actividad h√≠brida validada")
            print("2. ‚ùå Salir")
            
            opcion = input("\\nüëâ Selecciona una opci√≥n (1-2): ").strip()
            
            if opcion == "1":
                materia = input("üìö Materia (matematicas/lengua/ciencias): ").strip()
                tema = input("üìù Tema espec√≠fico (opcional): ").strip() or None
                
                start_time = datetime.now()
                actividad = sistema.generar_actividad_hibrida(materia, tema)
                archivo = sistema.guardar_actividad(actividad)
                end_time = datetime.now()
                
                duration = (end_time - start_time).total_seconds()
                
                print(f"\\n‚úÖ Actividad h√≠brida generada en {duration:.1f}s:")
                print(f"   üìÑ ID: {actividad.id}")
                print(f"   üìÅ Archivo: {archivo}")
                print(f"   üîÑ Sistema: H√≠brido secuencial con validaci√≥n incorporada")
            
            elif opcion == "2":
                print("\\nüëã ¬°Hasta luego!")
                break
            
            else:
                print("\\n‚ùå Opci√≥n no v√°lida. Selecciona 1-2.")
    
    except Exception as e:
        print(f"\\n‚ùå Error inicializando sistema h√≠brido: {e}")
        print("\\nüí° Verifica que:")
        print("   1. Ollama est√© ejecut√°ndose")
        print("   2. Los modelos especificados est√©n disponibles")
        print("   3. El archivo de perfiles exista")


if __name__ == "__main__":
    main()