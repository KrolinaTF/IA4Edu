print(f"‚ö†Ô∏è  {total_problemas} problemas log√≠sticos detectados")


class OrquestadorAgent(BaseAgent):
    """Agente maestro que coordina el flujo completo, maneja iteraciones y human-in-the-loop"""
    
    def __init__(self):
        super().__init__("Orquestador", llm_required=True)
        
        # Pipeline de agentes
        self.agentes = {
            'ideador': IdeadorAgent(),
            'adaptador_dua': AdaptadorDUAAgent(),
            'arquitecto_tareas': ArquitectoTareasAgent(),
            'validador_curricular': ValidadorCurricularAgent(),
            'gestor_logistico': GestorLogisticoAgent()
        }
        
        # Flujo normal del pipeline
        self.flujo_normal = [
            'ideador',
            'adaptador_dua', 
            'arquitecto_tareas',
            'validador_curricular',
            'gestor_logistico'
        ]
    
    def procesar(self, state: ActividadState) -> ActividadState:
        """Orquesta el proceso completo de generaci√≥n de actividad"""
        
        print(f"\nüéØ [{self.name}] Iniciando generaci√≥n de actividad")
        print(f"Tema: {state.tema}")
        print(f"Iteraci√≥n: {state.iteracion}")
        
        # Ejecutar pipeline principal
        state = self._ejecutar_pipeline(state)
        
        # Evaluar resultado y decidir siguiente paso
        decision = self._evaluar_resultado(state)
        
        if decision['accion'] == 'completar':
            state.estado = EstadoActividad.COMPLETADO
            print(f"\n‚úÖ [{self.name}] Actividad completada exitosamente")
            
        elif decision['accion'] == 'iterar':
            # Manejar iteraci√≥n
            state = self._manejar_iteracion(state, decision)
            
        elif decision['accion'] == 'human_input':
            # Requiere intervenci√≥n humana
            state = self._solicitar_intervencion_humana(state, decision)
        
        return state
    
    def _ejecutar_pipeline(self, state: ActividadState) -> ActividadState:
        """Ejecuta la secuencia de agentes"""
        
        for i, agente_name in enumerate(self.flujo_normal):
            # Mostrar progreso
            print(f"\nüìã Paso {i+1}/{len(self.flujo_normal)}: {agente_name}")
            
            # Ejecutar agente
            agente = self.agentes[agente_name]
            state = agente.procesar(state)
            
            # Verificar si hay problemas cr√≠ticos que requieren parar
            if self._hay_problemas_criticos(state):
                print(f"‚ö†Ô∏è  Problemas cr√≠ticos detectados en {agente_name}")
                break
                
            # Checkpoint para posible human input
            if state.necesita_human_input:
                print(f"üîî {agente_name} solicita intervenci√≥n humana")
                break
        
        return state
    
    def _evaluar_resultado(self, state: ActividadState) -> Dict:
        """Eval√∫a el estado actual y decide la siguiente acci√≥n"""
        
        # Verificar completitud
        completitud = self._verificar_completitud(state)
        
        # Verificar calidad
        problemas = self._analizar_problemas(state)
        
        # Decidir acci√≥n
        if completitud['completo'] and not problemas['criticos']:
            return {'accion': 'completar', 'razon': 'Actividad completa y sin problemas cr√≠ticos'}
        
        elif problemas['criticos']:
            return {
                'accion': 'iterar', 
                'razon': f"Problemas cr√≠ticos: {', '.join(problemas['criticos'])}",
                'volver_a_agente': self._determinar_agente_responsable(problemas['criticos'])
            }
        
        elif state.necesita_human_input:
            return {
                'accion': 'human_input',
                'razon': 'Agente solicit√≥ intervenci√≥n humana',
                'contexto': problemas
            }
        
        else:
            return {
                'accion': 'iterar',
                'razon': 'Actividad incompleta',
                'volver_a_agente': self._encontrar_primer_agente_incompleto(completitud)
            }
    
    def _manejar_iteracion(self, state: ActividadState, decision: Dict) -> ActividadState:
        """Maneja el proceso de iteraci√≥n cuando hay problemas"""
        
        print(f"\nüîÑ [{self.name}] Iniciando iteraci√≥n")
        print(f"Raz√≥n: {decision['razon']}")
        
        # Incrementar contador de iteraci√≥n
        state.iteracion += 1
        state.estado = EstadoActividad.ITERANDO
        
        # Registrar en historial
        state.historial_cambios.append({
            'iteracion': state.iteracion,
            'razon': decision['razon'],
            'volver_a_agente': decision.get('volver_a_agente'),
            'timestamp': datetime.now().isoformat(),
            'problemas_detectados': state.problemas_detectados.copy()
        })
        
        # Determinar desde d√≥nde reiniciar
        agente_inicio = decision.get('volver_a_agente', 'ideador')
        
        # Limpiar estado parcial si es necesario
        state = self._limpiar_estado_parcial(state, agente_inicio)
        
        # Ejecutar desde el agente indicado
        indice_inicio = self.flujo_normal.index(agente_inicio)
        flujo_iteracion = self.flujo_normal[indice_inicio:]
        
        for agente_name in flujo_iteracion:
            agente = self.agentes[agente_name]
            state = agente.procesar(state)
            
            if self._hay_problemas_criticos(state):
                break
        
        # Evaluar resultado de la iteraci√≥n
        return self._evaluar_resultado_iteracion(state)
    
    def _solicitar_intervencion_humana(self, state: ActividadState, decision: Dict) -> ActividadState:
        """Solicita y maneja intervenci√≥n humana"""
        
        print(f"\nüë§ [{self.name}] Intervenci√≥n humana requerida")
        print(f"Contexto: {decision['razon']}")
        
        # En una implementaci√≥n real, aqu√≠ se pausar√≠a para input del usuario
        # Por ahora, simularemos diferentes tipos de respuesta
        
        # Mostrar estado actual al usuario
        self._mostrar_resumen_para_usuario(state)
        
        # Solicitar input real del usuario
        respuesta_usuario = self._solicitar_input_usuario(state, decision)
        
        # Procesar respuesta del usuario
        state = self._procesar_respuesta_usuario(state, respuesta_usuario)
        
        return state
    
    def _verificar_completitud(self, state: ActividadState) -> Dict:
        """Verifica si la actividad est√° completa"""
        
        componentes = {
            'actividad_base': bool(state.actividad_base),
            'adaptaciones_dua': bool(state.adaptaciones_dua),
            'tareas_paralelas': bool(state.tareas_paralelas),
            'validacion_curricular': bool(state.validacion_curricular),
            'recursos_necesarios': bool(state.recursos_necesarios)
        }
        
        completo = all(componentes.values())
        
        return {
            'completo': completo,
            'componentes': componentes,
            'faltantes': [k for k, v in componentes.items() if not v]
        }
    
    def _analizar_problemas(self, state: ActividadState) -> Dict:
        """Analiza y categoriza problemas detectados"""
        
        todos_problemas = state.problemas_detectados
        
        # Categorizar problemas
        criticos = []
        menores = []
        
        for problema in todos_problemas:
            if any(keyword in problema.lower() for keyword in ['cr√≠tico', 'rechazada', 'no viable']):
                criticos.append(problema)
            else:
                menores.append(problema)
        
        return {
            'criticos': criticos,
            'menores': menores,
            'total': len(todos_problemas)
        }
    
    def _determinar_agente_responsable(self, problemas_criticos: List[str]) -> str:
        """Determina qu√© agente debe revisar basado en los problemas"""
        
        # Mapeo de tipos de problemas a agentes responsables
        mapeo_responsabilidad = {
            'curricular': 'ideador',  # Problemas de dise√±o base
            'dua': 'adaptador_dua',   # Problemas de adaptaci√≥n
            'tareas': 'arquitecto_tareas',  # Problemas de asignaci√≥n
            'pedag√≥gico': 'validador_curricular',  # Problemas curriculares
            'tiempo': 'gestor_logistico',  # Problemas log√≠sticos
            'materiales': 'gestor_logistico',
            'espacio': 'gestor_logistico'
        }
        
        # Analizar problemas y determinar responsable m√°s frecuente
        contador_responsables = {}
        
        for problema in problemas_criticos:
            problema_lower = problema.lower()
            
            for tipo_problema, agente in mapeo_responsabilidad.items():
                if tipo_problema in problema_lower:
                    contador_responsables[agente] = contador_responsables.get(agente, 0) + 1
                    break
            else:
                # Si no se identifica, volver al ideador por defecto
                contador_responsables['ideador'] = contador_responsables.get('ideador', 0) + 1
        
        # Retornar el agente con m√°s problemas asignados
        if contador_responsables:
            return max(contador_responsables, key=contador_responsables.get)
        else:
            return 'ideador'  # Default
    
    def _encontrar_primer_agente_incompleto(self, completitud: Dict) -> str:
        """Encuentra el primer agente que no complet√≥ su trabajo"""
        
        mapeo_componentes_agentes = {
            'actividad_base': 'ideador',
            'adaptaciones_dua': 'adaptador_dua',
            'tareas_paralelas': 'arquitecto_tareas',
            'validacion_curricular': 'validador_curricular',
            'recursos_necesarios': 'gestor_logistico'
        }
        
        for componente in completitud['faltantes']:
            if componente in mapeo_componentes_agentes:
                return mapeo_componentes_agentes[componente]
        
        return 'ideador'  # Default
    
    def _hay_problemas_criticos(self, state: ActividadState) -> bool:
        """Verifica si hay problemas que requieren parar el pipeline"""
        
        # Verificar validaci√≥n curricular rechazada
        if state.validacion_curricular:
            if state.validacion_curricular.get('estado_aprobacion') == 'rechazada':
                return True
        
        # Verificar recursos no viables
        if state.recursos_necesarios:
            if not state.recursos_necesarios.get('viable', True):
                return True
        
        # Verificar problemas cr√≠ticos generales
        if state.problemas_detectados:
            for problema in state.problemas_detectados:
                if 'cr√≠tico' in problema.lower() or 'rechazad' in problema.lower():
                    return True
        
        return False
    
    def _limpiar_estado_parcial(self, state: ActividadState, agente_inicio: str) -> ActividadState:
        """Limpia el estado parcial desde el agente de inicio hacia adelante"""
        
        # Mapeo de agentes a campos que deben limpiarse
        limpieza_por_agente = {
            'ideador': ['actividad_base', 'adaptaciones_dua', 'tareas_paralelas', 'validacion_curricular', 'recursos_necesarios'],
            'adaptador_dua': ['adaptaciones_dua', 'tareas_paralelas', 'validacion_curricular', 'recursos_necesarios'],
            'arquitecto_tareas': ['tareas_paralelas', 'validacion_curricular', 'recursos_necesarios'],
            'validador_curricular': ['validacion_curricular', 'recursos_necesarios'],
            'gestor_logistico': ['recursos_necesarios']
        }
        
        campos_a_limpiar = limpieza_por_agente.get(agente_inicio, [])
        
        for campo in campos_a_limpiar:
            if campo == 'actividad_base':
                state.actividad_base = {}
            elif campo == 'adaptaciones_dua':
                state.adaptaciones_dua = []
            elif campo == 'tareas_paralelas':
                state.tareas_paralelas = []
            elif campo == 'validacion_curricular':
                state.validacion_curricular = {}
            elif campo == 'recursos_necesarios':
                state.recursos_necesarios = {}
        
        # Limpiar problemas detectados previos
        state.problemas_detectados = []
        
        return state
    
    def _evaluar_resultado_iteracion(self, state: ActividadState) -> ActividadState:
        """Eval√∫a el resultado despu√©s de una iteraci√≥n"""
        
        # Verificar si se resolvieron los problemas
        completitud = self._verificar_completitud(state)
        problemas = self._analizar_problemas(state)
        
        if completitud['completo'] and not problemas['criticos']:
            state.estado = EstadoActividad.COMPLETADO
            print(f"‚úÖ Iteraci√≥n {state.iteracion} exitosa - Actividad completada")
        
        elif state.iteracion >= 3:  # M√°ximo 3 iteraciones
            state.estado = EstadoActividad.RECHAZADO
            state.problemas_detectados.append("M√°ximo de iteraciones alcanzado - requiere intervenci√≥n manual")
            print(f"‚ùå M√°ximo de iteraciones alcanzado - actividad marcada como rechazada")
        
        else:
            # Continuar iterando si a√∫n hay problemas
            if problemas['criticos']:
                decision = {
                    'accion': 'iterar',
                    'razon': f"Iteraci√≥n {state.iteracion} no resolvi√≥ problemas cr√≠ticos",
                    'volver_a_agente': self._determinar_agente_responsable(problemas['criticos'])
                }
                return self._manejar_iteracion(state, decision)
        
        return state
    
    def _mostrar_resumen_para_usuario(self, state: ActividadState):
        """Muestra resumen del estado actual para el usuario"""
        print("\n" + "="*60)
        print("üìã RESUMEN DE ACTIVIDAD PARA REVISI√ìN")
        print("="*60)
        
        if state.actividad_base:
            print(f"T√≠tulo: {state.actividad_base.get('titulo', 'Sin t√≠tulo')}")
            print(f"Duraci√≥n: {state.actividad_base.get('duracion', 'Sin especificar')}")
            print(f"Objetivo: {state.actividad_base.get('objetivo_pedagogico', 'Sin objetivo')}")
        
        if state.tareas_paralelas:
            print(f"\nTareas paralelas: {len(state.tareas_paralelas)}")
            for i, tarea in enumerate(state.tareas_paralelas[:3]):  # Mostrar solo primeras 3
                print(f"  {i+1}. {tarea.get('nombre', 'Sin nombre')}: {tarea.get('estudiantes', 'Sin asignar')}")
        
        if state.problemas_detectados:
            print(f"\n‚ö†Ô∏è  Problemas detectados ({len(state.problemas_detectados)}):")
            for problema in state.problemas_detectados[:5]:  # Mostrar solo primeros 5
                print(f"  - {problema}")
        
        print("="*60)
    
    def _solicitar_input_usuario(self, state: ActividadState, decision: Dict) -> Dict:
        """Solicita input real del usuario"""
        
        print("\nü§î ¬øQu√© deseas hacer?")
        print("1. Continuar con la actividad tal como est√°")
        print("2. Hacer cambios espec√≠ficos") 
        print("3. Reiniciar desde otro punto")
        print("4. Aprobar actividad final")
        
        try:
            choice = input("Selecciona una opci√≥n (1-4): ").strip()
            
            if choice == "1":
                return {
                    'accion': 'continuar',
                    'feedback': 'Usuario decidi√≥ continuar'
                }
            elif choice == "2":
                return self._solicitar_cambios_especificos(state)
            elif choice == "3":
                return self._solicitar_reinicio(state)
            elif choice == "4":
                return {
                    'accion': 'aprobar',
                    'feedback': 'Usuario aprob√≥ la actividad final'
                }
            else:
                print("‚ùå Opci√≥n no v√°lida, continuando...")
                return {
                    'accion': 'continuar',
                    'feedback': 'Opci√≥n inv√°lida, continuar por defecto'
                }
        except KeyboardInterrupt:
            print("\n‚ùå Proceso interrumpido por el usuario")
            return {
                'accion': 'aprobar',
                'feedback': 'Proceso interrumpido, aprobar estado actual'
            }
    
    def _solicitar_cambios_especificos(self, state: ActividadState) -> Dict:
        """Permite al usuario especificar cambios"""
        print("\nüìù ¬øQu√© tipo de cambios deseas hacer?")
        print("1. Cambiar duraci√≥n (minutos)")
        print("2. Modificar materiales")
        print("3. Ajustar nivel de dificultad")
        print("4. Otros cambios")
        
        choice = input("Tipo de cambio (1-4): ").strip()
        
        if choice == "1":
            try:
                nueva_duracion = int(input("Nueva duraci√≥n en minutos: "))
                return {
                    'accion': 'modificar_restricciones',
                    'cambios': {'duracion_max': nueva_duracion},
                    'feedback': f'Usuario cambi√≥ duraci√≥n a {nueva_duracion} minutos'
                }
            except ValueError:
                print("‚ùå Duraci√≥n inv√°lida, manteniendo original")
        elif choice == "2":
            nuevos_materiales = input("Nuevos materiales disponibles: ").strip()
            if nuevos_materiales:
                return {
                    'accion': 'modificar_restricciones', 
                    'cambios': {'materiales': nuevos_materiales},
                    'feedback': f'Usuario cambi√≥ materiales: {nuevos_materiales}'
                }
        elif choice == "3":
            print("1. M√°s f√°cil  2. M√°s dif√≠cil  3. Mantener nivel")
            nivel = input("Ajuste de dificultad (1-3): ").strip()
            if nivel in ["1", "2"]:
                ajuste = "m√°s_facil" if nivel == "1" else "m√°s_dificil"
                return {
                    'accion': 'ajustar_dificultad',
                    'cambios': {'dificultad': ajuste},
                    'feedback': f'Usuario solicit√≥ actividad {ajuste.replace("_", " ")}'
                }
        
        # Fallback
        return {
            'accion': 'continuar',
            'feedback': 'Usuario no especific√≥ cambios v√°lidos'
        }
    
    def _solicitar_reinicio(self, state: ActividadState) -> Dict:
        """Permite al usuario reiniciar desde un punto espec√≠fico"""
        print("\nüîÑ ¬øDesde d√≥nde deseas reiniciar?")
        print("1. Desde el dise√±o inicial")
        print("2. Desde adaptaciones DUA")
        print("3. Desde arquitectura de tareas")
        
        choice = input("Punto de reinicio (1-3): ").strip()
        
        puntos_reinicio = {
            "1": "ideador",
            "2": "adaptador_dua", 
            "3": "arquitecto_tareas"
        }
        
        agente = puntos_reinicio.get(choice, "ideador")
        
        return {
            'accion': 'reiniciar',
            'desde_agente': agente,
            'feedback': f'Usuario solicit√≥ reiniciar desde {agente}'
        }
    
    def _procesar_respuesta_usuario(self, state: ActividadState, respuesta: Dict) -> ActividadState:
        """Procesa la respuesta del usuario y actualiza el estado"""
        
        accion = respuesta.get('accion', 'aprobar')
        
        if accion == 'aprobar':
            state.estado = EstadoActividad.COMPLETADO
            state.feedback_profesor.append(f"Usuario aprob√≥ en iteraci√≥n {state.iteracion}")
            
        elif accion == 'modificar_restricciones':
            # Actualizar restricciones seg√∫n el feedback del usuario
            cambios = respuesta.get('cambios', {})
            state.restricciones.update(cambios)
            
            feedback = respuesta.get('feedback', 'Usuario solicit√≥ cambios')
            state.feedback_profesor.append(feedback)
            
            # Marcar que necesita re-evaluar desde gestor log√≠stico
            state = self._manejar_iteracion(state, {
                'accion': 'iterar',
                'razon': 'Usuario modific√≥ restricciones',
                'volver_a_agente': 'gestor_logistico'
            })
            
        elif accion == 'continuar_con_cambios':
            # Continuar a pesar de problemas menores
            state.estado = EstadoActividad.COMPLETADO
            feedback = respuesta.get('feedback', 'Usuario acept√≥ con cambios menores')
            state.feedback_profesor.append(feedback)
        
        # Reset flag de necesita input
        state.necesita_human_input = False
        
        return state


class SistemaMultiAgenteCompleto:
    """Sistema completo que coordina la generaci√≥n de actividades educativas"""
    
    def __init__(self):
        self.orquestador = OrquestadorAgent()
        
    def generar_actividad(self, tema: str, perfiles_estudiantes: Dict, restricciones: Dict = None) -> ActividadState:
        """M√©todo principal para generar una actividad educativa completa"""
        
        # Crear estado inicial
        state_inicial = ActividadState(
            tema=tema,
            perfiles_estudiantes=perfiles_estudiantes,
            restricciones=restricciones or {}
        )
        
        print(f"\nüöÄ Iniciando generaci√≥n de actividad: '{tema}'")
        
        # Procesar a trav√©s del orquestador
        state_final = self.orquestador.procesar(state_inicial)
        
        # Mostrar resultado final
        self._mostrar_resultado_final(state_final)
        
        return state_final
    
    def _mostrar_resultado_final(self, state: ActividadState):
        """Muestra el resultado final del proceso"""
        print("\n" + "="*70)
        print("üéØ RESULTADO FINAL")
        print("="*70)
        
        print(f"Estado: {state.estado.value.upper()}")
        print(f"Iteraciones: {state.iteracion}")
        
        if state.estado == EstadoActividad.COMPLETADO:
            print("‚úÖ Actividad generada exitosamente")
            
            if state.actividad_base:
                print(f"\nüìö Actividad: {state.actividad_base.get('titulo', 'Sin t√≠tulo')}")
                print(f"Duraci√≥n: {state.actividad_base.get('duracion', 'Sin especificar')}")
            
            if state.tareas_paralelas:
                print(f"\nüë• Tareas paralelas: {len(state.tareas_paralelas)} definidas")
                
            if state.adaptaciones_dua:
                individuales = len([a for a in state.adaptaciones_dua if a.get('tipo') == 'individual'])
                print(f"üé≠ Adaptaciones: {individuales} estudiantes con adaptaciones espec√≠ficas")
            
        elif state.estado == EstadoActividad.RECHAZADO:
            print("‚ùå No se pudo generar actividad viable")
            if state.problemas_detectados:
                print(f"Problemas finales ({len(state.problemas_detectados)}):")
                for problema in state.problemas_detectados[-3:]:  # Mostrar √∫ltimos 3
                    print(f"  - {problema}")
        
        if state.feedback_profesor:
            print(f"\nüí¨ Feedback del profesor: {len(state.feedback_profesor)} intervenciones")
            
        print("="*70)


# Actualizar el main para usar el sistema completo
if __name__ == "__main__":
    # Test del sistema completo
    print("üéØ Sistema Multi-Agente para Actividades Educativas")
    print("=" * 50)
    
    # Perfiles de ejemplo completos
    perfiles_test = {
        "estudiantes": [
            {"nombre": "ALEX M.", "diagnostico_formal": "ninguno", "canal_preferido": "visual", "nivel_apoyo": "bajo", "temperamento": "reflexivo", "agrupamiento_optimo": "individual", "tolerancia_frustracion": "alta"},
            {"nombre": "ELENA R.", "diagnostico_formal": "TEA_nivel_1", "canal_preferido": "visual", "nivel_apoyo": "alto", "temperamento": "reflexivo", "agrupamiento_optimo": "individual", "tolerancia_frustracion": "baja", "necesidades_especiales": ["rutinas_claras", "instrucciones_visuales"]},
            {"nombre": "LUIS T.", "diagnostico_formal": "TDAH_combinado", "canal_preferido": "kinest√©sico", "nivel_apoyo": "alto", "temperamento": "impulsivo", "agrupamiento_optimo": "grupos", "tolerancia_frustracion": "baja", "necesidades_especiales": ["descansos_frecuentes", "actividades_f√≠sicas"]},
            {"nombre": "ANA V.", "diagnostico_formal": "altas_capacidades", "canal_preferido": "auditivo", "nivel_apoyo": "bajo", "temperamento": "reflexivo", "agrupamiento_optimo": "individual", "tolerancia_frustracion": "baja", "necesidades_especiales": ["retos_intelectuales"]},
            {"nombre": "MAR√çA L.", "diagnostico_formal": "ninguno", "canal_preferido": "auditivo", "nivel_apoyo": "medio", "temperamento": "reflexivo", "agrupamiento_optimo": "grupos", "tolerancia_frustracion": "media"},
            {"nombre": "SARA M.", "diagnostico_formal": "ninguno", "canal_preferido": "auditivo", "nivel_apoyo": "medio", "temperamento": "equilibrado", "agrupamiento_optimo": "grupos", "tolerancia_frustracion": "media"},
            {"nombre": "EMMA K.", "diagnostico_formal": "ninguno", "canal_preferido": "visual", "nivel_apoyo": "medio", "temperamento": "reflexivo", "agrupamiento_optimo": "individual", "tolerancia_frustracion": "baja"},
            {"nombre": "HUGO P.", "diagnostico_formal": "ninguno", "canal_preferido": "visual", "nivel_apoyo": "bajo", "temperamento": "equilibrado", "agrupamiento_optimo": "individual", "tolerancia_frustracion": "alta"}
        ]
    }
    
    # Crear sistema
    sistema = SistemaMultiAgenteCompleto()
    
    # Generar actividad
    resultado = sistema.generar_actividad(
        tema="Fracciones equivalentes",
        perfiles_estudiantes=perfiles_test,
        restricciones={
            "duracion_max": 45,
            "materiales": "b√°sicos",
            "espacio_amplio": False
        }
    )

#!/usr/bin/env python3
"""
Sistema Multi-Agente para Generaci√≥n de Actividades Educativas Adaptadas
Implementaci√≥n basada en el flujo pedag√≥gico dise√±ado
"""

import json
import re
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass, field
from enum import Enum
import uuid
from datetime import datetime
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger("SistemaAgentesInteligente")

# Importar integrador de Ollama
try:
    from ollama_api_integrator import OllamaAPIEducationGenerator
    logger.info("‚úÖ Ollama integrator importado correctamente")
except ImportError:
    logger.error("‚ùå No se pudo importar OllamaAPIEducationGenerator")
    OllamaAPIEducationGenerator = None

class EstadoActividad(Enum):
    INICIANDO = "iniciando"
    EN_PROCESO = "en_proceso"  
    VALIDANDO = "validando"
    ITERANDO = "iterando"
    COMPLETADO = "completado"
    RECHAZADO = "rechazado"

@dataclass
class ActividadState:
    """Estado compartido entre todos los agentes"""
    id: str = field(default_factory=lambda: str(uuid.uuid4()))
    iteracion: int = 1
    estado: EstadoActividad = EstadoActividad.INICIANDO
    timestamp: str = field(default_factory=lambda: datetime.now().isoformat())
    
    # Inputs iniciales
    tema: str = ""
    perfiles_estudiantes: Dict = field(default_factory=dict)
    restricciones: Dict = field(default_factory=dict)
    
    # Contenido generado por agentes
    actividad_base: Dict = field(default_factory=dict)
    adaptaciones_dua: List[Dict] = field(default_factory=list)
    tareas_paralelas: List[Dict] = field(default_factory=list)
    validacion_curricular: Dict = field(default_factory=dict)
    recursos_necesarios: Dict = field(default_factory=dict)
    
    # Feedback y control
    feedback_profesor: List[str] = field(default_factory=list)
    historial_cambios: List[Dict] = field(default_factory=list)
    problemas_detectados: List[str] = field(default_factory=list)
    
    # Control de flujo
    agente_actual: str = ""
    necesita_human_input: bool = False
    
class BaseAgent:
    """Clase base para todos los agentes del sistema"""
    
    # Configuraci√≥n global de Ollama
    _ollama_instance = None
    _ollama_config = {
        'host': '192.168.1.10',
        'port': 11434,
        'model': 'llama3.2'
    }
    
    def __init__(self, name: str, llm_required: bool = True, model_override: str = None):
        self.name = name
        self.llm_required = llm_required
        self.model = model_override or self._ollama_config['model']
        
        # Inicializar conexi√≥n Ollama si es necesario
        if self.llm_required and BaseAgent._ollama_instance is None:
            self._init_ollama()
        
    @classmethod
    def _init_ollama(cls):
        """Inicializa la conexi√≥n con Ollama una sola vez"""
        if OllamaAPIEducationGenerator is None:
            logger.error("‚ùå OllamaAPIEducationGenerator no disponible")
            return
            
        try:
            cls._ollama_instance = OllamaAPIEducationGenerator(
                host=cls._ollama_config['host'],
                port=cls._ollama_config['port'],
                model_name=cls._ollama_config['model']
            )
            logger.info(f"‚úÖ Conexi√≥n Ollama establecida: {cls._ollama_config['host']}:{cls._ollama_config['port']}")
        except Exception as e:
            logger.error(f"‚ùå Error conectando con Ollama: {e}")
            cls._ollama_instance = None
    
    def procesar(self, state: ActividadState) -> ActividadState:
        """M√©todo principal que cada agente debe implementar"""
        raise NotImplementedError
        
    def validar_inputs(self, state: ActividadState) -> Tuple[bool, str]:
        """Valida que los inputs necesarios est√©n disponibles"""
        return True, ""
    
    def llamar_llm(self, prompt: str, **kwargs) -> str:
        """Llamada real a LLM usando Ollama"""
        print(f"\nü§ñ [{self.name}] Consultando LLM...")
        print(f"PROMPT: {prompt[:200]}...")
        
        if BaseAgent._ollama_instance is None:
            logger.warning(f"‚ö†Ô∏è [{self.name}] Ollama no disponible, usando respuesta simulada")
            return self._get_fallback_response(prompt, **kwargs)
        
        try:
            # Configurar par√°metros
            max_tokens = kwargs.get('max_tokens', 500)
            temperature = kwargs.get('temperature', 0.7)
            
            # Generar respuesta con Ollama
            respuesta = BaseAgent._ollama_instance.generar_texto(
                prompt=prompt,
                max_tokens=max_tokens,
                temperature=temperature
            )
            
            logger.info(f"‚úÖ [{self.name}] Respuesta LLM generada ({len(respuesta)} chars)")
            return respuesta
            
        except Exception as e:
            logger.error(f"‚ùå [{self.name}] Error llamando LLM: {e}")
            return self._get_fallback_response(prompt, **kwargs)
    
    def _get_fallback_response(self, prompt: str, **kwargs) -> str:
        """Respuesta de fallback cuando Ollama no est√° disponible"""
        return f"[FALLBACK] Respuesta simulada para {self.name} - Ollama no disponible"

class IdeadorAgent(BaseAgent):
    """Agente que genera la idea principal de la actividad"""
    
    def __init__(self):
        super().__init__("Ideador", llm_required=True)
        
    def procesar(self, state: ActividadState) -> ActividadState:
        """Genera la actividad base siguiendo el proceso pedag√≥gico del usuario"""
        
        # Actualizar estado
        state.agente_actual = self.name
        state.estado = EstadoActividad.EN_PROCESO
        
        # Construir prompt con el proceso pedag√≥gico
        prompt = self._construir_prompt_ideador(state)
        
        # Llamar a LLM
        respuesta = self.llamar_llm(prompt, temperatura=0.8)
        
        # Parsear respuesta y actualizar estado
        actividad_generada = self._parsear_respuesta_ideador(respuesta)
        state.actividad_base = actividad_generada
        
        # Log del proceso
        self._log_proceso(state, respuesta)
        
        return state
    
    def _construir_prompt_ideador(self, state: ActividadState) -> str:
        """Construye el prompt siguiendo el proceso mental del usuario"""
        
        # Few-shot examples de las actividades exitosas del usuario
        ejemplos_exitosos = self._get_ejemplos_exitosos()
        
        # An√°lisis de perfiles para dise√±ar apropiadamente
        analisis_grupo = self._analizar_perfiles_grupo(state.perfiles_estudiantes)
        
        prompt = f"""
PROCESO_PEDAGOGICO_EXPERTO:

Tu tarea es generar una actividad educativa siguiendo este proceso mental de un pedagogo experto:

1. AN√ÅLISIS_CONCEPTO: ¬øQu√© hace dif√≠cil este concepto para estudiantes de 9-10 a√±os?
2. AN√ÅLISIS_GRUPO: ¬øQu√© caracter√≠sticas tiene este grupo espec√≠fico?
3. INSIGHT_PEDAGOGICO: ¬øC√≥mo hacer este concepto tangible, considerando las necesidades del grupo?
4. DISE√ëO_ACTIVIDAD: Crear actividad que permita trabajo paralelo y colaborativo
5. IDENTIFICACI√ìN_TAREAS: ¬øQu√© subtareas pueden realizarse simult√°neamente?

CONTEXTO:
- Tema: {state.tema}
- Estudiantes: 8 ni√±os de 4¬∫ primaria (edad 9-10 a√±os)
- Duraci√≥n t√≠pica: 45-60 minutos

AN√ÅLISIS_DEL_GRUPO_ACTUAL:
{analisis_grupo}

EJEMPLOS_DE_ACTIVIDADES_EXITOSAS:
{ejemplos_exitosos}

RESTRICCIONES_ACTUALES:
{json.dumps(state.restricciones, indent=2) if state.restricciones else "Ninguna restricci√≥n espec√≠fica"}

FEEDBACK_PREVIO_DEL_PROFESOR:
{chr(10).join(state.feedback_profesor) if state.feedback_profesor else "Sin feedback previo"}

RESPONDE EN ESTE FORMATO:

AN√ÅLISIS_CONCEPTO:
[¬øPor qu√© es dif√≠cil este concepto? ¬øD√≥nde suelen fallar los estudiantes?]

AN√ÅLISIS_GRUPO:
[¬øQu√© oportunidades y desaf√≠os presenta este grupo espec√≠fico?]

INSIGHT_PEDAGOGICO:
[¬øC√≥mo hacer este concepto tangible considerando las caracter√≠sticas del grupo?]

ACTIVIDAD_PROPUESTA:
T√≠tulo: [nombre atractivo]
Duraci√≥n: [tiempo en minutos]
Descripci√≥n: [explicaci√≥n clara de la actividad general, considerando las necesidades del grupo]

TAREAS_IDENTIFICADAS:
[Lista de 3-4 subtareas que pueden realizarse en paralelo, pensando en los perfiles disponibles]
1. Tarea A: [descripci√≥n] - Perfil ideal: [visual/auditivo/kinest√©sico, nivel de apoyo]
2. Tarea B: [descripci√≥n] - Perfil ideal: [visual/auditivo/kinest√©sico, nivel de apoyo]
3. Tarea C: [descripci√≥n] - Perfil ideal: [visual/auditivo/kinest√©sico, nivel de apoyo]

MATERIALES_B√ÅSICOS:
[Lista de materiales necesarios]

OBJETIVO_PEDAGOGICO:
[¬øQu√© van a aprender exactamente?]
"""
        
        return prompt
    
    def _analizar_perfiles_grupo(self, perfiles: Dict) -> str:
        """Analiza los perfiles de estudiantes para informar el dise√±o de la actividad"""
        if not perfiles or 'estudiantes' not in perfiles:
            return "Sin informaci√≥n de perfiles disponible"
            
        estudiantes = perfiles['estudiantes']
        
        # Contadores para an√°lisis
        diagnosticos = {}
        canales = {}
        niveles_apoyo = {}
        temperamentos = {}
        agrupamientos = {}
        
        for est in estudiantes:
            # Contar diagn√≥sticos
            diag = est.get('diagnostico_formal', 'ninguno')
            diagnosticos[diag] = diagnosticos.get(diag, 0) + 1
            
            # Contar canales preferidos
            canal = est.get('canal_preferido', 'no_especificado')
            canales[canal] = canales.get(canal, 0) + 1
            
            # Contar niveles de apoyo
            apoyo = est.get('nivel_apoyo', 'no_especificado')
            niveles_apoyo[apoyo] = niveles_apoyo.get(apoyo, 0) + 1
            
            # Contar temperamentos
            temp = est.get('temperamento', 'no_especificado')
            temperamentos[temp] = temperamentos.get(temp, 0) + 1
            
            # Contar preferencias de agrupamiento
            grup = est.get('agrupamiento_optimo', 'no_especificado')
            agrupamientos[grup] = agrupamientos.get(grup, 0) + 1
        
        analisis = f"""
COMPOSICI√ìN DEL GRUPO ({len(estudiantes)} estudiantes):

Diagn√≥sticos especiales:
{self._format_dict_counts(diagnosticos)}

Canales de aprendizaje preferidos:
{self._format_dict_counts(canales)}

Niveles de apoyo necesarios:
{self._format_dict_counts(niveles_apoyo)}

Temperamentos:
{self._format_dict_counts(temperamentos)}

Preferencias de agrupamiento:
{self._format_dict_counts(agrupamientos)}

IMPLICACIONES PARA EL DISE√ëO:
- Diversidad de canales: Necesita actividad multi-sensorial
- Necesidades especiales: {self._get_necesidades_especiales_resumen(estudiantes)}
- Tolerancia frustraci√≥n: {self._get_tolerancia_frustracion_resumen(estudiantes)}
- Agrupamiento: {self._get_estrategia_agrupamiento(agrupamientos)}
"""
        return analisis
    
    def _format_dict_counts(self, dict_counts: Dict) -> str:
        """Formatea un diccionario de conteos para el an√°lisis"""
        return ", ".join([f"{k}: {v}" for k, v in dict_counts.items()])
    
    def _get_necesidades_especiales_resumen(self, estudiantes: List[Dict]) -> str:
        """Resume las necesidades especiales del grupo"""
        especiales = []
        for est in estudiantes:
            diag = est.get('diagnostico_formal', 'ninguno')
            if diag != 'ninguno':
                nombre = est.get('nombre', 'Estudiante')
                especiales.append(f"{nombre}({diag})")
        
        return ", ".join(especiales) if especiales else "Sin diagn√≥sticos especiales"
    
    def _get_tolerancia_frustracion_resumen(self, estudiantes: List[Dict]) -> str:
        """Resume la tolerancia a la frustraci√≥n del grupo"""
        bajas = sum(1 for est in estudiantes if est.get('tolerancia_frustracion') == 'baja')
        if bajas >= len(estudiantes) // 2:
            return "Mayor√≠a con baja tolerancia - necesita √©xito temprano y tareas cortas"
        elif bajas > 0:
            return f"{bajas} estudiantes con baja tolerancia - incluir opciones de diferente dificultad"
        else:
            return "Buena tolerancia general - permite retos m√°s complejos"
    
    def _get_estrategia_agrupamiento(self, agrupamientos: Dict) -> str:
        """Sugiere estrategia de agrupamiento basada en preferencias"""
        individual = agrupamientos.get('individual', 0)
        grupos = agrupamientos.get('grupos', 0)
        
        if individual > grupos:
            return "Mayor√≠a prefiere trabajo individual - dise√±ar tareas paralelas individuales"
        elif grupos > individual:
            return "Mayor√≠a prefiere trabajo grupal - incluir colaboraci√≥n y roles complementarios"
        else:
            return "Grupo mixto - combinar fases individuales y colaborativas"
    
    def _get_ejemplos_exitosos(self) -> str:
        """Devuelve los ejemplos exitosos del usuario como few-shot"""
        return """
EJEMPLO 1 - Sumas con llevadas:
- Concepto dif√≠cil: El abstracto "me llevo 1"
- Insight: Representaci√≥n f√≠sica con intercambio real
- Actividad: 6 estudiantes como d√≠gitos, intercambian materiales f√≠sicos
- Tareas paralelas: Preparar mesas, hacer paquetes, calcular individual
- Resultado: Entendimiento f√≠sico del concepto

EJEMPLO 2 - F√°brica de fracciones:
- Concepto dif√≠cil: ¬øQu√© es una fracci√≥n? ¬øQu√© significa 1?
- Insight: Fraccionamiento como proceso f√≠sico
- Actividad: Estaciones de fraccionamiento con rotaciones
- Tareas paralelas: Elegir objetos, decidir fraccionamiento, ejecutar, clasificar
- Resultado: Comprensi√≥n vivencial de fracciones
"""
    
    def _parsear_respuesta_ideador(self, respuesta: str) -> Dict:
        """Extrae la informaci√≥n estructurada de la respuesta del LLM"""
        
        # Usar regex para extraer secciones
        secciones = {}
        
        patrones = {
            'analisis_concepto': r'AN√ÅLISIS_CONCEPTO:\s*(.*?)(?=\n[A-Z√Å√â√ç√ì√ö_]+:|$)',
            'analisis_grupo': r'AN√ÅLISIS_GRUPO:\s*(.*?)(?=\n[A-Z√Å√â√ç√ì√ö_]+:|$)',
            'insight_pedagogico': r'INSIGHT_PEDAGOGICO:\s*(.*?)(?=\n[A-Z√Å√â√ç√ì√ö_]+:|$)',
            'titulo': r'T√≠tulo:\s*(.*?)(?=\n|$)',
            'duracion': r'Duraci√≥n:\s*(.*?)(?=\n|$)',
            'descripcion': r'Descripci√≥n:\s*(.*?)(?=\n[A-Z√Å√â√ç√ì√ö_]+:|$)',
            'tareas': r'TAREAS_IDENTIFICADAS:\s*(.*?)(?=\n[A-Z√Å√â√ç√ì√ö_]+:|$)',
            'materiales': r'MATERIALES_B√ÅSICOS:\s*(.*?)(?=\n[A-Z√Å√â√ç√ì√ö_]+:|$)',
            'objetivo': r'OBJETIVO_PEDAGOGICO:\s*(.*?)(?=\n[A-Z√Å√â√ç√ì√ö_]+:|$)'
        }
        
        for key, patron in patrones.items():
            match = re.search(patron, respuesta, re.DOTALL | re.MULTILINE)
            if match:
                secciones[key] = match.group(1).strip()
            else:
                secciones[key] = ""
        
        return {
            'analisis_concepto': secciones['analisis_concepto'],
            'analisis_grupo': secciones['analisis_grupo'],
            'insight_pedagogico': secciones['insight_pedagogico'],
            'titulo': secciones['titulo'],
            'duracion': secciones['duracion'],
            'descripcion': secciones['descripcion'],
            'tareas_identificadas': secciones['tareas'],
            'materiales_basicos': secciones['materiales'],
            'objetivo_pedagogico': secciones['objetivo'],
            'respuesta_completa': respuesta
        }
    
    def _log_proceso(self, state: ActividadState, respuesta: str):
        """Registra el proceso para debugging"""
        print(f"\n‚úÖ [{self.name}] Actividad base generada")
        print(f"T√≠tulo: {state.actividad_base.get('titulo', 'Sin t√≠tulo')}")
        print(f"Duraci√≥n: {state.actividad_base.get('duracion', 'Sin especificar')}")

class AdaptadorDUAAgent(BaseAgent):
    """Agente que convierte adaptaciones DUA gen√©ricas en acciones espec√≠ficas"""
    
    def __init__(self):
        super().__init__("AdaptadorDUA", llm_required=True)
        
    def procesar(self, state: ActividadState) -> ActividadState:
        """Traduce el DUA gen√©rico a acciones concretas para esta actividad espec√≠fica"""
        
        # Validar que tenemos la actividad base
        is_valid, msg = self.validar_inputs(state)
        if not is_valid:
            state.problemas_detectados.append(f"AdaptadorDUA: {msg}")
            return state
            
        # Actualizar estado
        state.agente_actual = self.name
        
        # Construir prompt espec√≠fico para adaptaciones DUA
        prompt = self._construir_prompt_adaptaciones(state)
        
        # Llamar a LLM
        respuesta = self.llamar_llm(prompt, temperatura=0.7)
        
        # Parsear y actualizar adaptaciones
        adaptaciones_generadas = self._parsear_adaptaciones(respuesta)
        state.adaptaciones_dua = adaptaciones_generadas
        
        # Log del proceso
        self._log_proceso(state, len(adaptaciones_generadas))
        
        return state
    
    def validar_inputs(self, state: ActividadState) -> Tuple[bool, str]:
        """Valida que tenemos la actividad base para adaptar"""
        if not state.actividad_base:
            return False, "Se necesita actividad base del Ideador"
        
        if not state.perfiles_estudiantes:
            return False, "Se necesitan perfiles de estudiantes para adaptar"
            
        return True, ""
    
    def _construir_prompt_adaptaciones(self, state: ActividadState) -> str:
        """Construye prompt para convertir DUA gen√©rico en acciones espec√≠ficas"""
        
        # Extraer estudiantes con necesidades especiales
        estudiantes_especiales = self._identificar_necesidades_especiales(state.perfiles_estudiantes)
        
        # Extraer actividad actual
        actividad = state.actividad_base
        
        prompt = f"""
ESPECIALISTA_DUA_CONCRETO:

Tu funci√≥n es TRADUCIR adaptaciones DUA gen√©ricas en ACCIONES ESPEC√çFICAS para esta actividad concreta.

NO digas "dar apoyo visual" ‚Üí S√ç especifica "escribir los 3 pasos en la pizarra"
NO digas "permitir descansos" ‚Üí S√ç especifica "rotaci√≥n cada 15 min entre estaciones"

ACTIVIDAD_A_ADAPTAR:
T√≠tulo: {actividad.get('titulo', '')}
Descripci√≥n: {actividad.get('descripcion', '')}
Tareas identificadas: {actividad.get('tareas_identificadas', '')}
Duraci√≥n: {actividad.get('duracion', '')}

ESTUDIANTES_CON_NECESIDADES_ESPEC√çFICAS:
{estudiantes_especiales}

EJEMPLOS_DE_ADAPTACIONES_CONCRETAS_EXITOSAS:
{self._get_ejemplos_adaptaciones_concretas()}

PRINCIPIOS_PARA_ADAPTACIONES_CONCRETAS:
- TEA: Secuencias visuales paso a paso, rutinas predecibles
- TDAH: Tareas cortas con movimiento, feedback inmediato
- Altas capacidades: Extensiones y retos adicionales
- Baja tolerancia frustraci√≥n: √âxito temprano, pasos peque√±os

RESPONDE EN ESTE FORMATO:

ADAPTACIONES_ESPEC√çFICAS:

Para [NOMBRE_ESTUDIANTE] ([DIAGN√ìSTICO]):
- Acci√≥n_concreta_1: [descripci√≥n espec√≠fica de QU√â hacer exactamente]
- Acci√≥n_concreta_2: [descripci√≥n espec√≠fica de QU√â hacer exactamente]
- Material_de_apoyo: [si necesita algo espec√≠fico]

[Repite para cada estudiante con necesidades especiales]

ADAPTACIONES_GRUPALES:
- Modificaci√≥n_1: [cambio espec√≠fico en la actividad general]
- Modificaci√≥n_2: [cambio espec√≠fico en la actividad general]

SE√ëALES_DE_ALERTA_A_OBSERVAR:
- [Qu√© observar en cada estudiante para saber si funciona]
"""
        
        return prompt
    
    def _identificar_necesidades_especiales(self, perfiles: Dict) -> str:
        """Identifica estudiantes con necesidades de adaptaci√≥n espec√≠ficas"""
        if not perfiles or 'estudiantes' not in perfiles:
            return "Sin informaci√≥n de perfiles"
            
        estudiantes_especiales = []
        
        for est in perfiles['estudiantes']:
            necesidades = []
            
            # Diagn√≥sticos formales
            diag = est.get('diagnostico_formal', 'ninguno')
            if diag != 'ninguno':
                necesidades.append(f"Diagn√≥stico: {diag}")
            
            # Nivel de apoyo alto
            if est.get('nivel_apoyo') == 'alto':
                necesidades.append("Apoyo alto requerido")
                
            # Baja tolerancia a frustraci√≥n
            if est.get('tolerancia_frustracion') == 'baja':
                necesidades.append("Baja tolerancia frustraci√≥n")
                
            # Necesidades especiales expl√≠citas
            if 'necesidades_especiales' in est:
                necesidades.extend(est['necesidades_especiales'])
            
            if necesidades:
                nombre = est.get('nombre', 'Estudiante')
                canal = est.get('canal_preferido', 'no especificado')
                temperamento = est.get('temperamento', 'no especificado')
                
                info = f"""
{nombre}:
- Canal preferido: {canal}
- Temperamento: {temperamento}
- Necesidades: {', '.join(necesidades)}
"""
                estudiantes_especiales.append(info)
        
        return '\n'.join(estudiantes_especiales) if estudiantes_especiales else "Sin necesidades especiales identificadas"
    
    def _get_ejemplos_adaptaciones_concretas(self) -> str:
        """Ejemplos reales de adaptaciones espec√≠ficas exitosas"""
        return """
EJEMPLO_TEA (Elena):
‚ùå Gen√©rico: "Dar apoyo visual"
‚úÖ Espec√≠fico: "Crear cartel con secuencia: 1)Tomar fracci√≥n 2)Buscar equivalente 3)Verificar con compa√±ero 4)Pegar en mural"

EJEMPLO_TDAH (Luis):  
‚ùå Gen√©rico: "Permitir movimiento"
‚úÖ Espec√≠fico: "Rol de coordinador: caminar entre estaciones cada 10min para recoger resultados y llevar a siguiente estaci√≥n"

EJEMPLO_ALTAS_CAPACIDADES (Ana):
‚ùå Gen√©rico: "Dar retos adicionales"  
‚úÖ Espec√≠fico: "Despu√©s de completar su estaci√≥n, crear 3 fracciones equivalentes complejas (con n√∫meros mayores a 20) para otros grupos"
"""
    
    def _parsear_adaptaciones(self, respuesta: str) -> List[Dict]:
        """Extrae las adaptaciones espec√≠ficas de la respuesta"""
        adaptaciones = []
        
        # Buscar secciones de adaptaciones individuales
        patron_individual = r'Para ([^(]+)\(([^)]+)\):(.*?)(?=Para [^(]+\(|ADAPTACIONES_GRUPALES:|SE√ëALES_DE_ALERTA|$)'
        matches_individuales = re.findall(patron_individual, respuesta, re.DOTALL)
        
        for nombre, diagnostico, contenido in matches_individuales:
            acciones = []
            # Extraer acciones espec√≠ficas (l√≠neas que empiezan con -)
            lineas_accion = re.findall(r'- ([^:]+): (.+)', contenido)
            
            for tipo_accion, descripcion in lineas_accion:
                acciones.append({
                    'tipo': tipo_accion.strip(),
                    'descripcion': descripcion.strip()
                })
            
            adaptaciones.append({
                'estudiante': nombre.strip(),
                'diagnostico': diagnostico.strip(),
                'acciones_especificas': acciones,
                'tipo': 'individual'
            })
        
        # Buscar adaptaciones grupales
        patron_grupal = r'ADAPTACIONES_GRUPALES:(.*?)(?=SE√ëALES_DE_ALERTA|$)'
        match_grupal = re.search(patron_grupal, respuesta, re.DOTALL)
        
        if match_grupal:
            contenido_grupal = match_grupal.group(1)
            modificaciones = re.findall(r'- ([^:]+): (.+)', contenido_grupal)
            
            if modificaciones:
                adaptaciones.append({
                    'tipo': 'grupal',
                    'modificaciones': [
                        {'tipo': mod[0].strip(), 'descripcion': mod[1].strip()}
                        for mod in modificaciones
                    ]
                })
        
        return adaptaciones
    
    def _log_proceso(self, state: ActividadState, num_adaptaciones: int):
        """Log del proceso de adaptaciones"""
        print(f"\n‚úÖ [{self.name}] Adaptaciones espec√≠ficas generadas")
        print(f"Total adaptaciones: {num_adaptaciones}")
        
        # Mostrar resumen de adaptaciones individuales
        individuales = [a for a in state.adaptaciones_dua if a.get('tipo') == 'individual']
        if individuales:
            print("Estudiantes adaptados:")
            for adapt in individuales:
                print(f"  - {adapt['estudiante']}: {len(adapt.get('acciones_especificas', []))} acciones")


class ArquitectoTareasAgent(BaseAgent):
    """Agente que descompone la actividad en tareas paralelas y las asigna estrat√©gicamente"""
    
    def __init__(self):
        super().__init__("ArquitectoTareas", llm_required=True)
        
    def procesar(self, state: ActividadState) -> ActividadState:
        """Crea arquitectura de tareas paralelas con asignaciones estrat√©gicas"""
        
        # Validar inputs
        is_valid, msg = self.validar_inputs(state)
        if not is_valid:
            state.problemas_detectados.append(f"ArquitectoTareas: {msg}")
            return state
        
        # Actualizar estado
        state.agente_actual = self.name
        
        # Construir prompt para arquitectura de tareas
        prompt = self._construir_prompt_arquitectura(state)
        
        # Llamar a LLM
        respuesta = self.llamar_llm(prompt, temperatura=0.6)
        
        # Parsear y actualizar tareas
        tareas_generadas = self._parsear_tareas_paralelas(respuesta)
        state.tareas_paralelas = tareas_generadas
        
        # Log del proceso
        self._log_proceso(state, len(tareas_generadas))
        
        return state
    
    def validar_inputs(self, state: ActividadState) -> Tuple[bool, str]:
        """Valida que tenemos la informaci√≥n necesaria"""
        if not state.actividad_base:
            return False, "Se necesita actividad base del Ideador"
        
        if not state.perfiles_estudiantes:
            return False, "Se necesitan perfiles para asignar tareas"
            
        return True, ""
    
    def _construir_prompt_arquitectura(self, state: ActividadState) -> str:
        """Construye prompt para crear arquitectura de tareas paralelas"""
        
        # Informaci√≥n de estudiantes
        resumen_estudiantes = self._crear_resumen_estudiantes(state.perfiles_estudiantes)
        
        # Adaptaciones ya definidas
        adaptaciones_resumen = self._resumir_adaptaciones(state.adaptaciones_dua)
        
        prompt = f"""
ARQUITECTO_DE_TAREAS_PARALELAS:

Tu funci√≥n es dise√±ar la ESTRUCTURA OPERATIVA de la actividad, dividiendo en tareas que pueden ejecutarse SIMULT√ÅNEAMENTE en el aula.

ACTIVIDAD_BASE:
{state.actividad_base.get('titulo', '')}
{state.actividad_base.get('descripcion', '')}

ESTUDIANTES_DISPONIBLES (8 total):
{resumen_estudiantes}

ADAPTACIONES_YA_DEFINIDAS:
{adaptaciones_resumen}

PRINCIPIOS_PARA_TAREAS_PARALELAS:
1. M√°ximo 2-3 estudiantes por tarea (permite supervisi√≥n)
2. Tareas interdependientes pero ejecutables en paralelo
3. Roles que aprovechan fortalezas individuales
4. Puntos de sincronizaci√≥n para compartir resultados
5. Cada tarea debe tener resultado tangible para el objetivo com√∫n

EJEMPLOS_DE_ARQUITECTURAS_EXITOSAS:
{self._get_ejemplos_arquitecturas()}

RESPONDE EN ESTE FORMATO:

ARQUITECTURA_DE_TAREAS:

FASE_PREPARACI√ìN (15 min):
Tarea_1: [nombre_tarea]
- Estudiantes: [nombres espec√≠ficos y por qu√© son ideales]
- Funci√≥n: [qu√© hacen exactamente]
- Resultado: [qu√© entregan al grupo]
- Materiales: [qu√© necesitan]

Tarea_2: [nombre_tarea]
- Estudiantes: [nombres espec√≠ficos y por qu√© son ideales]  
- Funci√≥n: [qu√© hacen exactamente]
- Resultado: [qu√© entregan al grupo]
- Materiales: [qu√© necesitan]

FASE_EJECUCI√ìN (20-25 min):
[Repetir estructura para fase principal]

FASE_INTEGRACI√ìN (10 min):
[C√≥mo se juntan los resultados]

PUNTOS_DE_SINCRONIZACI√ìN:
- Minuto 15: [qu√© comparten/verifican]
- Minuto 30: [qu√© comparten/verifican]
- Final: [presentaci√≥n/s√≠ntesis]
"""
        
        return prompt
    
    def _crear_resumen_estudiantes(self, perfiles: Dict) -> str:
        """Crea resumen ejecutivo de estudiantes para asignaci√≥n de tareas"""
        if not perfiles or 'estudiantes' not in perfiles:
            return "Sin informaci√≥n de estudiantes"
            
        resumen = []
        for est in perfiles['estudiantes']:
            nombre = est.get('nombre', 'Estudiante')
            canal = est.get('canal_preferido', 'no especificado')
            apoyo = est.get('nivel_apoyo', 'no especificado')
            diag = est.get('diagnostico_formal', 'ninguno')
            temp = est.get('temperamento', 'no especificado')
            grup = est.get('agrupamiento_optimo', 'no especificado')
            
            # Identificar fortalezas para asignaci√≥n
            fortalezas = []
            if canal == 'visual':
                fortalezas.append("dise√±o/organizaci√≥n")
            elif canal == 'auditivo':
                fortalezas.append("comunicaci√≥n/presentaci√≥n")
            elif canal == 'kinest√©sico':
                fortalezas.append("manipulaci√≥n/construcci√≥n")
                
            if temp == 'reflexivo':
                fortalezas.append("an√°lisis/verificaci√≥n")
            elif temp == 'impulsivo':
                fortalezas.append("acci√≥n/dinamismo")
                
            if diag == 'altas_capacidades':
                fortalezas.append("tareas complejas/coordinaci√≥n")
                
            fortalezas_str = ", ".join(fortalezas) if fortalezas else "vers√°til"
            
            linea = f"{nombre}: {canal}/{apoyo} apoyo, {grup}, fortalezas: {fortalezas_str}"
            if diag != 'ninguno':
                linea += f" ({diag})"
                
            resumen.append(linea)
        
        return '\n'.join(resumen)
    
    def _resumir_adaptaciones(self, adaptaciones: List[Dict]) -> str:
        """Resume las adaptaciones para considerar en asignaci√≥n de tareas"""
        if not adaptaciones:
            return "Sin adaptaciones espec√≠ficas definidas"
            
        resumen = []
        for adapt in adaptaciones:
            if adapt.get('tipo') == 'individual':
                nombre = adapt.get('estudiante', 'Estudiante')
                num_acciones = len(adapt.get('acciones_especificas', []))
                resumen.append(f"{nombre}: {num_acciones} adaptaciones espec√≠ficas")
            elif adapt.get('tipo') == 'grupal':
                modificaciones = adapt.get('modificaciones', [])
                resumen.append(f"Grupo: {len(modificaciones)} modificaciones generales")
        
        return '\n'.join(resumen)
    
    def _get_ejemplos_arquitecturas(self) -> str:
        """Ejemplos de arquitecturas exitosas de tareas paralelas"""
        return """
EJEMPLO_SUPERMERCADO:
- Cajeros (3): Alex, Elena, Emma ‚Üí aprovecha visual/reflexivo para precisi√≥n
- Supervisor (1): Ana ‚Üí altas capacidades para coordinaci√≥n compleja  
- Clientes (4): resto ‚Üí roles activos que requieren movimiento

EJEMPLO_F√ÅBRICA_FRACCIONES:
- Mobiliario (2): Luis+Alex ‚Üí kinest√©sico+visual para construcci√≥n
- Carteles (2): Elena+Mar√≠a ‚Üí visual+auditivo para comunicaci√≥n
- Selecci√≥n (2): Ana+Sara ‚Üí an√°lisis y preparaci√≥n
- Paneles (2): Emma+Hugo ‚Üí dise√±o y creatividad
"""
    
    def _parsear_tareas_paralelas(self, respuesta: str) -> List[Dict]:
        """Extrae la arquitectura de tareas de la respuesta"""
        tareas = []
        
        # Buscar fases
        fases = ['FASE_PREPARACI√ìN', 'FASE_EJECUCI√ìN', 'FASE_INTEGRACI√ìN']
        
        for fase in fases:
            patron_fase = rf'{fase}[^:]*:(.*?)(?=FASE_|PUNTOS_DE_SINCRONIZACI√ìN:|$)'
            match_fase = re.search(patron_fase, respuesta, re.DOTALL)
            
            if match_fase:
                contenido_fase = match_fase.group(1)
                
                # Extraer tareas individuales dentro de la fase
                patron_tarea = r'Tarea_\d+: ([^\n]+)\n((?:- [^\n]+\n?)*)'
                matches_tareas = re.findall(patron_tarea, contenido_fase)
                
                for nombre_tarea, detalles in matches_tareas:
                    # Parsear detalles de la tarea
                    estudiantes = self._extraer_detalle(detalles, 'Estudiantes')
                    funcion = self._extraer_detalle(detalles, 'Funci√≥n')
                    resultado = self._extraer_detalle(detalles, 'Resultado')
                    materiales = self._extraer_detalle(detalles, 'Materiales')
                    
                    tareas.append({
                        'fase': fase.lower(),
                        'nombre': nombre_tarea.strip(),
                        'estudiantes': estudiantes,
                        'funcion': funcion,
                        'resultado_esperado': resultado,
                        'materiales': materiales
                    })
        
        return tareas
    
    def _extraer_detalle(self, texto: str, campo: str) -> str:
        """Extrae un campo espec√≠fico de los detalles de una tarea"""
        patron = rf'- {campo}: (.+)'
        match = re.search(patron, texto)
        return match.group(1).strip() if match else ""
    
    def _log_proceso(self, state: ActividadState, num_tareas: int):
        """Log del proceso de arquitectura"""
        print(f"\n‚úÖ [{self.name}] Arquitectura de tareas creada")
        print(f"Total tareas paralelas: {num_tareas}")
        
        # Agrupar por fases
        fases = {}
        for tarea in state.tareas_paralelas:
            fase = tarea.get('fase', 'sin_fase')
            if fase not in fases:
                fases[fase] = 0
            fases[fase] += 1
        
        for fase, cantidad in fases.items():
            print(f"  - {fase}: {cantidad} tareas")


class ValidadorCurricularAgent(BaseAgent):
    """Agente que verifica coherencia curricular y objetivos pedag√≥gicos"""
    
    def __init__(self):
        super().__init__("ValidadorCurricular", llm_required=True)
        
    def procesar(self, state: ActividadState) -> ActividadState:
        """Valida que la actividad cumple objetivos curriculares y es pedag√≥gicamente s√≥lida"""
        
        # Validar inputs
        is_valid, msg = self.validar_inputs(state)
        if not is_valid:
            state.problemas_detectados.append(f"ValidadorCurricular: {msg}")
            return state
        
        # Actualizar estado
        state.agente_actual = self.name
        
        # Construir prompt para validaci√≥n curricular
        prompt = self._construir_prompt_validacion(state)
        
        # Llamar a LLM
        respuesta = self.llamar_llm(prompt, temperatura=0.3)  # Baja creatividad, alta precisi√≥n
        
        # Parsear validaci√≥n
        validacion_resultado = self._parsear_validacion(respuesta)
        state.validacion_curricular = validacion_resultado
        
        # Si hay problemas cr√≠ticos, marcar para iteraci√≥n
        if validacion_resultado.get('problemas_criticos'):
            state.necesita_human_input = True
            state.problemas_detectados.extend(validacion_resultado['problemas_criticos'])
        
        # Log del proceso
        self._log_proceso(state, validacion_resultado)
        
        return state
    
    def validar_inputs(self, state: ActividadState) -> Tuple[bool, str]:
        """Valida que tenemos toda la informaci√≥n necesaria para validar"""
        if not state.actividad_base:
            return False, "Se necesita actividad base para validar"
        
        if not state.tareas_paralelas:
            return False, "Se necesitan tareas definidas para validar"
            
        return True, ""
    
    def _construir_prompt_validacion(self, state: ActividadState) -> str:
        """Construye prompt para validaci√≥n curricular exhaustiva"""
        
        # Extraer informaci√≥n clave
        titulo = state.actividad_base.get('titulo', 'Sin t√≠tulo')
        objetivo = state.actividad_base.get('objetivo_pedagogico', 'Sin objetivo')
        duracion = state.actividad_base.get('duracion', 'Sin duraci√≥n')
        
        # Resumen de tareas
        resumen_tareas = self._resumir_tareas_para_validacion(state.tareas_paralelas)
        
        prompt = f"""
VALIDADOR_CURRICULAR_4¬∫_PRIMARIA:

Tu funci√≥n es hacer una EVALUACI√ìN CR√çTICA de esta actividad educativa desde la perspectiva curricular y pedag√≥gica.

ACTIVIDAD_A_VALIDAR:
T√≠tulo: {titulo}
Tema: {state.tema}
Objetivo declarado: {objetivo}
Duraci√≥n: {duracion}

ESTRUCTURA_DE_TAREAS:
{resumen_tareas}

CRITERIOS_DE_VALIDACI√ìN_4¬∫_PRIMARIA:

CURRICULARES:
- ¬øEl objetivo es apropiado para 9-10 a√±os?
- ¬øLa complejidad cognitiva es adecuada?
- ¬øSe conecta con aprendizajes previos?
- ¬øPrepara para aprendizajes posteriores?

PEDAG√ìGICOS:
- ¬øLas tareas realmente logran el objetivo?
- ¬øEl tiempo asignado es realista?
- ¬øHay equilibrio entre desaf√≠o y √©xito?
- ¬øLos estudiantes entienden para qu√© sirve?

INCLUSIVOS:
- ¬øTodos los estudiantes pueden participar significativamente?
- ¬øLas adaptaciones mantienen el rigor acad√©mico?
- ¬øHay m√∫ltiples formas de mostrar aprendizaje?

EVALUACI√ìN_AUT√âNTICA:
- ¬øC√≥mo sabremos si aprendieron?
- ¬øLos productos finales reflejan comprensi√≥n real?

RESPONDE EN ESTE FORMATO:

VALIDACI√ìN_CURRICULAR:

FORTALEZAS_IDENTIFICADAS:
- [Lista de aspectos bien dise√±ados]

PROBLEMAS_MENORES:
- [Aspectos mejorables pero no cr√≠ticos]

PROBLEMAS_CR√çTICOS:
- [Aspectos que DEBEN cambiarse antes de implementar]

COHERENCIA_CURRICULAR:
- Apropiado para edad: S√ç/NO - [justificaci√≥n]
- Objetivo alcanzable: S√ç/NO - [justificaci√≥n]  
- Tiempo realista: S√ç/NO - [justificaci√≥n]
- Evaluaci√≥n clara: S√ç/NO - [justificaci√≥n]

RECOMENDACIONES_ESPEC√çFICAS:
- [Sugerencias concretas de mejora]

APROBACI√ìN_PEDAG√ìGICA:
APROBADA/APROBADA_CON_CAMBIOS/RECHAZADA - [Raz√≥n principal]
"""
        
        return prompt
    
    def _resumir_tareas_para_validacion(self, tareas: List[Dict]) -> str:
        """Crea resumen de tareas para an√°lisis curricular"""
        if not tareas:
            return "Sin tareas definidas"
            
        resumen = []
        for tarea in tareas:
            nombre = tarea.get('nombre', 'Tarea sin nombre')
            estudiantes = tarea.get('estudiantes', 'Sin asignar')
            funcion = tarea.get('funcion', 'Sin funci√≥n definida')
            resultado = tarea.get('resultado_esperado', 'Sin resultado definido')
            
            resumen.append(f"- {nombre}: {estudiantes} ‚Üí {funcion} ‚Üí {resultado}")
        
        return '\n'.join(resumen)
    
    def _parsear_validacion(self, respuesta: str) -> Dict:
        """Extrae los resultados de la validaci√≥n"""
        validacion = {}
        
        # Extraer secciones principales
        secciones = {
            'fortalezas': r'FORTALEZAS_IDENTIFICADAS:(.*?)(?=PROBLEMAS_MENORES:|$)',
            'problemas_menores': r'PROBLEMAS_MENORES:(.*?)(?=PROBLEMAS_CR√çTICOS:|$)', 
            'problemas_criticos': r'PROBLEMAS_CR√çTICOS:(.*?)(?=COHERENCIA_CURRICULAR:|$)',
            'coherencia': r'COHERENCIA_CURRICULAR:(.*?)(?=RECOMENDACIONES_ESPEC√çFICAS:|$)',
            'recomendaciones': r'RECOMENDACIONES_ESPEC√çFICAS:(.*?)(?=APROBACI√ìN_PEDAG√ìGICA:|$)',
            'aprobacion': r'APROBACI√ìN_PEDAG√ìGICA:(.*?)$'
        }
        
        # Procesar cada secci√≥n
        resultado_parsing = {}
        
        for seccion, patron in secciones.items():
            match = re.search(patron, contenido_respuesta, re.DOTALL)
            if match:
                resultado_parsing[seccion] = match.group(1).strip()
            else:
                resultado_parsing[seccion] = ""
        
        return resultado_parsing


def main():
    """Funci√≥n principal del sistema de agentes inteligente"""
    print("üéØ Sistema Multi-Agente Inteligente para Actividades Educativas")
    print("=" * 60)
    
    try:
        # Cargar perfiles de estudiantes
        perfiles_estudiantes = {
            "estudiantes": [
                {"id": "001", "nombre": "ALEX M.", "diagnostico_formal": "ninguno", "canal_preferido": "visual", "temperamento": "reflexivo", "ci_base": 102},
                {"id": "002", "nombre": "MAR√çA L.", "diagnostico_formal": "ninguno", "canal_preferido": "auditivo", "temperamento": "reflexivo"},
                {"id": "003", "nombre": "ELENA R.", "diagnostico_formal": "TEA_nivel_1", "canal_preferido": "visual", "temperamento": "reflexivo", "ci_base": 118},
                {"id": "004", "nombre": "LUIS T.", "diagnostico_formal": "TDAH_combinado", "canal_preferido": "kinest√©sico", "temperamento": "impulsivo", "ci_base": 102},
                {"id": "005", "nombre": "ANA V.", "diagnostico_formal": "altas_capacidades", "canal_preferido": "auditivo", "temperamento": "reflexivo", "ci_base": 141},
                {"id": "006", "nombre": "SARA M.", "diagnostico_formal": "ninguno", "canal_preferido": "auditivo", "temperamento": "equilibrado", "ci_base": 115},
                {"id": "007", "nombre": "EMMA K.", "diagnostico_formal": "ninguno", "canal_preferido": "visual", "temperamento": "reflexivo", "ci_base": 132},
                {"id": "008", "nombre": "HUGO P.", "diagnostico_formal": "ninguno", "canal_preferido": "visual", "temperamento": "equilibrado", "ci_base": 114}
            ]
        }
        
        # Solicitar tema
        print("\nüìö Configuraci√≥n de la actividad:")
        tema = input("Tema de la actividad: ").strip()
        
        if not tema:
            print("‚ùå Tema es obligatorio")
            return
        
        # Configurar restricciones b√°sicas
        restricciones = {
            "duracion_max": 45,
            "materiales": "b√°sicos",
            "espacio_amplio": False
        }
        
        # Crear estado inicial
        estado_inicial = ActividadState(
            tema=tema,
            perfiles_estudiantes=perfiles_estudiantes,
            restricciones=restricciones
        )
        
        # Crear orquestador y ejecutar pipeline
        print(f"\nü§ñ Iniciando sistema multi-agente...")
        orquestador = OrquestadorAgent()
        
        # Ejecutar pipeline completo
        estado_final = orquestador.procesar(estado_inicial)
        
        # Mostrar resultados
        print(f"\n‚úÖ Proceso completado:")
        print(f"Estado final: {estado_final.estado}")
        print(f"Iteraciones realizadas: {estado_final.iteracion}")
        
        if estado_final.actividad_base:
            print(f"‚úÖ Actividad base generada")
            
        if estado_final.adaptaciones_dua:
            print(f"‚úÖ Adaptaciones DUA: {len(estado_final.adaptaciones_dua)}")
            
        if estado_final.tareas_paralelas:
            print(f"‚úÖ Tareas paralelas: {len(estado_final.tareas_paralelas)}")
            
        if estado_final.problemas_detectados:
            print(f"‚ö†Ô∏è  Problemas detectados: {len(estado_final.problemas_detectados)}")
            for problema in estado_final.problemas_detectados:
                print(f"   - {problema}")
        
        # Guardar resultado
        filename = f"actividad_inteligente_{tema.replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        resultado_final = {
            'id': estado_final.id,
            'tema': estado_final.tema,
            'estado': estado_final.estado.value,
            'iteraciones': estado_final.iteracion,
            'timestamp': estado_final.timestamp,
            'actividad_base': estado_final.actividad_base,
            'adaptaciones_dua': estado_final.adaptaciones_dua,
            'tareas_paralelas': estado_final.tareas_paralelas,
            'validacion_curricular': estado_final.validacion_curricular,
            'recursos_necesarios': estado_final.recursos_necesarios,
            'problemas_detectados': estado_final.problemas_detectados,
            'historial_cambios': estado_final.historial_cambios
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(resultado_final, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"\nüíæ Resultado guardado en: {filename}")
        
    except KeyboardInterrupt:
        print("\n‚ùå Proceso interrumpido por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error durante ejecuci√≥n: {e}")
        logger.error(f"Error en main(): {e}")


if __name__ == "__main__":
    main()

