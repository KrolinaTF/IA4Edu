#!/usr/bin/env python3
"""
Sistema de Agentes Inteligente con CrewAI + Ollama
- Few-shot estrat√©gico con ejemplos k_
- Human-in-the-loop inteligente con an√°lisis de contexto
- Flujo de 4 fases con LLMs reales
"""

import json
import os
from datetime import datetime
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
import logging
import re

# ================================================================================
# CONFIGURACI√ìN CR√çTICA DE OLLAMA + CREWAI (DEBE IR ANTES DE LOS IMPORTS)
# ================================================================================

# Configurar variables de entorno para evitar errores con CrewAI
os.environ["OLLAMA_BASE_URL"] = "http://192.168.1.10:11434"
os.environ["OLLAMA_HOST"] = "http://192.168.1.10:11434"  
os.environ["OLLAMA_API_BASE"] = "http://192.168.1.10:11434"
os.environ["LITELLM_LOG"] = "DEBUG"
os.environ["LITELLM_PROVIDER"] = "ollama"  # CR√çTICO: Definir provider
os.environ["OPENAI_API_KEY"] = "not-needed"  # Placeholder requerido
os.environ["OPENAI_MODEL_NAME"] = "ollama/qwen3:latest"  # Con prefijo
os.environ["CREWAI_DISABLE_TELEMETRY"] = "true"
os.environ["HTTPX_TIMEOUT"] = "120"

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger("AgentesInteligente")

try:
    from crewai import Agent, Task, Crew, Process
    from langchain_community.llms import Ollama
    import litellm
    logger.info("‚úÖ CrewAI y dependencias importadas correctamente")
except ImportError as e:
    logger.error(f"‚ùå Error importando dependencias: {e}")
    logger.error("üí° Instala: pip install crewai langchain-community")
    raise

# Sistema limpio usando solo langchain_community.llms.Ollama

@dataclass
class ActividadEducativa:
    """Estructura de datos para actividad educativa completa"""
    id: str
    titulo: str
    materia: str
    tema: str
    clima: str  # simple, juego, narrativa, complejo
    modalidad_trabajo: str  # individual, grupal, mixta
    contenido_completo: str
    tareas_estudiantes: Dict[str, str]
    materiales: List[str]
    duracion: str
    fases: List[str]
    metadatos: Dict
    timestamp: str

class CargadorEjemplosK:
    """Carga ejemplos k_ reales como few-shot estrat√©gico"""
    
    def __init__(self, directorio_ejemplos: str = "."):
        self.directorio = directorio_ejemplos
        self.ejemplos_k = {}
        self.metadatos_ejemplos = {}
        self._cargar_ejemplos_k()
    
    def _cargar_ejemplos_k(self):
        """Carga ejemplos k_ desde archivos reales"""
        archivos_k = [
            "actividades_generadas/k_celula.txt",
            "actividades_generadas/k_feria_acertijos.txt", 
            "actividades_generadas/k_sonnet_supermercado.txt",
            "actividades_generadas/k_piratas.txt"
        ]
        
        for archivo in archivos_k:
            ruta_completa = os.path.join(self.directorio, archivo)
            if os.path.exists(ruta_completa):
                try:
                    with open(ruta_completa, 'r', encoding='utf-8') as f:
                        contenido = f.read()
                        nombre_ejemplo = os.path.basename(archivo).replace('.txt', '')
                        self.ejemplos_k[nombre_ejemplo] = contenido
                        
                        # Extraer metadatos del ejemplo
                        self.metadatos_ejemplos[nombre_ejemplo] = self._extraer_metadatos(contenido)
                        logger.info(f"‚úÖ Cargado ejemplo k_: {nombre_ejemplo}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Error cargando {archivo}: {e}")
        
        if not self.ejemplos_k:
            logger.warning("‚ö†Ô∏è No se encontraron ejemplos k_. Usando ejemplo b√°sico.")
            self._crear_ejemplo_fallback()
    
    def _extraer_metadatos(self, contenido: str) -> Dict[str, Any]:
        """Extrae metadatos pedag√≥gicos del ejemplo k_"""
        metadatos = {
            "materia_detectada": "general",
            "modalidad_detectada": "mixta",
            "tipo_actividad": "pr√°ctica",
            "estudiantes_mencionados": [],
            "interdependencia": False,
            "materiales_fisicos": []
        }
        
        contenido_lower = contenido.lower()
        
        # Detectar materia
        if any(palabra in contenido_lower for palabra in ["matem√°tica", "n√∫mero", "fracci√≥n", "√°rea", "volumen"]):
            metadatos["materia_detectada"] = "matematicas"
        elif any(palabra in contenido_lower for palabra in ["c√©lula", "ciencia", "biolog√≠a", "org√°nulo"]):
            metadatos["materia_detectada"] = "ciencias"
        elif any(palabra in contenido_lower for palabra in ["cuento", "historia", "narrativa", "lengua"]):
            metadatos["materia_detectada"] = "lengua"
        
        # Detectar modalidad
        if "grupo" in contenido_lower or "equipo" in contenido_lower:
            metadatos["modalidad_detectada"] = "grupal"
        elif "individual" in contenido_lower or "cada uno" in contenido_lower:
            metadatos["modalidad_detectada"] = "individual"
        
        # Detectar estudiantes mencionados
        estudiantes = re.findall(r'(Alex|Elena|Luis|Ana|Sara|Hugo|Emma|Mar√≠a)', contenido, re.IGNORECASE)
        metadatos["estudiantes_mencionados"] = list(set(estudiantes))
        
        # Detectar interdependencia
        if any(palabra in contenido_lower for palabra in ["necesita", "usa", "verifica", "depende", "entre todos"]):
            metadatos["interdependencia"] = True
        
        # Detectar materiales f√≠sicos
        materiales = re.findall(r'(regla|papel|bloques|tijeras|pegamento|pinturas|cart√≥n|objetos)', contenido_lower)
        metadatos["materiales_fisicos"] = list(set(materiales))
        
        return metadatos
    
    def _crear_ejemplo_fallback(self):
        """Crea ejemplo b√°sico si no hay ejemplos k_"""
        self.ejemplos_k["k_basico"] = """
Actividad B√°sica Colaborativa:
- Alex: Organizar materiales en mesa por categor√≠as
- Elena: Medir objetos usando regla y anotar medidas
- Luis: Construir estructura con bloques seg√∫n medidas de Elena
- Ana: Verificar que medidas de Elena coinciden con construcci√≥n de Luis
- Sara: Documentar proceso completo en papel
- Hugo: Preparar presentaci√≥n de resultados grupales
Interdependencia: Ana necesita medidas de Elena, Luis usa medidas de Elena, Sara documenta trabajo de todos.
        """
        self.metadatos_ejemplos["k_basico"] = {
            "materia_detectada": "general",
            "modalidad_detectada": "grupal", 
            "tipo_actividad": "pr√°ctica",
            "estudiantes_mencionados": ["Alex", "Elena", "Luis", "Ana", "Sara", "Hugo"],
            "interdependencia": True,
            "materiales_fisicos": ["regla", "papel", "bloques"]
        }
    
    def seleccionar_ejemplo_estrategico(self, materia: str, tema: str, modalidad: str = "mixta") -> str:
        """Selecciona ejemplo k_ m√°s relevante estrat√©gicamente"""
        mejor_ejemplo = None
        mejor_puntuacion = 0
        
        for nombre, metadatos in self.metadatos_ejemplos.items():
            puntuacion = 0
            
            # Puntuaci√≥n por materia
            if metadatos["materia_detectada"] == materia.lower():
                puntuacion += 5
            elif metadatos["materia_detectada"] == "general":
                puntuacion += 1
            
            # Puntuaci√≥n por modalidad
            if metadatos["modalidad_detectada"] == modalidad:
                puntuacion += 3
            elif metadatos["modalidad_detectada"] == "mixta":
                puntuacion += 1
            
            # Puntuaci√≥n por interdependencia (siempre deseable)
            if metadatos["interdependencia"]:
                puntuacion += 2
            
            # Puntuaci√≥n por materiales f√≠sicos
            if len(metadatos["materiales_fisicos"]) > 2:
                puntuacion += 2
            
            if puntuacion > mejor_puntuacion:
                mejor_puntuacion = puntuacion
                mejor_ejemplo = nombre
        
        ejemplo_seleccionado = mejor_ejemplo or list(self.ejemplos_k.keys())[0]
        logger.info(f"üìã Ejemplo k_ seleccionado: {ejemplo_seleccionado} (puntuaci√≥n: {mejor_puntuacion})")
        
        return self.ejemplos_k[ejemplo_seleccionado]

class SistemaAgentesInteligente:
    """Sistema principal con CrewAI + Ollama + Few-shot estrat√©gico + Human-in-the-loop"""
    
    def __init__(self, ollama_host: str = "192.168.1.10"):
        self.ollama_host = ollama_host
        self.cargador_ejemplos = CargadorEjemplosK()
        
        # Configurar LiteLLM para Ollama
        self._configurar_litellm()
        
        # Crear LLMs espec√≠ficos para cada agente
        self._crear_llms_especificos()
        
        # Crear agentes especializados
        self._crear_agentes()
        
        logger.info("‚úÖ Sistema de Agentes Inteligente inicializado")
    
    def _configurar_litellm(self):
        """Configura LiteLLM usando el patr√≥n EXACTO que funciona"""
        try:
            import litellm
            
            logger.info("üîß Configurando LiteLLM para Ollama local...")
            
            # Configurar variables espec√≠ficas para LiteLLM + Ollama (patr√≥n exitoso)
            os.environ["OLLAMA_API_BASE"] = f"http://{self.ollama_host}:11434"
            os.environ["OLLAMA_BASE_URL"] = f"http://{self.ollama_host}:11434"
            
            logger.info("‚úÖ LiteLLM configurado con patr√≥n exitoso")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Advertencia configurando LiteLLM: {e}")
    
    def _crear_llms_especificos(self):
        """Crea LLMs espec√≠ficos para cada agente usando patr√≥n exitoso"""
        try:
            # Usar el patr√≥n EXACTO que funciona en sistema_agentes_crewai.py
            modelos = ["qwen3:latest", "qwen2:latest", "mistral:latest"]
            
            # Mapear modelos para LiteLLM (patr√≥n que funciona)
            for modelo in modelos:
                litellm.model_cost[f"ollama/{modelo}"] = {
                    "input_cost_per_token": 0,
                    "output_cost_per_token": 0,
                    "max_tokens": 4096
                }
            
            # Crear LLMs con patr√≥n exitoso: ollama/{modelo} + base_url
            logger.info("üîÑ Creando LLMs con patr√≥n exitoso:")
            
            self.llm_clima = Ollama(
                model=f"ollama/qwen3:latest",
                base_url=f"http://{self.ollama_host}:11434"
            )
            
            self.llm_estructurador = Ollama(
                model=f"ollama/qwen2:latest", 
                base_url=f"http://{self.ollama_host}:11434"
            )
            
            self.llm_tareas = Ollama(
                model=f"ollama/mistral:latest",
                base_url=f"http://{self.ollama_host}:11434"
            )
            
            self.llm_repartidor = Ollama(
                model=f"ollama/qwen3:latest",
                base_url=f"http://{self.ollama_host}:11434"
            )
            
            logger.info("‚úÖ LLMs espec√≠ficos creados con patr√≥n exitoso")
        except Exception as e:
            logger.error(f"‚ùå Error creando LLMs: {e}")
            raise
    
    def _crear_agentes(self):
        """Crea los agentes especializados con detector inteligente y validador final"""
        
        # DETECTOR INTELIGENTE (CENTRAL)
        self.agente_detector = Agent(
            role="Detector Inteligente de Contexto Pedag√≥gico",
            goal="Analizar cualquier prompt educativo y extraer materia, tema, modalidad, limitaciones y preferencias pedag√≥gicas",
            backstory="""Eres un experto en an√°lisis curricular que puede interpretar cualquier descripci√≥n 
            educativa en lenguaje natural. Identificas materias (incluso con sin√≥nimos como 'expresi√≥n pl√°stica' = arte), 
            temas espec√≠ficos, modalidades de trabajo, limitaciones de tiempo/materiales y preferencias pedag√≥gicas. 
            Tu an√°lisis gu√≠a a todos los dem√°s agentes proporcion√°ndoles contexto estructurado.""",
            llm=self.llm_clima,  # Usa el LLM m√°s capaz para an√°lisis
            verbose=True,
            allow_delegation=False
        )
        
        # VALIDADOR FINAL (GUARDI√ÅN DE CALIDAD)
        self.agente_validador = Agent(
            role="Validador de Calidad Pedag√≥gica",
            goal="Garantizar que cada fase cumple est√°ndares k_ de especificidad, coherencia y practicidad",
            backstory="""Eres un validador pedag√≥gico experto que aplica est√°ndares de calidad rigurosos. 
            Tu funci√≥n es rechazar outputs gen√©ricos, vagas o impracticables. Exiges tareas concretas 
            con verbos de acci√≥n espec√≠ficos ('medir 3 objetos' NO 'investigar tema'), cantidades definidas 
            y resultados medibles. Comparas con ejemplos k_ para mantener calidad.""",
            llm=self.llm_estructurador,
            verbose=True,
            allow_delegation=False
        )
        
        # AGENTES ESPECIALISTAS (NIVEL OPERATIVO)
        self.agente_clima = Agent(
            role="Especialista en Clima Pedag√≥gico",
            goal="Determinar el tipo de actividad (simple, juego, narrativa, complejo) m√°s adecuado seg√∫n contexto",
            backstory="""Eres un experto en psicopedagog√≠a que analiza contextos educativos para determinar 
            qu√© tipo de actividad funcionar√° mejor. Consideras factores como tiempo disponible, 
            materiales, caracter√≠sticas de estudiantes y preferencias del docente. Reportas al Coordinador.""",
            llm=self.llm_clima,
            verbose=True,
            allow_delegation=False
        )
        
        self.agente_estructurador = Agent(
            role="Arquitecto de Experiencias Educativas", 
            goal="Dise√±ar la estructura espec√≠fica de la actividad usando ejemplos k_ como referencia",
            backstory="""Eres un dise√±ador de experiencias educativas que crea actividades espec√≠ficas 
            y detalladas. Usas ejemplos exitosos como inspiraci√≥n pero adaptas todo al contexto espec√≠fico. 
            Siempre incluyes materiales concretos, duraci√≥n realista y objetivos claros. Tu trabajo debe 
            pasar la validaci√≥n de coherencia y especificidad.""",
            llm=self.llm_estructurador,
            verbose=True,
            allow_delegation=False
        )
        
        self.agente_tareas = Agent(
            role="Especialista en Desglose Pedag√≥gico",
            goal="Descomponer actividades en tareas espec√≠ficas y concretas para cada estudiante",
            backstory="""Eres un experto en crear tareas educativas espec√≠ficas y medibles. 
            Evitas roles abstractos como 'coordinador' y prefieres tareas concretas como 
            'medir 3 objetos con regla'. Cada tarea debe ser clara y ejecutable. El Validador rechazar√° 
            tu trabajo si es gen√©rico.""",
            llm=self.llm_tareas,
            verbose=True,
            allow_delegation=False
        )
        
        self.agente_repartidor = Agent(
            role="Especialista en Inclusi√≥n y Adaptaci√≥n",
            goal="Asignar tareas de forma equilibrada considerando perfiles individuales de estudiantes", 
            backstory="""Eres un especialista en educaci√≥n inclusiva que conoce las necesidades espec√≠ficas 
            de estudiantes con TEA, TDAH, altas capacidades, etc. Asignas tareas considerando estilos 
            de aprendizaje y necesidades individuales para maximizar participaci√≥n y aprendizaje.""",
            llm=self.llm_repartidor,
            verbose=True,
            allow_delegation=False
        )
        
        # COORDINADOR DE PARALELISMO (OPCIONAL - solo se activa cuando detecta oportunidades)
        self.agente_coordinador_paralelismo = Agent(
            role="Coordinador de Trabajo Paralelo",
            goal="Identificar oportunidades naturales de trabajo simult√°neo y coordinaci√≥n entre estudiantes",
            backstory="""Eres un especialista en din√°micas de grupo que detecta cu√°ndo las tareas pueden 
            ejecutarse simult√°neamente sin forzar interdependencias artificiales. Solo intervienes cuando 
            identificas trabajo genuino en paralelo (como tu ejemplo de la f√°brica de fracciones con 4 estaciones 
            simult√°neas). Respetas el trabajo individual cuando es apropiado, pero optimizas la colaboraci√≥n 
            cuando es natural y productiva.""",
            llm=self.llm_estructurador,  # Usar el mismo LLM que el estructurador
            verbose=True,
            allow_delegation=False
        )
    
    def detectar_contexto_multidimensional(self, prompt_profesor: str) -> Dict[str, Any]:
        """Detector libre que analiza m√∫ltiples dimensiones y genera opciones din√°micas"""
        
        tarea_deteccion = Task(
            description=f"""
Analiza este prompt educativo desde m√∫ltiples dimensiones y genera opciones contextuales:

PROMPT DEL PROFESOR: "{prompt_profesor}"

AN√ÅLISIS MULTIDIMENSIONAL:
1. CONTENIDO: ¬øQu√© materia, tema, nivel de complejidad conceptual?
2. NARRATIVA: ¬øQu√© nivel narrativo necesita? (historia envolvente, contexto simple, sin narrativa)
3. METODOLOG√çA: ¬øQu√© tipo de actividades? (talleres, debates, experimentos, creaci√≥n, etc.)
4. ESTRUCTURA TEMPORAL: ¬øC√≥mo organizar el tiempo? (sesi√≥n √∫nica, varios d√≠as, por bloques)
5. MODALIDAD SOCIAL: ¬øC√≥mo trabajar? (individual, parejas, grupos peque√±os, clase completa, mixto)
6. PRODUCTOS: ¬øQu√© debe generar? (contenido real como guiones, organizaciones, ambos)
7. ADAPTACIONES: ¬øQu√© necesidades espec√≠ficas detectas?

GENERA OPCIONES DIN√ÅMICAS espec√≠ficas para ESTA actividad:
Bas√°ndote en el an√°lisis, prop√≥n 2-3 preguntas clave que el profesor necesita decidir.

FORMATO DE RESPUESTA:
```json
{{
    "contexto_base": {{
        "materia": "detectado",
        "tema": "detectado",
        "complejidad_conceptual": "alta/media/baja"
    }},
    "dimensiones": {{
        "narrativa": {{"nivel": "alta/media/baja/ninguna", "tipo": "descripci√≥n"}},
        "metodologia": {{"principal": "tipo_principal", "secundarias": ["tipo1", "tipo2"]}},
        "estructura_temporal": {{"tipo": "sesion_unica/varios_dias/bloques", "flexibilidad": "alta/media/baja"}},
        "modalidad_social": {{"principal": "grupal/individual/mixta", "variaciones": ["detalles"]}},
        "productos_esperados": ["producto1", "producto2"],
        "adaptaciones_detectadas": ["necesidad1", "necesidad2"]
    }},
    "opciones_dinamicas": [
        "Pregunta espec√≠fica 1 para esta actividad",
        "Pregunta espec√≠fica 2 para esta actividad",
        "Pregunta espec√≠fica 3 si es necesaria"
    ],
    "recomendacion_ia": "Mi recomendaci√≥n basada en el an√°lisis completo"
}}
```

Genera opciones ESPEC√çFICAS para este contexto, no preguntas gen√©ricas.
            """,
            agent=self.agente_detector,
            expected_output="JSON con an√°lisis multidimensional y opciones din√°micas"
        )
        
        # Ejecutar detecci√≥n
        resultado = Task(
            description=tarea_deteccion.description,
            agent=self.agente_detector,
            expected_output=tarea_deteccion.expected_output
        )
        
        crew_detector = Crew(
            agents=[self.agente_detector],
            tasks=[resultado],
            process=Process.sequential,
            verbose=True
        )
        
        contexto_detectado = crew_detector.kickoff()
        logger.info(f"üîç Contexto detectado: {str(contexto_detectado)[:200]}...")
        
        # Convertir CrewOutput a string para procesamiento
        if hasattr(contexto_detectado, 'raw'):
            return str(contexto_detectado.raw)
        else:
            return str(contexto_detectado)

    def generar_actividad_desde_prompt(self, prompt_profesor: str) -> ActividadEducativa:
        """Genera actividad con flujo por fases y validaci√≥n humana"""
        
        print("\nüéØ INICIANDO FLUJO POR FASES CON VALIDACI√ìN HUMANA")
        print("="*60)
        
        # FASE 0: DETECCI√ìN MULTIDIMENSIONAL
        print("\nüîç FASE 0: ANALIZANDO TU DESCRIPCI√ìN...")
        contexto_detectado = self.detectar_contexto_multidimensional(prompt_profesor)
        
        # VALIDACI√ìN PREVIA: Contexto general y recomendaci√≥n
        contexto_aprobado = self._validar_contexto_general(contexto_detectado)
        
        # FASE 1: OPCIONES DIN√ÅMICAS (solo si contexto aprobado)
        opciones_decididas = self._fase_opciones_dinamicas(contexto_aprobado)
        
        # VALIDACI√ìN 1: Despu√©s de decidir opciones espec√≠ficas
        if not self._validacion_humana_intermedia("opciones espec√≠ficas", opciones_decididas):
            opciones_decididas = self._refinar_opciones(contexto_aprobado, opciones_decididas)
        
        # FASE 2: ESTRUCTURA + ORGANIZACI√ìN (SIN VALIDACI√ìN INTERMEDIA)
        estructura_completa = self._fase_estructura_libre(opciones_decididas, contexto_detectado)
        
        # VALIDACI√ìN 2: Despu√©s de estructura completa
        if not self._validacion_humana_intermedia("estructura y organizaci√≥n", estructura_completa):
            estructura_completa = self._refinar_estructura(contexto_detectado, estructura_completa)
        
        # FASE 3: ACTIVIDAD FINAL CON ITERACI√ìN
        actividad_final = self._crear_actividad_final_iterativa(estructura_completa, contexto_detectado)
        
        return actividad_final
    
    def _validar_contexto_general(self, contexto_detectado) -> Dict[str, Any]:
        """Validaci√≥n previa: mostrar recomendaci√≥n general antes de preguntas espec√≠ficas"""
        
        print(f"\n‚úÖ VALIDACI√ìN PREVIA: CONTEXTO GENERAL")
        print("=" * 60)
        
        # Extraer an√°lisis del detector (igual que en _fase_opciones_dinamicas)
        try:
            import json
            import re
            
            contexto_str = str(contexto_detectado).encode('utf-8', errors='ignore').decode('utf-8')
            json_match = re.search(r'```json\s*({.*?})\s*```', contexto_str, re.DOTALL | re.MULTILINE)
            
            if json_match:
                analisis = json.loads(json_match.group(1))
            else:
                print(f"üìù Contexto recibido: {contexto_str[:500]}...")
                analisis = {
                    "contexto_base": {"materia": "detectado", "tema": "detectado"},
                    "recomendacion_ia": "Basado en tu descripci√≥n, recomiendo una actividad pr√°ctica."
                }
                
        except Exception as e:
            print(f"‚ö†Ô∏è Error procesando contexto: {e}")
            analisis = {
                "contexto_base": {"materia": "error", "tema": "error"},
                "recomendacion_ia": "Hubo un error analizando tu descripci√≥n."
            }
        
        # Mostrar contexto detectado
        print(f"\nüìã CONTEXTO DETECTADO:")
        if "contexto_base" in analisis:
            base = analisis["contexto_base"]
            print(f"   üìö Materia: {base.get('materia', 'no detectado')}")
            print(f"   üéØ Tema: {base.get('tema', 'no detectado')}")
            print(f"   üìà Complejidad: {base.get('complejidad_conceptual', 'no detectado')}")
        
        # Mostrar recomendaci√≥n de la IA
        if "recomendacion_ia" in analisis:
            print(f"\nü§ñ RECOMENDACI√ìN GENERAL: {analisis['recomendacion_ia']}")
        
        # Validaci√≥n del contexto general
        print(f"\nü§î ¬øEste enfoque general te parece correcto?")
        print(f"   (Si dices 'no', podr√© cambiar completamente el enfoque)")
        
        respuesta = input(f"üó£Ô∏è (s√≠/no): ").strip().lower()
        
        if respuesta in ['s', 's√≠', 'si', 'vale', 'ok', 'bien']:
            print(f"\n‚úÖ ¬°Perfecto! Continuemos con opciones espec√≠ficas.")
            return analisis
        else:
            print(f"\nüîÑ ¬øQu√© enfoque prefieres?")
            feedback_general = input(f"üó£Ô∏è Tu respuesta: ").strip()
            
            # Re-analizar SOLO con el feedback del usuario, no el contexto original
            contexto_refinado = self.detectar_contexto_multidimensional(feedback_general)
            
            # Mostrar el NUEVO contexto basado en el feedback
            print(f"\n‚úÖ NUEVO CONTEXTO BASADO EN TU FEEDBACK:")
            print("=" * 60)
            
            # Procesar contexto refinado
            try:
                import json
                contexto_str = str(contexto_refinado).encode('utf-8', errors='ignore').decode('utf-8')
                json_match = re.search(r'```json\s*({.*?})\s*```', contexto_str, re.DOTALL | re.MULTILINE)
                
                if json_match:
                    analisis_refinado = json.loads(json_match.group(1))
                else:
                    analisis_refinado = {
                        "contexto_base": {"materia": "personalizado", "tema": feedback_general[:50]},
                        "recomendacion_ia": f"Basado en tu feedback: {feedback_general}"
                    }
            except:
                analisis_refinado = {
                    "contexto_base": {"materia": "personalizado", "tema": feedback_general[:50]},
                    "recomendacion_ia": f"Enfoque personalizado: {feedback_general}"
                }
            
            # Mostrar el nuevo an√°lisis
            if "contexto_base" in analisis_refinado:
                base = analisis_refinado["contexto_base"]
                print(f"   üìö Materia: {base.get('materia', 'personalizado')}")
                print(f"   üéØ Tema: {base.get('tema', feedback_general[:50])}")
                print(f"   üìà Complejidad: {base.get('complejidad_conceptual', 'seg√∫n tu enfoque')}")
            
            if "recomendacion_ia" in analisis_refinado:
                print(f"\nü§ñ NUEVA RECOMENDACI√ìN: {analisis_refinado['recomendacion_ia']}")
            
            # Confirmaci√≥n del nuevo enfoque (sin recursi√≥n infinita)
            print(f"\nü§î ¬øEste nuevo enfoque refleja mejor lo que quieres?")
            confirmacion = input(f"üó£Ô∏è (s√≠/no): ").strip().lower()
            
            if confirmacion in ['s', 's√≠', 'si', 'vale', 'ok', 'bien']:
                print(f"\n‚úÖ ¬°Perfecto! Continuemos con este enfoque personalizado.")
                return analisis_refinado
            else:
                print(f"\n‚ö†Ô∏è Volvamos al enfoque original entonces.")
                return analisis
    
    def _fase_opciones_dinamicas(self, contexto_aprobado) -> Dict[str, Any]:
        """Fase 1: Preguntas espec√≠ficas sobre actividad (contexto ya validado)"""
        
        print(f"\nüß† FASE 1: OPCIONES ESPEC√çFICAS")
        print("-" * 50)
        
        # Extraer an√°lisis del detector
        try:
            import json
            # Convertir contexto_aprobado a string si es necesario
            contexto_str = str(contexto_aprobado)
            if True:  # Siempre procesar como string
                # Buscar JSON en el string
                import re
                json_match = re.search(r'```json\s*(\{.*?\})\s*```', contexto_str, re.DOTALL | re.MULTILINE)
                if json_match:
                    analisis = json.loads(json_match.group(1))
                else:
                    # Fallback si no encuentra JSON
                    print(f"üìù Contexto recibido: {contexto_str[:500]}...")
                    analisis = {
                        "contexto_base": {"materia": "detectado", "tema": "detectado"},
                        "opciones_dinamicas": ["¬øQu√© tipo de actividad prefieres?"],
                        "recomendacion_ia": "Basado en tu descripci√≥n, recomiendo una actividad pr√°ctica."
                    }
            else:
                analisis = {
                    "contexto_base": {"materia": "no detectado", "tema": "no detectado"},
                    "opciones_dinamicas": ["¬øC√≥mo te gustar√≠a enfocar esta actividad?"],
                    "recomendacion_ia": "No pude analizar tu descripci√≥n completamente."
                }
                
        except Exception as e:
            print(f"\u26a0\ufe0f Error procesando contexto: {e}")
            print(f"\ud83d\udcdd Contexto bruto: {str(contexto_detectado)[:300]}...")
            analisis = {
            "contexto_base": {"materia": "error", "tema": "error"},
            "opciones_dinamicas": ["¬øC√≥mo te gustar√≠a enfocar esta actividad?"],
            "recomendacion_ia": "Hubo un error analizando tu descripci√≥n, pero puedo ayudarte."
        }
        
        # El contexto ya fue mostrado y aprobado en la validaci√≥n previa
        print(f"\nüéØ Ahora vamos con las opciones espec√≠ficas:")
        
        # Hacer preguntas din√°micas
        decisiones = {}
        opciones_dinamicas = analisis.get("opciones_dinamicas", [])
        
        for i, pregunta in enumerate(opciones_dinamicas, 1):
            print(f"\nü§î PREGUNTA {i}: {pregunta}")
            respuesta = input(f"üó£\ufe0f Tu respuesta: ").strip()
            decisiones[f"decision_{i}"] = respuesta
        
        # Si no hay opciones din√°micas, hacer una pregunta gen√©rica
        if not opciones_dinamicas:
            print(f"\nü§î ¬øC√≥mo te gustar√≠a enfocar esta actividad?")
            respuesta = input(f"üó£\ufe0f Tu respuesta: ").strip()
            decisiones["enfoque_general"] = respuesta
        
        return {
            "analisis_detector": analisis,
            "decisiones_profesor": decisiones
        }
    
    def _validacion_humana_intermedia(self, fase: str, contenido: Any) -> bool:
        """Validaci√≥n humana intermedia m√°s natural"""
        
        print(f"\n‚úÖ VALIDACI√ìN: {fase.upper()}")
        print("-" * 40)
        print(f"\u00bfTe parece bien el enfoque hasta ahora?")
        
        respuesta = input(f"üó£\ufe0f (s√≠/no/cambiar): ").strip().lower()
        
        if respuesta in ['s', 's√≠', 'si', 'vale', 'ok', 'bien']:
            return True
        elif respuesta in ['no', 'cambiar', 'modificar']:
            return False
        else:
            print("\u26a0\ufe0f No entend√≠ tu respuesta, asumir√© que est√° bien.")
            return True
    
    def _refinar_opciones(self, contexto_original: Dict, opciones_actuales: Dict) -> Dict:
        """Refina opciones bas√°ndose en feedback del profesor"""
        
        print(f"\nüîÑ REFINANDO OPCIONES...")
        feedback = input(f"üó£\ufe0f ¬øQu√© te gustar√≠a cambiar?: ").strip()
        
        # Re-analizar con el feedback
        contexto_refinado = self.detectar_contexto_multidimensional(
            f"Contexto original: {contexto_original}\nFeedback del profesor: {feedback}"
        )
        
        # Aplicar feedback directamente, no volver a preguntar
        return {
            "analisis_detector": contexto_refinado,
            "decisiones_profesor": {
                "feedback_aplicado": feedback,
                "contexto_refinado": "El profesor quiere cambiar el enfoque seg√∫n su feedback"
            }
        }
    
    def _fase_estructura_libre(self, opciones_decididas: Dict, contexto_detectado: Dict) -> Dict[str, Any]:
        """Fase 2: Genera estructura completa basada en decisiones del profesor"""
        
        print(f"\nüè† FASE 2: CREANDO ESTRUCTURA COMPLETA")
        print("-" * 50)
        
        # Crear prompt inteligente basado en las decisiones
        decisiones_texto = "\n".join([f"- {k}: {v}" for k, v in opciones_decididas.get("decisiones_profesor", {}).items()])
        analisis_texto = str(opciones_decididas.get("analisis_detector", {}))
        
        tarea_estructura = Task(
            description=f"""
Crea una estructura completa para la actividad basada en:

DECISIONES DEL PROFESOR:
{decisiones_texto}

AN√ÅLISIS ORIGINAL:
{analisis_texto}

CREA:
1. Si el profesor pide un GUI√ìN ‚Üí genera el gui√≥n teatral completo
2. Si pide ORGANIZACI√ìN ‚Üí estructura por d√≠as/grupos como "Lunes: X, Y, Z hacen A mientras P, Q hacen B"
3. Si pide AMBOS ‚Üí gui√≥n + organizaci√≥n

IMPORTANTE:
- Genera CONTENIDO REAL, no solo descripciones
- Si es teatro ‚Üí di√°logos completos entre personajes
- Si es organizaci√≥n ‚Üí reparto pr√°ctico por d√≠as y grupos
- Adapta para Elena (TEA), Luis (TDAH), Ana (altas capacidades), etc.

FORMATO:
- T√≠tulo atractivo
- Duraci√≥n realista
- Materiales espec√≠ficos
- Contenido/Gui√≥n si se pide
- Organizaci√≥n temporal si se pide
- Adaptaciones incluidas naturalmente
            """,
            agent=self.agente_estructurador,
            expected_output="Estructura completa con contenido real generado"
        )
        
        crew_estructura = Crew(
            agents=[self.agente_estructurador],
            tasks=[tarea_estructura],
            process=Process.sequential,
            verbose=True
        )
        
        estructura_resultado = crew_estructura.kickoff()
        
        print(f"\nüè† ESTRUCTURA GENERADA:")
        print(str(estructura_resultado))
        
        # NUEVA FUNCIONALIDAD: Detecci√≥n autom√°tica de oportunidades de paralelismo
        if self._detectar_oportunidades_paralelismo_natural(str(estructura_resultado)):
            print(f"\nüîÑ Detect√© oportunidades de trabajo simult√°neo entre estudiantes.")
            optimizar = input(f"¬øQuieres que coordine el trabajo paralelo? (s√≠/no): ").strip().lower()
            
            if optimizar in ['s', 's√≠', 'si', 'vale', 'ok']:
                print(f"\n‚ö° Optimizando coordinaci√≥n paralela...")
                estructura_resultado = self._optimizar_coordinacion_paralela(estructura_resultado, analisis_texto)
                print(f"\nüîÑ ESTRUCTURA OPTIMIZADA PARA PARALELISMO:")
                print(str(estructura_resultado))
        
        # Obtener ejemplo_k si es necesario para metadatos
        ejemplo_k_usado = "ninguno"
        if "estructura_completa" in opciones_decididas:
            ejemplo_k_usado = "estructura_completa_generada"
        
        return {
            "estructura_completa": estructura_resultado,
            "opciones_base": opciones_decididas,
            "ejemplo_k_usado": ejemplo_k_usado
        }
    
    def _refinar_estructura(self, contexto_original: Dict, estructura_actual: Dict) -> Dict:
        """Refina estructura bas√°ndose en feedback del profesor"""
        
        print(f"\nüîÑ REFINANDO ESTRUCTURA...")
        feedback = input(f"üó£\ufe0f ¬øQu√© te gustar√≠a cambiar en la estructura?: ").strip()
        
        # Crear tarea de refinamiento
        tarea_refinamiento = Task(
            description=f"""
ESTRUCTURA ACTUAL:
{estructura_actual.get('estructura_completa', '')}

FEEDBACK DEL PROFESOR:
"{feedback}"

REFINA la estructura seg√∫n el feedback:
- Mant√©n lo que funciona
- Cambia lo que el profesor pide
- Genera contenido real si se solicita
- Adapta organizaci√≥n si es necesario
            """,
            agent=self.agente_estructurador,
            expected_output="Estructura refinada seg√∫n feedback del profesor"
        )
        
        crew_refinamiento = Crew(
            agents=[self.agente_estructurador],
            tasks=[tarea_refinamiento],
            process=Process.sequential,
            verbose=True
        )
        
        estructura_refinada = crew_refinamiento.kickoff()
        
        return {
            "estructura_completa": estructura_refinada,
            "opciones_base": estructura_actual.get("opciones_base", {})
        }
    
    def _crear_actividad_final_iterativa(self, estructura_completa: Dict, contexto_detectado: Dict) -> ActividadEducativa:
        """Fase 3: Crea actividad final con iteraci√≥n hasta que el profesor est√© satisfecho"""
        
        print(f"\n‚ú® FASE 3: CREANDO ACTIVIDAD FINAL")
        print("-" * 50)
        
        # Extraer contexto real para la actividad final
        try:
            # Buscar contexto real en los datos pasados
            if isinstance(contexto_detectado, dict):
                ctx_base = contexto_detectado.get("contexto_base", {})
                ctx_dims = contexto_detectado.get("dimensiones", {})
            else:
                # Intentar extraer de string si es necesario
                import json, re
                contexto_str = str(contexto_detectado)
                json_match = re.search(r'```json\s*({.*?})\s*```', contexto_str, re.DOTALL)
                if json_match:
                    ctx_data = json.loads(json_match.group(1))
                    ctx_base = ctx_data.get("contexto_base", {})
                    ctx_dims = ctx_data.get("dimensiones", {})
                else:
                    ctx_base = {"materia": "detectado", "tema": "detectado"}
                    ctx_dims = {"narrativa": {"nivel": "detectado"}}
        except:
            ctx_base = {"materia": "detectado", "tema": "detectado"}
            ctx_dims = {"narrativa": {"nivel": "detectado"}}
        
        # Crear actividad con contexto real
        actividad = ActividadEducativa(
            id=f"libre_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            titulo=f"Actividad de {ctx_base.get('tema', 'Tema Detectado').title()}",
            materia=ctx_base.get("materia", "interdisciplinar"),
            tema=ctx_base.get("tema", "proyecto colaborativo"),
            clima=ctx_dims.get("narrativa", {}).get("nivel", "detectado"),
            modalidad_trabajo=ctx_dims.get("modalidad_social", {}).get("principal", "mixta"),
            contenido_completo=str(estructura_completa.get("estructura_completa", "")),
            tareas_estudiantes=self._extraer_tareas_reales(estructura_completa),
            materiales=self._extraer_materiales_reales(estructura_completa),
            duracion="seg√∫n estructura",
            fases=["Preparaci√≥n", "Desarrollo", "Presentaci√≥n"],
            metadatos={
                "contexto_detectado": str(contexto_detectado),
                "estructura_completa": str(estructura_completa),
                "ejemplo_k_usado": [estructura_completa.get("ejemplo_k_usado", "ninguno")],
                "sistema_libre": True
            },
            timestamp=datetime.now().isoformat()
        )
        
        # Iteraci√≥n hasta satisfacci√≥n
        max_iteraciones = 3
        for iteracion in range(1, max_iteraciones + 1):
            print(f"\nüîÑ ITERACI√ìN {iteracion}/{max_iteraciones}")
            
            # Mostrar actividad
            self.mostrar_actividad(actividad)
            
            # Validaci√≥n final
            print(f"\n‚úÖ VALIDACI√ìN FINAL:")
            satisfecho = input(f"üó£\ufe0f ¬øEst√°s satisfecho con la actividad? (s√≠/no): ").strip().lower()
            
            if satisfecho in ['s', 's√≠', 'si', 'vale', 'ok', 'bien']:
                print(f"\n‚ú® ¬°ACTIVIDAD COMPLETADA!")
                break
            elif iteracion < max_iteraciones:
                feedback_final = input(f"üó£\ufe0f ¬øQu√© quieres cambiar?: ").strip()
                
                # Refinar actividad completa
                nueva_estructura = self._refinar_estructura(contexto_detectado, estructura_completa)
                actividad.contenido_completo = str(nueva_estructura.get("estructura_completa", ""))
                actividad.metadatos["iteraciones"] = iteracion
            else:
                print(f"\n‚ö†\ufe0f Se alcanz√≥ el m√°ximo de iteraciones. Finalizando.")
        
        return actividad
    
    def _fase_clima_con_validacion(self, contexto_detectado) -> str:
        """Fase 1: Determinar clima con validaci√≥n humana"""
        
        print(f"\nüé≠ FASE 1: DETERMINANDO CLIMA PEDAG√ìGICO")
        print("-" * 50)
        
        # Mostrar contexto detectado
        print(f"üìã Contexto detectado: {str(contexto_detectado)[:300]}...")
        
        tarea_clima = Task(
            description=f"""
Bas√°ndote en este contexto: {contexto_detectado}

Prop√≥n 3 opciones de CLIMA pedag√≥gico con justificaci√≥n:

1. SIMPLE: Actividad directa y pr√°ctica (20-30 min)
2. JUEGO: Din√°mico con competencia/retos (30-45 min)  
3. NARRATIVA: Historia/contexto envolvente (45-60 min)
4. COMPLEJO: Proyecto investigativo (60+ min)

Para cada opci√≥n explica:
- Por qu√© encaja con el contexto
- Qu√© tipo de actividad ser√≠a
- Duraci√≥n estimada

FORMATO:
Opci√≥n 1: [CLIMA] - [Justificaci√≥n breve]
Opci√≥n 2: [CLIMA] - [Justificaci√≥n breve]  
Opci√≥n 3: [CLIMA] - [Justificaci√≥n breve]

RECOMENDACI√ìN: [La mejor opci√≥n y por qu√©]
            """,
            agent=self.agente_clima,
            expected_output="3 opciones de clima con justificaci√≥n y recomendaci√≥n"
        )
        
        crew_clima = Crew(
            agents=[self.agente_clima],
            tasks=[tarea_clima],
            process=Process.sequential,
            verbose=True
        )
        
        opciones_clima = crew_clima.kickoff()
        
        # Mostrar opciones al profesor
        print(f"\nüé≠ OPCIONES DE CLIMA PROPUESTAS:")
        print(str(opciones_clima))
        
        # Validaci√≥n humana con opciones claras
        while True:
            print(f"\nüó£Ô∏è PROFESOR: ¬øQu√© decides sobre el clima?")
            print("   1Ô∏è‚É£ SEGUIR - Me gusta alguna de las opciones propuestas")
            print("   2Ô∏è‚É£ CAMBIAR - Quiero algo diferente")
            
            opcion = input(f"üî¢ Tu elecci√≥n (1/2): ").strip()
            
            if opcion == "1":
                eleccion = input(f"üìù ¬øCu√°l prefieres? (simple/juego/narrativa/complejo): ").strip().lower()
                print(f"‚úÖ Clima elegido: {eleccion}")
                return eleccion
            elif opcion == "2":
                cambio_clima = input(f"\nüìù Describe el clima que prefieres: ").strip()
                
                if not cambio_clima:
                    print("‚ö†Ô∏è Necesito que describas qu√© tipo de clima quieres.")
                    continue
                
                # PROCESAR CON DETECTOR
                print(f"\nüîç Analizando tu preferencia de clima...")
                contexto_clima = self.detectar_contexto_inteligente(f"Prefiero clima: {cambio_clima}")
                
                print(f"‚úÖ Clima personalizado registrado: {cambio_clima}")
                return cambio_clima
            else:
                print("‚ö†Ô∏è Por favor, elige 1 o 2.")
    
    def _fase_estructura_con_validacion(self, clima_aprobado, contexto_detectado) -> str:
        """Fase 2: Estructurar actividad con validaci√≥n humana"""
        
        print(f"\nüèóÔ∏è FASE 2: ESTRUCTURANDO ACTIVIDAD")
        print("-" * 50)
        
        # Extraer materia/tema del contexto para seleccionar ejemplo apropiado
        try:
            if isinstance(contexto_detectado, dict) and "contexto_base" in contexto_detectado:
                materia_real = contexto_detectado["contexto_base"].get("materia", "general")
                tema_real = contexto_detectado["contexto_base"].get("tema", "actividad")
            else:
                materia_real = "general"
                tema_real = "actividad"
        except:
            materia_real = "general"
            tema_real = "actividad"
        
        ejemplo_k = self.cargador_ejemplos.seleccionar_ejemplo_estrategico(materia_real, tema_real, "mixta")
        
        tarea_estructura = Task(
            description=f"""
CLIMA APROBADO: {clima_aprobado}
CONTEXTO ORIGINAL: {contexto_detectado}

EJEMPLO K_ DE REFERENCIA:
{ejemplo_k[:500]}...

Crea la ESTRUCTURA espec√≠fica de la actividad:

INCLUYE:
- T√≠tulo atractivo
- Duraci√≥n total y por fases
- Materiales espec√≠ficos necesarios
- Modalidad de trabajo (individual/grupal/mixta)
- Objetivos claros y medibles
- Fases temporales (ej: Fase 1: 15min intro, Fase 2: 20min desarrollo...)

SER ESPEC√çFICO, NO GEN√âRICO.
            """,
            agent=self.agente_estructurador,
            expected_output="Estructura detallada de la actividad"
        )
        
        crew_estructura = Crew(
            agents=[self.agente_estructurador],
            tasks=[tarea_estructura],
            process=Process.sequential,
            verbose=True
        )
        
        estructura_propuesta = crew_estructura.kickoff()
        
        # Mostrar al profesor
        print(f"\nüèóÔ∏è ESTRUCTURA PROPUESTA:")
        print(str(estructura_propuesta))
        
        # Validaci√≥n humana con opciones claras
        while True:
            print(f"\nüó£Ô∏è PROFESOR: ¬øQu√© decides sobre esta estructura?")
            print("   1Ô∏è‚É£ SEGUIR - La estructura est√° bien")
            print("   2Ô∏è‚É£ CAMBIAR - Quiero modificarla")
            
            opcion = input(f"üî¢ Tu elecci√≥n (1/2): ").strip()
            
            if opcion == "1":
                print(f"‚úÖ Estructura aprobada!")
                return str(estructura_propuesta)
            elif opcion == "2":
                cambio_estructura = input(f"\nüìù Describe c√≥mo quieres la estructura: ").strip()
                
                if not cambio_estructura:
                    print("‚ö†Ô∏è Necesito que describas qu√© cambios quieres en la estructura.")
                    continue
                
                # PROCESAR CON DETECTOR Y REGENERAR
                print(f"\nüîç Analizando cambios en estructura...")
                contexto_estructura = self.detectar_contexto_inteligente(f"Modificaci√≥n estructura: {cambio_estructura}")
                
                print(f"üîÑ Regenerando estructura seg√∫n tus indicaciones...")
                
                tarea_regeneracion_estructura = Task(
                    description=f"""
CLIMA APROBADO: {clima_aprobado}
CONTEXTO ORIGINAL: {contexto_detectado}

FEEDBACK DEL PROFESOR: "{cambio_estructura}"
CONTEXTO ANALIZADO: {contexto_estructura}

REGENERA la estructura seg√∫n las especificaciones del profesor:

INCLUYE:
- T√≠tulo que refleje la visi√≥n del profesor
- Duraci√≥n y fases seg√∫n lo solicitado
- Materiales espec√≠ficos necesarios
- Modalidad de trabajo apropiada  
- Objetivos claros
- Estructura temporal espec√≠fica

SEGUIR EXACTAMENTE la visi√≥n del profesor.
                    """,
                    agent=self.agente_estructurador,
                    expected_output="Estructura regenerada seg√∫n feedback del profesor"
                )
                
                crew_regeneracion_estructura = Crew(
                    agents=[self.agente_estructurador],
                    tasks=[tarea_regeneracion_estructura],
                    process=Process.sequential,
                    verbose=True
                )
                
                estructura_regenerada = crew_regeneracion_estructura.kickoff()
                
                print(f"\nüèóÔ∏è ESTRUCTURA REGENERADA:")
                print(str(estructura_regenerada))
                
                confirmacion = input(f"\n‚úÖ ¬øAhora refleja mejor tu visi√≥n? (s√≠/no): ").strip().lower()
                
                if confirmacion in ['s√≠', 'si', 'vale', 'ok', 'bien']:
                    print(f"‚úÖ Estructura finalmente aprobada!")
                    return str(estructura_regenerada)
                else:
                    print(f"üîÑ Continuemos refinando...")
            else:
                print("‚ö†Ô∏è Por favor, elige 1 o 2.")
    
    def _fase_tareas_con_validacion(self, estructura_aprobada, contexto_detectado) -> str:
        """Fase 3: Desglosar tareas con validaci√≥n humana"""
        
        print(f"\nüìù FASE 3: DESGLOSANDO EN TAREAS ESPEC√çFICAS")
        print("-" * 50)
        
        tarea_desglose = Task(
            description=f"""
ESTRUCTURA APROBADA: {estructura_aprobada}

Desglosa en 8 TAREAS ESPEC√çFICAS Y CONCRETAS:

REQUISITOS CR√çTICOS:
- Usar VERBOS DE ACCI√ìN espec√≠ficos (medir, cortar, escribir, explicar)
- Incluir CANTIDADES espec√≠ficas (3 objetos, 2 minutos, 5 palabras)
- Evitar roles abstractos (NO "coordinador", "investigador")
- Crear INTERDEPENDENCIA real entre tareas

FORMATO:
1. [Verbo] [cantidad] [objeto] [resultado esperado]
2. [Verbo] [cantidad] [objeto] [resultado esperado]
...
8. [Verbo] [cantidad] [objeto] [resultado esperado]

EJEMPLO BUENO: "Medir 3 objetos del aula con regla y anotar medidas en tabla"
EJEMPLO MALO: "Investigar el tema asignado"
            """,
            agent=self.agente_tareas,
            expected_output="8 tareas espec√≠ficas numeradas"
        )
        
        crew_tareas = Crew(
            agents=[self.agente_tareas],
            tasks=[tarea_desglose],
            process=Process.sequential,
            verbose=True
        )
        
        tareas_propuestas = crew_tareas.kickoff()
        
        print(f"\nüìù TAREAS PROPUESTAS:")
        print(str(tareas_propuestas))
        
        # Validaci√≥n humana con opciones claras
        while True:
            print(f"\nüó£Ô∏è PROFESOR: ¬øQu√© decides sobre estas tareas?")
            print("   1Ô∏è‚É£ SEGUIR - Las tareas est√°n bien, continuar")
            print("   2Ô∏è‚É£ CAMBIAR - Quiero modificar algo")
            
            opcion = input(f"üî¢ Tu elecci√≥n (1/2): ").strip()
            
            if opcion == "1":
                print(f"‚úÖ Tareas aprobadas!")
                return str(tareas_propuestas)
            elif opcion == "2":
                # Pedir descripci√≥n del cambio
                cambio_deseado = input(f"\nüìù Describe c√≥mo quieres que sean las tareas: ").strip()
                
                if not cambio_deseado:
                    print("‚ö†Ô∏è Necesito que describas qu√© cambios quieres.")
                    continue
                
                # PROCESAR CON DETECTOR
                print(f"\nüîç Analizando tus modificaciones...")
                contexto_cambio = self.detectar_contexto_inteligente(f"Modificaci√≥n de tareas: {cambio_deseado}")
                
                # REGENERAR TAREAS CON EL CONTEXTO MODIFICADO
                print(f"üîÑ Regenerando tareas seg√∫n tus indicaciones...")
                
                tarea_regeneracion = Task(
                    description=f"""
ESTRUCTURA ORIGINAL: {estructura_aprobada}

FEEDBACK DEL PROFESOR: "{cambio_deseado}"
CONTEXTO ANALIZADO: {contexto_cambio}

REGENERA las 8 tareas seg√∫n las especificaciones del profesor:

REQUISITOS:
- Seguir EXACTAMENTE la visi√≥n del profesor
- Mantener especificidad (verbos + cantidades + objetos)
- Crear interdependencia real entre tareas
- Ser pr√°ctico y ejecutable

El resultado debe reflejar FIELMENTE lo que el profesor ha solicitado.
                    """,
                    agent=self.agente_tareas,
                    expected_output="8 tareas regeneradas seg√∫n feedback del profesor"
                )
                
                crew_regeneracion = Crew(
                    agents=[self.agente_tareas],
                    tasks=[tarea_regeneracion],
                    process=Process.sequential,
                    verbose=True
                )
                
                tareas_regeneradas = crew_regeneracion.kickoff()
                
                print(f"\nüìù TAREAS REGENERADAS:")
                print(str(tareas_regeneradas))
                
                # Preguntar si ahora est√°n bien
                confirmacion = input(f"\n‚úÖ ¬øAhora reflejan mejor tu visi√≥n? (s√≠/no): ").strip().lower()
                
                if confirmacion in ['s√≠', 'si', 'vale', 'ok', 'bien']:
                    print(f"‚úÖ Tareas finalmente aprobadas!")
                    return str(tareas_regeneradas)
                else:
                    print(f"üîÑ Continuemos refinando...")
                    # El bucle contin√∫a para permitir m√°s ajustes
            else:
                print("‚ö†Ô∏è Por favor, elige 1 o 2.")
    
    def _fase_reparto_con_validacion(self, tareas_aprobadas, contexto_detectado) -> str:
        """Fase 4: Repartir tareas con validaci√≥n humana"""
        
        print(f"\nüë• FASE 4: REPARTIENDO TAREAS POR ESTUDIANTE")
        print("-" * 50)
        
        perfiles = """
001 ALEX M. (reflexivo, visual) 
002 MAR√çA L. (reflexivo, auditivo)
003 ELENA R. (reflexivo, visual, TEA_nivel_1) 
004 LUIS T. (impulsivo, kinest√©sico, TDAH_combinado)
005 ANA V. (reflexivo, auditivo, altas_capacidades)
006 SARA M. (equilibrado, auditivo)
007 EMMA K. (reflexivo, visual)
008 HUGO P. (equilibrado, visual)
        """
        
        tarea_reparto = Task(
            description=f"""
TAREAS APROBADAS: {tareas_aprobadas}

PERFILES DE ESTUDIANTES: {perfiles}

Asigna las 8 tareas considerando:
- Elena (TEA): Tareas estructuradas, visuales, claras
- Luis (TDAH): Tareas kinest√©sicas, cortas, con movimiento  
- Ana (altas capacidades): Tareas desafiantes, liderazgo
- Otros: Seg√∫n su estilo (visual, auditivo, etc.)

FORMATO:
001 ALEX M.: [tarea espec√≠fica adaptada a su perfil]
002 MAR√çA L.: [tarea espec√≠fica adaptada a su perfil]
...
008 HUGO P.: [tarea espec√≠fica adaptada a su perfil]
            """,
            agent=self.agente_repartidor,
            expected_output="Asignaci√≥n espec√≠fica por estudiante"
        )
        
        crew_reparto = Crew(
            agents=[self.agente_repartidor],
            tasks=[tarea_reparto],
            process=Process.sequential,
            verbose=True
        )
        
        reparto_propuesto = crew_reparto.kickoff()
        
        print(f"\nüë• REPARTO PROPUESTO:")
        print(str(reparto_propuesto))
        
        # Validaci√≥n humana con opciones claras
        while True:
            print(f"\nüó£Ô∏è PROFESOR: ¬øQu√© decides sobre este reparto?")
            print("   1Ô∏è‚É£ SEGUIR - El reparto est√° bien")
            print("   2Ô∏è‚É£ CAMBIAR - Quiero modificar asignaciones")
            
            opcion = input(f"üî¢ Tu elecci√≥n (1/2): ").strip()
            
            if opcion == "1":
                print(f"‚úÖ Reparto aprobado!")
                return str(reparto_propuesto)
            elif opcion == "2":
                cambio_reparto = input(f"\nüìù Describe c√≥mo quieres repartir las tareas: ").strip()
                
                if not cambio_reparto:
                    print("‚ö†Ô∏è Necesito que describas c√≥mo quieres cambiar el reparto.")
                    continue
                
                # PROCESAR CON DETECTOR Y REGENERAR
                print(f"\nüîç Analizando cambios en reparto...")
                contexto_reparto = self.detectar_contexto_inteligente(f"Modificaci√≥n reparto: {cambio_reparto}")
                
                print(f"üîÑ Regenerando reparto seg√∫n tus indicaciones...")
                
                tarea_regeneracion_reparto = Task(
                    description=f"""
TAREAS ORIGINALES: {tareas_aprobadas}
PERFILES ESTUDIANTES: {perfiles}

FEEDBACK DEL PROFESOR: "{cambio_reparto}"
CONTEXTO ANALIZADO: {contexto_reparto}

REGENERA el reparto seg√∫n las especificaciones del profesor:

CONSIDERA:
- La petici√≥n espec√≠fica del profesor
- Necesidades de Elena (TEA), Luis (TDAH), Ana (altas capacidades)  
- Estilos de aprendizaje de cada estudiante
- Equilibrio en la carga de trabajo
- Adaptaciones necesarias

SEGUIR EXACTAMENTE las indicaciones del profesor sobre el reparto.

FORMATO:
001 ALEX M.: [tarea espec√≠fica seg√∫n nueva distribuci√≥n]
002 MAR√çA L.: [tarea espec√≠fica seg√∫n nueva distribuci√≥n]
...
008 HUGO P.: [tarea espec√≠fica seg√∫n nueva distribuci√≥n]
                    """,
                    agent=self.agente_repartidor,
                    expected_output="Reparto regenerado seg√∫n feedback del profesor"
                )
                
                crew_regeneracion_reparto = Crew(
                    agents=[self.agente_repartidor],
                    tasks=[tarea_regeneracion_reparto],
                    process=Process.sequential,
                    verbose=True
                )
                
                reparto_regenerado = crew_regeneracion_reparto.kickoff()
                
                print(f"\nüë• REPARTO REGENERADO:")
                print(str(reparto_regenerado))
                
                confirmacion = input(f"\n‚úÖ ¬øAhora el reparto refleja mejor tu visi√≥n? (s√≠/no): ").strip().lower()
                
                if confirmacion in ['s√≠', 'si', 'vale', 'ok', 'bien']:
                    print(f"‚úÖ Reparto finalmente aprobado!")
                    return str(reparto_regenerado)
                else:
                    print(f"üîÑ Continuemos refinando...")
            else:
                print("‚ö†Ô∏è Por favor, elige 1 o 2.")
    
    def _validacion_tecnica_final(self, reparto_aprobado, contexto_detectado) -> ActividadEducativa:
        """Fase 5: Validaci√≥n t√©cnica final por el validador"""
        
        print(f"\n‚úÖ FASE 5: VALIDACI√ìN T√âCNICA FINAL")
        print("-" * 50)
        
        tarea_validacion = Task(
            description=f"""
ACTIVIDAD COMPLETA A VALIDAR:
{reparto_aprobado}

CONTEXTO ORIGINAL:
{contexto_detectado}

EVAL√öA SEG√öN CRITERIOS K_:
1. ¬øLas tareas son ESPEC√çFICAS y CONCRETAS?
2. ¬øHay COHERENCIA interna entre todas las partes?
3. ¬øEs PRACTICABLE en un aula real?
4. ¬øConsidera ADAPTACIONES adecuadas?
5. ¬øAlcanza CALIDAD de ejemplos k_?

RESPUESTA:
- APROBADA: Si cumple todos los criterios
- RECHAZADA: Si falta especificidad o coherencia

Justifica tu decisi√≥n con detalle.
            """,
            agent=self.agente_validador,
            expected_output="APROBADA/RECHAZADA con justificaci√≥n"
        )
        
        crew_validacion = Crew(
            agents=[self.agente_validador],
            tasks=[tarea_validacion],
            process=Process.sequential,
            verbose=True
        )
        
        validacion_resultado = crew_validacion.kickoff()
        
        print(f"\n‚úÖ VALIDACI√ìN T√âCNICA:")
        print(str(validacion_resultado))
        
        # Crear actividad final (simplificado)
        actividad = ActividadEducativa(
            id=f"fases_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            titulo="Actividad Generada por Fases",
            materia="interdisciplinar",
            tema="proyecto colaborativo",
            clima="narrativa",
            modalidad_trabajo="mixta",
            contenido_completo=str(reparto_aprobado),
            tareas_estudiantes={"001": "Tarea 1", "002": "Tarea 2"},  # Simplificado
            materiales=["materiales varios"],
            duracion="60 minutos",
            fases=["Fase 1", "Fase 2", "Fase 3"],
            metadatos={
                "contexto_detectado": str(contexto_detectado),
                "validacion_tecnica": str(validacion_resultado)
            },
            timestamp=datetime.now().isoformat()
        )
        
        return actividad
    
    def _extraer_tareas_reales(self, estructura_completa: Dict) -> Dict[str, str]:
        """Extrae tareas espec√≠ficas del contenido generado"""
        contenido = str(estructura_completa.get("estructura_completa", ""))
        
        # Buscar patrones de asignaci√≥n de estudiantes
        import re
        asignaciones = re.findall(r'(00[1-8])\s+([A-Z\s\.]+):\s*([^\n]+)', contenido)
        
        if asignaciones:
            return {codigo: tarea.strip() for codigo, nombre, tarea in asignaciones}
        
        # Buscar grupos/equipos
        grupos = re.findall(r'Grupo\s+([A-Z]).*?:\s*([^\n]+)', contenido, re.IGNORECASE)
        if grupos:
            estudiantes_base = ["001", "002", "003", "004", "005", "006", "007", "008"]
            reparto = {}
            for i, (grupo, tarea) in enumerate(grupos):
                # Asignar estudiantes a grupos de manera equilibrada
                inicio = i * 2
                fin = min(inicio + 2, len(estudiantes_base))
                for j in range(inicio, fin):
                    if j < len(estudiantes_base):
                        reparto[estudiantes_base[j]] = f"Grupo {grupo}: {tarea.strip()}"
            return reparto
        
        # Fallback: buscar actividades mencionadas
        if "quiz" in contenido.lower():
            return {
                "001": "Participar en quiz sobre sistemas del cuerpo humano",
                "002": "Buscar informaci√≥n en libros para responder preguntas", 
                "003": "Colaborar en equipo para obtener puntos",
                "004": "Participar en quiz sobre sistemas del cuerpo humano",
                "005": "Buscar informaci√≥n en libros para responder preguntas",
                "006": "Colaborar en equipo para obtener puntos",
                "007": "Participar en quiz sobre sistemas del cuerpo humano",
                "008": "Buscar informaci√≥n en libros para responder preguntas"
            }
        
        return {"todos": "Participar en actividad seg√∫n estructura generada"}
    
    def _extraer_materiales_reales(self, estructura_completa: Dict) -> List[str]:
        """Extrae materiales espec√≠ficos del contenido generado"""
        contenido = str(estructura_completa.get("estructura_completa", "")).lower()
        
        materiales = []
        
        # Buscar materiales mencionados
        if "libro" in contenido:
            materiales.append("Libros de consulta sobre anatom√≠a")
        if "quiz" in contenido:
            materiales.append("Preguntas preparadas")
            materiales.append("Sistema de puntuaci√≥n")
        if "papel" in contenido:
            materiales.append("Papel para respuestas")
        if "l√°pic" in contenido or "lapiz" in contenido:
            materiales.append("L√°pices")
        if "pizarra" in contenido:
            materiales.append("Pizarra para puntuaciones")
        
        # Materiales por defecto si no encuentra nada
        if not materiales:
            materiales = ["Materiales seg√∫n actividad generada", "Recursos de consulta"]
        
        return materiales

    def _detectar_oportunidades_paralelismo_natural(self, contenido_estructura: str) -> bool:
        """Usa IA para detectar autom√°ticamente oportunidades naturales de trabajo paralelo"""
        
        tarea_deteccion_paralelismo = Task(
            description=f"""
Analiza esta estructura educativa para detectar si tiene potencial NATURAL para trabajo paralelo/simult√°neo.

ESTRUCTURA A ANALIZAR:
{contenido_estructura}

CRITERIOS DE EVALUACI√ìN:
1. **TAREAS DIVISIBLES**: ¬øHay tareas que naturalmente se pueden dividir entre grupos?
2. **TRABAJO SIMULT√ÅNEO**: ¬øPueden varios estudiantes/grupos trabajar al mismo tiempo en diferentes aspectos?
3. **CONSTRUCCI√ìN COLABORATIVA**: ¬øSe est√° construyendo algo que permite trabajo en paralelo? (ej: maqueta, presentaci√≥n, experimento)
4. **ROLES COMPLEMENTARIOS**: ¬øHay roles diferentes que pueden ejecutarse simult√°neamente?
5. **ESTACIONES/√ÅREAS**: ¬øLa actividad sugiere diferentes "lugares" o "momentos" de trabajo?

EJEMPLOS DE PARALELISMO NATURAL:
‚úÖ "Construir maqueta del sistema solar" ‚Üí Grupo A: planetas internos, Grupo B: externos, Grupo C: √≥rbitas, Grupo D: informaci√≥n
‚úÖ "Investigar animales del bosque" ‚Üí Equipos por especies trabajando simult√°neamente
‚úÖ "Preparar obra de teatro" ‚Üí Actores, escenograf√≠a, vestuario, m√∫sica trabajando en paralelo
‚úÖ "Experimento de plantas" ‚Üí Diferentes grupos con diferentes condiciones experimentales

EJEMPLOS SIN PARALELISMO NATURAL:
‚ùå "Leer cuento individual y escribir resumen"
‚ùå "Resolver ejercicios de matem√°ticas" 
‚ùå "Examen o evaluaci√≥n individual"

RESPONDE SOLO:
TIENE_POTENCIAL_PARALELO: S√ç/NO
JUSTIFICACI√ìN: [1-2 l√≠neas explicando por qu√©]
            """,
            agent=self.agente_coordinador_paralelismo,
            expected_output="An√°lisis de potencial paralelo con justificaci√≥n"
        )
        
        crew_deteccion = Crew(
            agents=[self.agente_coordinador_paralelismo],
            tasks=[tarea_deteccion_paralelismo],
            process=Process.sequential,
            verbose=False  # Silencioso para no saturar
        )
        
        try:
            resultado_analisis = crew_deteccion.kickoff()
            
            # Parsear la respuesta
            resultado_str = str(resultado_analisis).lower()
            tiene_potencial = "s√≠" in resultado_str and "tiene_potencial_paralelo" in resultado_str
            
            logger.info(f"üîç IA detect√≥ paralelismo potencial: {tiene_potencial}")
            logger.info(f"üìã An√°lisis: {resultado_str[:200]}...")
            
            return tiene_potencial
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error en detecci√≥n IA de paralelismo: {e}")
            
            # Fallback: detecci√≥n b√°sica por palabras clave
            indicadores_basicos = ["grupo", "equipo", "construir", "crear", "dise√±ar", "investigar"]
            tiene_indicadores = sum(1 for ind in indicadores_basicos if ind in contenido_estructura.lower()) >= 2
            
            logger.info(f"üîÑ Fallback: detecci√≥n b√°sica ‚Üí {tiene_indicadores}")
            return tiene_indicadores

    def _optimizar_coordinacion_paralela(self, estructura_original, contexto_analisis: str):
        """Optimiza la estructura para incluir coordinaci√≥n paralela real y adaptativa"""
        
        # Primero, obtener el ejemplo k_ de la f√°brica de fracciones como referencia de paralelismo
        ejemplo_k_paralelo = self.cargador_ejemplos.ejemplos_k.get('k_sonnet7_fabrica_fracciones', 'Ejemplo no disponible')
        
        tarea_optimizacion = Task(
            description=f"""
Transforma esta actividad educativa para incluir TRABAJO PARALELO AUT√âNTICO sin forzar interdependencias artificiales.

ESTRUCTURA ORIGINAL:
{estructura_original}

CONTEXTO Y PREFERENCIAS DEL PROFESOR:
{contexto_analisis}

REFERENCIA DE PARALELISMO EXITOSO:
{ejemplo_k_paralelo[:800]}...

PRINCIPIOS DE OPTIMIZACI√ìN:
1. **DETECTA DIVISIONES NATURALES**: ¬øQu√© aspectos de la actividad pueden separarse l√≥gicamente?
2. **IDENTIFICA CONSTRUCCI√ìN COLABORATIVA**: ¬øSe est√° creando algo que permite trabajo simult√°neo?
3. **RESPETA EL FLUJO ORIGINAL**: No cambies la esencia de la actividad, solo organizala mejor
4. **CREA CONVERGENCIA**: Los trabajos paralelos deben unirse en un resultado integrado

ESTRATEGIAS DE PARALELISMO SEG√öN TIPO DE ACTIVIDAD:

**SI ES INVESTIGACI√ìN/ESTUDIO:**
- Diferentes grupos investigan aspectos complementarios
- Ejemplo: Sistema solar ‚Üí Grupo A: planetas internos, Grupo B: externos, Grupo C: lunas, Grupo D: comparaciones

**SI ES CONSTRUCCI√ìN/CREACI√ìN:**
- Diferentes componentes se construyen simult√°neamente  
- Ejemplo: Maqueta ‚Üí Grupo A: estructura, Grupo B: detalles, Grupo C: informaci√≥n, Grupo D: presentaci√≥n

**SI ES EXPERIMENTO/PR√ÅCTICA:**
- Diferentes variables o condiciones simult√°neas
- Ejemplo: Plantas ‚Üí Grupo A: con luz, Grupo B: sin luz, Grupo C: registro, Grupo D: hip√≥tesis

**SI ES NARRATIVA/TEATRO:**
- Diferentes elementos simult√°neos
- Ejemplo: Obra ‚Üí Grupo A: actuaci√≥n, Grupo B: escenograf√≠a, Grupo C: m√∫sica, Grupo D: vestuario

ADAPTACIONES AUTOM√ÅTICAS POR ESTUDIANTE:
- Elena (TEA): Estaci√≥n visual con instrucciones paso a paso
- Luis (TDAH): Estaci√≥n kinest√©sica con cambios frecuentes
- Ana (altas capacidades): Rol de coordinaci√≥n/supervisi√≥n entre estaciones
- Resto: Distribuci√≥n equilibrada seg√∫n habilidades

ESTRUCTURA DE RESPUESTA:
=== ACTIVIDAD OPTIMIZADA CON PARALELISMO NATURAL ===

**T√çTULO ACTUALIZADO:** [T√≠tulo que refleje el trabajo paralelo]

**ORGANIZACI√ìN TEMPORAL:**
- Preparaci√≥n: [X minutos] - Organizaci√≥n de estaciones
- Trabajo paralelo: [X minutos] - Estaciones operando simult√°neamente  
- Integraci√≥n: [X minutos] - Unir resultados de todas las estaciones
- Presentaci√≥n: [X minutos] - Resultado final conjunto

**ESTACIONES DE TRABAJO PARALELO:**
üî® ESTACI√ìN 1: [Descripci√≥n] - Estudiantes asignados
üé® ESTACI√ìN 2: [Descripci√≥n] - Estudiantes asignados  
üìä ESTACI√ìN 3: [Descripci√≥n] - Estudiantes asignados
[üîÑ ESTACI√ìN 4: Si es necesaria]

**COORDINACI√ìN ENTRE ESTACIONES:**
- Punto de sincronizaci√≥n 1: [Cu√°ndo y c√≥mo]
- Punto de sincronizaci√≥n 2: [Cu√°ndo y c√≥mo]
- Momento de integraci√≥n: [C√≥mo se unen los resultados]

**PRODUCTO FINAL INTEGRADO:**
[Descripci√≥n de c√≥mo se combinan todos los trabajos paralelos]

**SISTEMA DE ROTACIONES (si aplica):**
[Solo si es beneficioso - no forzar]
            """,
            agent=self.agente_coordinador_paralelismo,
            expected_output="Estructura educativa con paralelismo natural y organizativo"
        )
        
        crew_optimizacion = Crew(
            agents=[self.agente_coordinador_paralelismo],
            tasks=[tarea_optimizacion],
            process=Process.sequential,
            verbose=True
        )
        
        try:
            estructura_optimizada = crew_optimizacion.kickoff()
            return estructura_optimizada
        except Exception as e:
            logger.error(f"Error optimizando paralelismo: {e}")
            print(f"‚ö†Ô∏è No pude optimizar el paralelismo, mantengo estructura original")
            return estructura_original

    def mostrar_actividad(self, actividad: ActividadEducativa):
        """Muestra actividad de forma clara"""
        print("\n" + "="*80)
        print(f"üéØ {actividad.titulo}")
        print("="*80)
        print(f"üìñ Materia: {actividad.materia} | Tema: {actividad.tema}")
        print(f"üé≠ Clima: {actividad.clima} | Modalidad: {actividad.modalidad_trabajo}")
        print(f"‚è±Ô∏è Duraci√≥n: {actividad.duracion}")
        
        print(f"\nüì¶ MATERIALES:")
        for material in actividad.materiales:
            print(f"  ‚Ä¢ {material}")
        
        print(f"\nüë• TAREAS POR ESTUDIANTE:")
        perfiles = {
            "001": "ALEX M.", "002": "MAR√çA L.", "003": "ELENA R.", "004": "LUIS T.",
            "005": "ANA V.", "006": "SARA M.", "007": "EMMA K.", "008": "HUGO P."
        }
        
        for codigo, tarea in actividad.tareas_estudiantes.items():
            nombre = perfiles.get(codigo, f"Estudiante {codigo}")
            print(f"  {codigo} {nombre}: {tarea}")
        
        print(f"\nüéØ GENERADO POR: Sistema de Agentes Inteligente")
        print(f"üìÖ Ejemplo k_ usado: {list(actividad.metadatos.get('ejemplo_k_usado', []))}")

def main():
    """Funci√≥n principal con interfaz conversacional"""
    print("ü§ñ Sistema de Agentes Inteligente")
    print("CrewAI + Ollama + Few-shot estrat√©gico + Human-in-the-loop")
    print("="*70)
    
    # Inicializar sistema
    try:
        sistema = SistemaAgentesInteligente()
    except Exception as e:
        print(f"‚ùå Error inicializando sistema: {e}")
        print("üí° Verifica que Ollama est√© ejecut√°ndose en 192.168.1.10:11434")
        return
    
    # Opci√≥n de entrada: prompt libre o separado
    print("\nüîÑ OPCIONES DE ENTRADA:")
    print("1. üìù Prompt libre (describe tu actividad completa)")
    print("2. üìñ Entrada tradicional (materia + tema + contexto)")
    
    opcion = input("üî¢ Elige opci√≥n (1-2): ").strip()
    
    if opcion == "1":
        # PROMPT LIBRE
        print("\nüí¨ Describe la actividad que quieres crear:")
        print("   Ejemplo: 'Quiero una actividad de fracciones para 30 minutos, trabajo grupal,")
        print("            Elena necesita apoyo visual, usar material manipulativo'")
        prompt_profesor = input("üó£Ô∏è Tu descripci√≥n: ").strip()
        
        # Generar desde prompt libre
        print(f"\nüöÄ Generando actividad desde tu descripci√≥n...")
        print("   üîç Analizando y extrayendo variables...")
        print("   üìñ Detectando materia y tema...")
        print("   üé≠ Determinando clima pedag√≥gico...")
        print("   üèóÔ∏è Estructurando actividad...")
        print("   üìù Desglosando tareas...")
        print("   üë• Repartiendo equilibradamente...")
        
        try:
            actividad = sistema.generar_actividad_desde_prompt(prompt_profesor)
            print(f"\n‚ú® ¬°ACTIVIDAD COMPLETADA CON SISTEMA LIBRE!")
        except Exception as e:
            print(f"‚ùå Error con prompt libre: {e}")
            print(f"üìù Detalles: {str(e)}")
            return
            
    else:
        # ENTRADA TRADICIONAL
        materia = input("üìñ Materia: ").strip()
        tema = input("üìã Tema: ").strip()
        
        print("\nüí¨ Describe cualquier contexto adicional:")
        print("   Ejemplo: 'solo tengo 30 minutos, Elena necesita apoyo visual, trabajo grupal'")
        contexto = input("üó£Ô∏è Contexto: ").strip()
        
        # Generar actividad tradicional
        print(f"\nüöÄ Generando actividad inteligente...")
        print("   üìã Analizando contexto...")
        print("   üé≠ Determinando clima pedag√≥gico...")
        print("   üèóÔ∏è Estructurando actividad...")
        print("   üìù Desglosando tareas...")
        print("   üë• Repartiendo equilibradamente...")
        
        print("‚ùå Funcionalidad tradicional no disponible en versi√≥n limpia")
        print("üí° Usa opci√≥n 1 (prompt libre) que funciona con el nuevo sistema")
        return
    
    # Mostrar actividad final
    sistema.mostrar_actividad(actividad)
    actividad_final = actividad
    
    # Guardar
    try:
        filename = f"actividad_{actividad_final.id}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            # Convertir a dict para JSON
            actividad_dict = {
                "id": actividad_final.id,
                "titulo": actividad_final.titulo,
                "materia": actividad_final.materia,
                "tema": actividad_final.tema,
                "clima": actividad_final.clima,
                "modalidad_trabajo": actividad_final.modalidad_trabajo,
                "contenido_completo": actividad_final.contenido_completo,
                "tareas_estudiantes": actividad_final.tareas_estudiantes,
                "materiales": actividad_final.materiales,
                "duracion": actividad_final.duracion,
                "fases": actividad_final.fases,
                "metadatos": actividad_final.metadatos,
                "timestamp": actividad_final.timestamp
            }
            json.dump(actividad_dict, f, indent=2, ensure_ascii=False)
        
        print(f"\n‚úÖ Actividad guardada: {filename}")
        print("üåü ¬°Actividad generada con agentes inteligentes!")
        
    except Exception as e:
        print(f"‚ùå Error guardando actividad: {e}")
        logger.error(f"Error guardando: {e}")

if __name__ == "__main__":
    main()