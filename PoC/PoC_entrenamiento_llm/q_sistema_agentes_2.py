#!/usr/bin/env python3
"""
Sistema Q-Agents v2 - Human-in-the-Loop con Feedback Estructurado
Arquitectura redise√±ada que separa 'qu√© hacer' (feedback) de 'c√≥mo hacerlo' (expertise)
Agentes d√≥ciles + Contexto rico + Feedback estructurado
"""

import json
import os
from datetime import datetime
from typing import Dict, List, Optional, Union
from dataclasses import dataclass
import logging
from enum import Enum
import re
from difflib import SequenceMatcher

os.environ["OLLAMA_BASE_URL"] = "http://192.168.1.10:11434"
os.environ["OLLAMA_HOST"] = "http://192.168.1.10:11434"
os.environ["OLLAMA_API_BASE"] = "http://192.168.1.10:11434"
os.environ["LITELLM_LOG"] = "DEBUG"

os.environ["OPENAI_API_KEY"] = "not-needed"
os.environ["OPENAI_MODEL_NAME"] = "qwen3:latest"
os.environ["CREWAI_DISABLE_TELEMETRY"] = "true"

os.environ["HTTPX_TIMEOUT"] = "120"

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("Q_AGENTS_V2")

try:
    from crewai import Agent, Task, Crew, Process
    from crewai.tools import BaseTool
    from crewai_tools import FileReadTool, DirectoryReadTool
    
    from langchain_community.llms import Ollama
    logger.info("‚úÖ Usando langchain-community.llms.Ollama (compatible con CrewAI)")
        
    from langchain.callbacks.manager import CallbackManagerForLLMRun
    from langchain.llms.base import LLM
    from typing import Any, List, Mapping
except ImportError as e:
    logger.error(f"‚ùå Error de importaci√≥n: {e}")
    logger.error("üí° Instala dependencias: pip install crewai crewai-tools langchain-community")
    raise ImportError("Dependencias no est√°n disponibles")


# ==== ENUMS Y DATA CLASSES ====
@dataclass
class FeedbackFlexible:
    prompt_usuario: str
    agente_objetivo: str
    intencion_detectada: str
    confianza: float
    instrucciones_procesadas: str

class AgenteSemantico(Enum):
    INSPIRADOR = "inspirador"
    PEDAGOGO = "pedagogo" 
    ARQUITECTO = "arquitecto"
    DIFERENCIADOR = "diferenciador"
    GENERAL = "general"

@dataclass
class ContextoRico:
    prompt_inicial: str
    materia: str
    tema: Optional[str]
    ejemplos_k: Dict[str, str]
    perfiles_estudiantes: List[Dict]
    feedback_acumulado: List[FeedbackFlexible]
    fase_anterior: Optional[str]
    objetivo_fase: str

@dataclass
class ActividadEducativa:
    id: str
    titulo: str
    materia: str
    tema: str
    contenido: str
    estudiantes_objetivo: List[str]
    tipo: str
    adaptaciones: List[str]
    metadatos: Dict
    timestamp: str

# ==== SISTEMA PRINCIPAL ====
class SistemaQAgentsV2:
    
    def __init__(self, 
                 ollama_host: str = "192.168.1.10", 
                 modelo_base: str = "qwen3:latest",
                 perfiles_path: str = "perfiles_4_primaria.json"):
        
        self.ollama_host = ollama_host
        self.modelo_base = modelo_base
        self.perfiles_path = perfiles_path
        
        self._cargar_ejemplos_k()
        self._configurar_llm()
        self.perfiles_data = self._cargar_perfiles(perfiles_path)
        self._crear_agentes_dociles()
        
        logger.info(f"‚úÖ Sistema Q-Agents v2 inicializado")
        logger.info(f"   ü§ñ Modelo base: {self.modelo_base}")
        logger.info(f"   üìñ Ejemplos k_: {len(self.ejemplos_k)}")
        logger.info(f"   üë• Estudiantes: {len(self.perfiles_data)}")
    
    def _cargar_ejemplos_k(self):
        """Carga ejemplos k_ para contexto rico"""
        self.ejemplos_k = {}
        
        archivos_k = [
            "actividades_generadas/k_celula.txt",
            "actividades_generadas/k_sonnet_supermercado.txt", 
            "actividades_generadas/k_feria_acertijos.txt",
            "actividades_generadas/k_piratas.txt"
        ]
        
        for archivo in archivos_k:
            try:
                if not os.path.isabs(archivo):
                    script_dir = os.path.dirname(os.path.abspath(__file__))
                    archivo_path = os.path.join(script_dir, archivo)
                else:
                    archivo_path = archivo
                
                if os.path.exists(archivo_path):
                    with open(archivo_path, 'r', encoding='utf-8') as f:
                        contenido = f.read()
                        nombre_ejemplo = os.path.basename(archivo).replace('.txt', '')
                        self.ejemplos_k[nombre_ejemplo] = contenido
                        logger.info(f"üìñ Cargado ejemplo: {nombre_ejemplo}")
                else:
                    logger.warning(f"‚ö†Ô∏è No se encontr√≥ archivo: {archivo_path}")
            except Exception as e:
                logger.error(f"‚ùå Error cargando {archivo}: {e}")
        
        logger.info(f"‚úÖ Cargados {len(self.ejemplos_k)} ejemplos k_")
    
    def _configurar_llm(self):
        """Configura LLM √∫nico para todos los agentes"""
        try:
            import litellm
            
            litellm.model_cost[f"ollama/{self.modelo_base}"] = {
                "input_cost_per_token": 0,
                "output_cost_per_token": 0,
                "max_tokens": 4096
            }
            
            self.llm = Ollama(
                model=f"ollama/{self.modelo_base}",
                base_url=f"http://{self.ollama_host}:11434"
            )
            
            logger.info(f"‚úÖ LLM configurado: {self.modelo_base}")
            
        except Exception as e:
            logger.error(f"‚ùå Error configurando LLM: {e}")
            raise e
    
    def _cargar_perfiles(self, perfiles_path: str) -> List[Dict]:
        """Carga perfiles de estudiantes"""
        try:
            if not os.path.isabs(perfiles_path):
                script_dir = os.path.dirname(os.path.abspath(__file__))
                perfiles_path = os.path.join(script_dir, perfiles_path)
            
            with open(perfiles_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return data.get('estudiantes', [])
        except Exception as e:
            logger.error(f"Error cargando perfiles: {e}")
            return self._crear_perfiles_default()
    
    def _crear_perfiles_default(self) -> List[Dict]:
        """Perfiles por defecto si no se pueden cargar"""
        return [
            {"id": "001", "nombre": "ALEX M.", "temperamento": "reflexivo", "canal_preferido": "visual", "diagnostico_formal": "ninguno", "ci_base": 102},
            {"id": "002", "nombre": "MAR√çA L.", "temperamento": "reflexivo", "canal_preferido": "auditivo", "diagnostico_formal": "ninguno"},
            {"id": "003", "nombre": "ELENA R.", "temperamento": "reflexivo", "canal_preferido": "visual", "diagnostico_formal": "TEA_nivel_1", "ci_base": 118},
            {"id": "004", "nombre": "LUIS T.", "temperamento": "impulsivo", "canal_preferido": "kinest√©sico", "diagnostico_formal": "TDAH_combinado", "ci_base": 102},
            {"id": "005", "nombre": "ANA V.", "temperamento": "reflexivo", "canal_preferido": "auditivo", "diagnostico_formal": "altas_capacidades", "ci_base": 141},
            {"id": "006", "nombre": "SARA M.", "temperamento": "equilibrado", "canal_preferido": "auditivo", "diagnostico_formal": "ninguno", "ci_base": 115},
            {"id": "007", "nombre": "EMMA K.", "temperamento": "reflexivo", "canal_preferido": "visual", "diagnostico_formal": "ninguno", "ci_base": 132},
            {"id": "008", "nombre": "HUGO P.", "temperamento": "equilibrado", "canal_preferido": "visual", "diagnostico_formal": "ninguno", "ci_base": 114}
        ]
    
    def _crear_agentes_dociles(self):
        """Crea agentes con prompts minimalistas pero expertise intacta"""
        
        # Agente d√≥cil pero experto en inspiraci√≥n
        self.agente_inspirador = Agent(
            role="Creador de Semillas Creativas",
            goal="Crear una semilla creativa que inspire una actividad educativa memorable bas√°ndome en el contexto rico proporcionado",
            backstory="Soy un especialista en narrativas educativas que adapta ideas seg√∫n feedback espec√≠fico.",
            tools=[], 
            llm=self.llm, 
            verbose=True, 
            allow_delegation=False
        )
        
        # Agente d√≥cil pero experto en pedagog√≠a
        self.agente_pedagogo = Agent(
            role="Estructurador Pedag√≥gico",
            goal="Transformar la semilla creativa en estructura pedag√≥gica s√≥lida, incorporando feedback espec√≠fico",
            backstory="Soy un experto curricular que ajusta metodolog√≠as seg√∫n indicaciones precisas.",
            tools=[], 
            llm=self.llm, 
            verbose=True, 
            allow_delegation=False
        )
        
        # Agente d√≥cil pero experto en experiencias
        self.agente_arquitecto = Agent(
            role="Dise√±ador de Experiencias",
            goal="Crear el flujo temporal y arquitectura de la experiencia educativa seg√∫n feedback recibido",
            backstory="Soy un especialista en dise√±o de experiencias que modifica estructuras seg√∫n feedback espec√≠fico.",
            tools=[], 
            llm=self.llm, 
            verbose=True, 
            allow_delegation=False
        )
        
        # Agente d√≥cil pero experto en diferenciaci√≥n
        self.agente_diferenciador = Agent(
            role="Personalizador Educativo",
            goal="Adaptar la experiencia a cada estudiante seg√∫n perfiles y feedback de inclusi√≥n",
            backstory="Soy un psicopedagogo que personaliza seg√∫n perfiles espec√≠ficos y feedback de inclusi√≥n.",
            tools=[], 
            llm=self.llm, 
            verbose=True, 
            allow_delegation=False
        )
        
        logger.info("‚úÖ Agentes d√≥ciles creados")
        
        # Crear sistema de clasificaci√≥n sem√°ntica
        self._crear_clasificador_semantico()
    
    def _crear_clasificador_semantico(self):
        """Crea el sistema de clasificaci√≥n sem√°ntica de feedback"""
        
        # Dominios sem√°nticos por agente
        self.dominios_semanticos = {
            AgenteSemantico.INSPIRADOR: {
                "keywords": [
                    "historia", "narrativa", "contexto", "motivaci√≥n", "gancho", "dramatismo",
                    "realismo", "fantas√≠a", "creatividad", "inspiraci√≥n", "semilla", "idea",
                    "tema", "concepto", "met√°fora", "ambiente", "escenario", "situaci√≥n"
                ],
                "patterns": [
                    r"m√°s\s+(dram√°tico|emocionante|creativo)",
                    r"menos\s+(fantasioso|abstracto)",
                    r"cambiar\s+(el\s+tema|la\s+historia|el\s+contexto)",
                    r"quiero\s+que\s+sea\s+m√°s\s+(realista|fant√°stico)",
                    r"la\s+historia\s+(deber√≠a|debe)"
                ],
                "descripcion": "Creatividad, narrativa, contexto motivacional y conceptos inspiradores"
            },
            
            AgenteSemantico.PEDAGOGO: {
                "keywords": [
                    "objetivos", "competencias", "curr√≠culum", "evaluaci√≥n", "aprendizaje",
                    "did√°ctica", "metodolog√≠a", "contenidos", "est√°ndares", "criterios",
                    "pedag√≥gico", "educativo", "formativo", "cognitivo", "habilidades",
                    "conocimientos", "destrezas", "logros", "metas", "indicadores"
                ],
                "patterns": [
                    r"objetivos?\s+(m√°s|menos)\s+(claros|espec√≠ficos|medibles)",
                    r"cambiar\s+(la\s+metodolog√≠a|el\s+enfoque\s+pedag√≥gico)",
                    r"m√°s\s+(riguroso|acad√©mico|estructurado)",
                    r"evaluaci√≥n\s+(m√°s|menos)\s+(exigente|flexible)",
                    r"competencias?\s+(curriculares|espec√≠ficas)"
                ],
                "descripcion": "Estructura pedag√≥gica, objetivos, competencias y metodolog√≠a educativa"
            },
            
            AgenteSemantico.ARQUITECTO: {
                "keywords": [
                    "tiempo", "duraci√≥n", "sesiones", "fases", "etapas", "secuencia",
                    "organizaci√≥n", "estructura", "flujo", "progresi√≥n", "timing",
                    "cronograma", "planificaci√≥n", "log√≠stica", "espacios", "materiales",
                    "recursos", "preparaci√≥n", "desarrollo", "cierre", "transiciones",
                    "semana", "semanas", "d√≠a", "d√≠as", "horas", "sencillo", "simple",
                    "tareas", "organizado", "organizarlo", "organizarla"
                ],
                "patterns": [
                    r"(m√°s|menos)\s+(tiempo|duraci√≥n|sesiones)",
                    r"cambiar\s+(el\s+orden|la\s+secuencia|las\s+fases)",
                    r"reorganizar\s+(las\s+actividades|el\s+flujo)",
                    r"(acortar|alargar|extender)\s+la\s+actividad",
                    r"dividir\s+en\s+(m√°s|menos)\s+partes",
                    r"una\s+semana\s+(como\s+mucho|m√°ximo)",
                    r"organizado\s+por\s+tareas",
                    r"a\s+lo\s+largo\s+de\s+la\s+semana",
                    r"algo\s+(sencillo|simple)"
                ],
                "descripcion": "Arquitectura temporal, flujo de experiencia, organizaci√≥n, log√≠stica, duraci√≥n y estructura de tareas"
            },
            
            AgenteSemantico.DIFERENCIADOR: {
                "keywords": [
                    "estudiantes", "personalizaci√≥n", "adaptaciones", "inclusi√≥n", "diferenciaci√≥n",
                    "TEA", "TDAH", "altas capacidades", "necesidades", "perfiles", "diversidad",
                    "accesibilidad", "apoyo", "ajustes", "modificaciones", "individual",
                    "espec√≠fico", "particular", "√∫nico", "personalizado", "adaptado"
                ],
                "patterns": [
                    r"para\s+(estudiantes\s+con|alumnos\s+con)\s+(TEA|TDAH|altas\s+capacidades)",
                    r"m√°s\s+(inclusivo|accesible|personalizado)",
                    r"adaptar\s+para\s+(cada|todos)\s+los?\s+estudiantes?",
                    r"diferenciaci√≥n\s+(m√°s|menos)\s+(espec√≠fica|detallada)",
                    r"considerar\s+(las\s+necesidades|los\s+perfiles)"
                ],
                "descripcion": "Personalizaci√≥n, adaptaciones espec√≠ficas e inclusi√≥n educativa"
            }
        }
        
        logger.info("‚úÖ Clasificador sem√°ntico creado")
    
    def _analizar_intencion_feedback(self, prompt_feedback: str) -> FeedbackFlexible:
        """Analiza un prompt de feedback y determina el agente objetivo"""
        
        prompt_lower = prompt_feedback.lower()
        puntuaciones = {}
        
        # Calcular puntuaci√≥n para cada agente
        for agente, dominio in self.dominios_semanticos.items():
            puntuacion = 0
            detalles_deteccion = []
            
            # Puntuaci√≥n por keywords
            for keyword in dominio["keywords"]:
                if keyword in prompt_lower:
                    puntuacion += 2
                    detalles_deteccion.append(f"keyword:{keyword}")
            
            # Puntuaci√≥n por patterns
            for pattern in dominio["patterns"]:
                matches = re.findall(pattern, prompt_lower)
                if matches:
                    puntuacion += 5  # Patterns valen m√°s
                    detalles_deteccion.append(f"pattern:{pattern}")
            
            # Puntuaci√≥n por similitud sem√°ntica
            similitud_descripcion = SequenceMatcher(None, prompt_lower, dominio["descripcion"].lower()).ratio()
            puntuacion += similitud_descripcion * 3
            
            puntuaciones[agente] = {
                "puntuacion": puntuacion,
                "detalles": detalles_deteccion
            }
        
        # Determinar agente con mayor puntuaci√≥n
        agente_ganador = max(puntuaciones.keys(), key=lambda k: puntuaciones[k]["puntuacion"])
        puntuacion_maxima = puntuaciones[agente_ganador]["puntuacion"]
        
        # Calcular confianza (normalizada)
        confianza = min(puntuacion_maxima / 10.0, 1.0)  # Max confianza = 1.0
        
        # Si la confianza es muy baja, usar GENERAL
        if confianza < 0.3:
            agente_ganador = AgenteSemantico.GENERAL
            confianza = 0.5  # Confianza media para casos generales
            intencion_detectada = f"Modificar {agente_ganador.value} - feedback general"
        else:
            intencion_detectada = f"Modificar {agente_ganador.value} - {puntuaciones[agente_ganador]['detalles'][:3]}"
        
        # Procesar el feedback en instrucciones
        instrucciones = self._procesar_prompt_a_instrucciones(prompt_feedback, agente_ganador)
        
        return FeedbackFlexible(
            prompt_usuario=prompt_feedback,
            agente_objetivo=agente_ganador.value,
            intencion_detectada=intencion_detectada,
            confianza=confianza,
            instrucciones_procesadas=instrucciones
        )
    
    def _procesar_prompt_a_instrucciones(self, prompt: str, agente: AgenteSemantico) -> str:
        """Convierte un prompt de feedback en instrucciones espec√≠ficas para el agente"""
        
        # Plantillas espec√≠ficas por agente
        plantillas = {
            AgenteSemantico.INSPIRADOR: f"""
üé≠ FEEDBACK ESPEC√çFICO PARA INSPIRACI√ìN:
Usuario solicita: "{prompt}"

INSTRUCCIONES PARA EL AGENTE INSPIRADOR:
- Ajusta la semilla creativa seg√∫n esta solicitud espec√≠fica
- Mant√©n la coherencia narrativa pero incorpora los cambios solicitados
- Prioriza esta modificaci√≥n sobre otras consideraciones creativas
            """,
            
            AgenteSemantico.PEDAGOGO: f"""
üìö FEEDBACK ESPEC√çFICO PARA PEDAGOG√çA:
Usuario solicita: "{prompt}"

INSTRUCCIONES PARA EL AGENTE PEDAGOGO:
- Modifica la estructura pedag√≥gica seg√∫n esta solicitud espec√≠fica
- Ajusta objetivos, competencias o metodolog√≠a seg√∫n lo requerido
- Mant√©n el rigor acad√©mico mientras implementas los cambios
            """,
            
            AgenteSemantico.ARQUITECTO: f"""
üèóÔ∏è FEEDBACK ESPEC√çFICO PARA ARQUITECTURA:
Usuario solicita: "{prompt}"

INSTRUCCIONES PARA EL AGENTE ARQUITECTO:
- Reorganiza el flujo temporal seg√∫n esta solicitud espec√≠fica
- Ajusta duraci√≥n, secuencia o log√≠stica seg√∫n lo requerido
- Mant√©n la coherencia experiencial mientras implementas los cambios
            """,
            
            AgenteSemantico.DIFERENCIADOR: f"""
üéØ FEEDBACK ESPEC√çFICO PARA DIFERENCIACI√ìN:
Usuario solicita: "{prompt}"

INSTRUCCIONES PARA EL AGENTE DIFERENCIADOR:
- Ajusta las adaptaciones espec√≠ficas seg√∫n esta solicitud
- Personaliza para las necesidades mencionadas
- Mant√©n la inclusi√≥n mientras implementas los cambios espec√≠ficos
            """,
            
            AgenteSemantico.GENERAL: f"""
üîß FEEDBACK GENERAL:
Usuario solicita: "{prompt}"

INSTRUCCIONES GENERALES:
- Implementa esta modificaci√≥n en tu √°rea de expertise
- Interpreta la solicitud seg√∫n tu rol espec√≠fico
- Mant√©n la calidad mientras implementas el cambio solicitado
            """
        }
        
        return plantillas.get(agente, plantillas[AgenteSemantico.GENERAL])
    
    def solicitar_feedback_flexible(self, fase: str, contenido_previo: str) -> List[FeedbackFlexible]:
        """Solicita feedback mediante prompts libres con clasificaci√≥n autom√°tica"""
        print(f"\n" + "="*60)
        print(f"üß† FEEDBACK SEM√ÅNTICO INTELIGENTE - {fase.upper()}")
        print("="*60)
        
        # Mostrar resumen del contenido previo
        lineas = contenido_previo.split('\n')[:8]
        for linea in lineas:
            if linea.strip():
                print(f"üìÑ {linea[:70]}{'...' if len(linea) > 70 else ''}")
        
        print(f"\n‚ùì ¬øQu√© quieres cambiar o mejorar de esta {fase}?")
        print("üí° Puedes escribir en lenguaje natural:")
        print("   ‚Ä¢ 'Hazlo m√°s corto y din√°mico'")
        print("   ‚Ä¢ 'Adapta mejor para estudiantes con TEA'") 
        print("   ‚Ä¢ 'Cambia la historia por algo m√°s realista'")
        print("   ‚Ä¢ 'A√±ade m√°s evaluaci√≥n formativa'")
        print("   ‚Ä¢ 'Reorganiza las fases temporales'")
        print("\n1. ‚úÖ Perfecto, contin√∫a sin cambios")
        print("2. üí¨ Dar feedback en lenguaje natural")
        
        while True:
            try:
                opcion = input("\nüëâ Selecciona (1-2): ").strip()
                
                if opcion == "1":
                    print("‚úÖ Continuando sin cambios...")
                    return []
                elif opcion == "2":
                    break
                else:
                    print("‚ùå Por favor, selecciona 1 o 2")
            except KeyboardInterrupt:
                print("\n‚ùå Proceso cancelado por el usuario")
                return []
            except Exception as e:
                print(f"‚ùå Error en input: {e}")
                return []
        
        feedback_list = []
        
        while True:
            print(f"\nüí¨ Escribe tu feedback (o 'fin' para terminar):")
            try:
                prompt_feedback = input("üó£Ô∏è Tu feedback: ").strip()
                
                if prompt_feedback.lower() in ['fin', 'terminar', 'listo', 'ya']:
                    break
                
                if not prompt_feedback:
                    print("‚ùå Por favor, escribe algo o 'fin' para terminar")
                    continue
                
                # Analizar el feedback con clasificaci√≥n sem√°ntica
                feedback_analizado = self._analizar_intencion_feedback(prompt_feedback)
                
                # Mostrar an√°lisis al usuario
                print(f"\nüß† AN√ÅLISIS AUTOM√ÅTICO:")
                print(f"   üéØ Agente objetivo: {feedback_analizado.agente_objetivo}")
                print(f"   üéØ Confianza: {feedback_analizado.confianza:.1%}")
                print(f"   üéØ Intenci√≥n: {feedback_analizado.intencion_detectada}")
                
                # Confirmar con el usuario
                confirmar = input(f"\n¬øEs correcto? (s/n): ").strip().lower()
                if confirmar in ['s', 'si', 's√≠', 'yes', 'y', '']:
                    feedback_list.append(feedback_analizado)
                    print(f"‚úÖ Feedback agregado para {feedback_analizado.agente_objetivo}")
                else:
                    print("‚ùå Feedback descartado. Puedes intentar con otras palabras.")
                
            except KeyboardInterrupt:
                print("\n‚ùå Proceso cancelado por el usuario")
                break
            except Exception as e:
                print(f"‚ùå Error procesando feedback: {e}")
                continue
        
        if feedback_list:
            print(f"\n‚úÖ {len(feedback_list)} feedback(s) procesado(s) exitosamente")
        else:
            print("\nüìù No se agreg√≥ feedback")
        
        return feedback_list
    
    def _aplicar_feedback_flexible(self, feedback_list: List[FeedbackFlexible], agente_actual: str) -> str:
        """Aplica feedback flexible espec√≠fico para el agente actual"""
        if not feedback_list:
            return ""
        
        # Filtrar feedback relevante para este agente
        feedback_relevante = [f for f in feedback_list if f.agente_objetivo == agente_actual or f.agente_objetivo == "general"]
        
        # PROPAGACI√ìN CR√çTICA: Feedback de arquitectura debe aplicarse a todos los agentes
        feedback_arquitectura = [f for f in feedback_list if f.agente_objetivo == "arquitecto"]
        if feedback_arquitectura and agente_actual != "arquitecto":
            # Extraer info temporal cr√≠tica para otros agentes
            for fb in feedback_arquitectura:
                if any(keyword in fb.prompt_usuario.lower() for keyword in ["semana", "d√≠a", "duraci√≥n", "tiempo"]):
                    feedback_relevante.append(fb)
        
        if not feedback_relevante:
            return ""
        
        instrucciones_combinadas = "\nüéØ FEEDBACK ESPEC√çFICO DEL USUARIO:\n"
        for i, feedback in enumerate(feedback_relevante, 1):
            if feedback.agente_objetivo == "arquitecto" and agente_actual != "arquitecto":
                # Adaptar feedback de arquitectura para otros agentes
                instrucciones_combinadas += f"\n{i}. üïê DURACI√ìN CR√çTICA: {feedback.prompt_usuario}\n"
                instrucciones_combinadas += f"   ‚Üí APLICA esta duraci√≥n temporal en tu secci√≥n espec√≠fica\n"
            else:
                instrucciones_combinadas += f"\n{i}. {feedback.instrucciones_procesadas}\n"
        
        instrucciones_combinadas += "\n‚ö†Ô∏è ESTAS INSTRUCCIONES TIENEN PRIORIDAD M√ÅXIMA sobre cualquier otra consideraci√≥n.\n"
        
        return instrucciones_combinadas
    
    
    def _construir_contexto_rico(self, 
                                prompt_inicial: str,
                                materia: str,
                                tema: Optional[str],
                                fase_anterior: Optional[str],
                                objetivo_fase: str,
                                feedback_acumulado: List[FeedbackFlexible]) -> ContextoRico:
        """Construye contexto rico para compensar prompts minimalistas"""
        
        # Seleccionar ejemplos k_ relevantes
        ejemplos_relevantes = {}
        if materia.lower() in ['matematicas', 'mates']:
            for key in ['k_sonnet_supermercado', 'k_feria_acertijos']:
                if key in self.ejemplos_k:
                    ejemplos_relevantes[key] = self.ejemplos_k[key][:1000]  # Primeros 1000 chars
        elif materia.lower() in ['ciencias', 'naturales']:
            if 'k_celula' in self.ejemplos_k:
                ejemplos_relevantes['k_celula'] = self.ejemplos_k['k_celula'][:1000]
        
        # Si no hay ejemplos espec√≠ficos, usar uno gen√©rico
        if not ejemplos_relevantes and 'k_piratas' in self.ejemplos_k:
            ejemplos_relevantes['k_piratas'] = self.ejemplos_k['k_piratas'][:1000]
        
        return ContextoRico(
            prompt_inicial=prompt_inicial,
            materia=materia,
            tema=tema,
            ejemplos_k=ejemplos_relevantes,
            perfiles_estudiantes=self.perfiles_data,
            feedback_acumulado=feedback_acumulado,
            fase_anterior=fase_anterior,
            objetivo_fase=objetivo_fase
        )
    
    
    def _crear_contexto_texto(self, contexto_rico: ContextoRico) -> str:
        """Convierte ContextoRico en texto estructurado"""
        contexto_texto = f"""
CONTEXTO RICO:

PROMPT INICIAL DEL USUARIO:
{contexto_rico.prompt_inicial}

MATERIA: {contexto_rico.materia}
TEMA: {contexto_rico.tema or 'General'}

EJEMPLOS DE CALIDAD K_ PARA INSPIRACI√ìN:
"""
        
        for nombre, contenido in contexto_rico.ejemplos_k.items():
            contexto_texto += f"\n--- {nombre.upper()} ---\n{contenido}\n"
        
        contexto_texto += f"""
ESTUDIANTES DEL AULA:
"""
        for estudiante in contexto_rico.perfiles_estudiantes:
            contexto_texto += f"- {estudiante['id']} {estudiante['nombre']}: {estudiante.get('temperamento', 'N/A')}, {estudiante.get('canal_preferido', 'N/A')}"
            if estudiante.get('diagnostico_formal', 'ninguno') != 'ninguno':
                contexto_texto += f", {estudiante['diagnostico_formal']}"
            contexto_texto += "\n"
        
        if contexto_rico.fase_anterior:
            contexto_texto += f"\nFASE ANTERIOR: {contexto_rico.fase_anterior}"
        
        contexto_texto += f"\nOBJETIVO DE ESTA FASE: {contexto_rico.objetivo_fase}"
        
        return contexto_texto
    
    
    def generar_actividad_colaborativa(self, prompt_inicial: str) -> ActividadEducativa:
        """Genera actividad con nueva arquitectura de feedback estructurado"""
        
        # An√°lisis inicial b√°sico del prompt
        materia = self._detectar_materia(prompt_inicial)
        tema = self._detectar_tema(prompt_inicial)
        
        if not materia:
            materia = input("üìö ¬øQu√© materia? (matematicas/lengua/ciencias): ").strip().lower()
        
        logger.info(f"üöÄ Generando actividad Q-Agents v2 para {materia}")
        
        try:
            feedback_acumulado = []
            resultados = {}
            
            # === FASE 1: INSPIRACI√ìN ===
            contexto_inspiracion = self._construir_contexto_rico(
                prompt_inicial, materia, tema, None, 
                "Crear semilla creativa inspiradora", feedback_acumulado
            )
            
            tarea_inspiracion = Task(
                description=f"""
{self._crear_contexto_texto(contexto_inspiracion)}

TAREA:
Como Creador de Semillas Creativas, genera una semilla creativa inspiradora para esta actividad educativa.
Utiliza el contexto rico proporcionado para crear una propuesta original y motivadora.
Mant√©n la calidad pedag√≥gica inspir√°ndote en los ejemplos k_.
Crea algo NUEVO basado en el prompt inicial del usuario.
                """,
                agent=self.agente_inspirador,
                expected_output="Semilla creativa inspiradora para la actividad educativa"
            )
            
            crew_inspiracion = Crew(
                agents=[self.agente_inspirador],
                tasks=[tarea_inspiracion],
                process=Process.sequential,
                verbose=True
            )
            
            resultado_inspiracion = crew_inspiracion.kickoff()
            resultados['inspiracion'] = str(resultado_inspiracion)
            
            # Solicitar feedback flexible con NLP
            feedback_inspiracion = self.solicitar_feedback_flexible("inspiraci√≥n", str(resultado_inspiracion))
            feedback_acumulado.extend(feedback_inspiracion)
            
            # === FASE 2: PEDAGOG√çA ===
            contexto_pedagogia = self._construir_contexto_rico(
                prompt_inicial, materia, tema, "inspiraci√≥n", 
                "Estructurar pedag√≥gicamente la semilla creativa", feedback_acumulado
            )
            
            # IMPORTANTE: Agregar resultado anterior al contexto
            contexto_pedagogia_texto = f"""
RESULTADO DE LA FASE ANTERIOR (INSPIRACI√ìN):
{str(resultado_inspiracion)}

{self._crear_contexto_texto(contexto_pedagogia)}
"""
            
            tarea_pedagogia = Task(
                description=f"""
{contexto_pedagogia_texto}

{self._aplicar_feedback_flexible(feedback_inspiracion, "pedagogo")}

TAREA:
Como Estructurador Pedag√≥gico, toma la semilla creativa anterior y desarr√≥llala en una estructura pedag√≥gica s√≥lida.
Si hay instrucciones espec√≠ficas del usuario, dales prioridad absoluta.
Mant√©n la calidad pedag√≥gica inspir√°ndote en los ejemplos k_.
NO repitas el contenido anterior, sino que MEJORA y ESTRUCTURA la propuesta.
                """,
                agent=self.agente_pedagogo,
                expected_output="Estructura pedag√≥gica mejorada basada en la semilla creativa anterior"
            )
            
            crew_pedagogia = Crew(
                agents=[self.agente_pedagogo],
                tasks=[tarea_pedagogia],
                process=Process.sequential,
                verbose=True
            )
            
            resultado_pedagogia = crew_pedagogia.kickoff()
            resultados['pedagogia'] = str(resultado_pedagogia)
            
            # Solicitar feedback flexible con NLP
            feedback_pedagogia = self.solicitar_feedback_flexible("estructura pedag√≥gica", str(resultado_pedagogia))
            feedback_acumulado.extend(feedback_pedagogia)
            
            # === FASE 3: ARQUITECTURA ===
            contexto_arquitectura = self._construir_contexto_rico(
                prompt_inicial, materia, tema, "pedagog√≠a", 
                "Dise√±ar arquitectura temporal y experiencial", feedback_acumulado
            )
            
            # IMPORTANTE: Agregar resultado anterior al contexto
            contexto_arquitectura_texto = f"""
RESULTADO DE LA FASE ANTERIOR (PEDAGOG√çA):
{str(resultado_pedagogia)}

{self._crear_contexto_texto(contexto_arquitectura)}
"""
            
            tarea_arquitectura = Task(
                description=f"""
{contexto_arquitectura_texto}

{self._aplicar_feedback_flexible(feedback_pedagogia, "arquitecto")}

TAREA:
Como Dise√±ador de Experiencias, toma la estructura pedag√≥gica anterior y crea el flujo temporal y arquitectura de la experiencia.
Si hay instrucciones espec√≠ficas del usuario, dales prioridad absoluta.
Mant√©n la calidad pedag√≥gica inspir√°ndote en los ejemplos k_.
NO repitas el contenido anterior, sino que DISE√ëA la experiencia temporal y log√≠stica.
                """,
                agent=self.agente_arquitecto,
                expected_output="Dise√±o de experiencia temporal basado en la estructura pedag√≥gica anterior"
            )
            
            crew_arquitectura = Crew(
                agents=[self.agente_arquitecto],
                tasks=[tarea_arquitectura],
                process=Process.sequential,
                verbose=True
            )
            
            resultado_arquitectura = crew_arquitectura.kickoff()
            resultados['arquitectura'] = str(resultado_arquitectura)
            
            # Solicitar feedback flexible con NLP
            feedback_arquitectura = self.solicitar_feedback_flexible("arquitectura", str(resultado_arquitectura))
            feedback_acumulado.extend(feedback_arquitectura)
            
            # === FASE 4: DIFERENCIACI√ìN (Final) ===
            contexto_diferenciacion = self._construir_contexto_rico(
                prompt_inicial, materia, tema, "arquitectura", 
                "Personalizar para cada estudiante espec√≠fico", feedback_acumulado
            )
            
            # IMPORTANTE: Agregar resultado anterior al contexto
            contexto_diferenciacion_texto = f"""
RESULTADO DE LA FASE ANTERIOR (ARQUITECTURA):
{str(resultado_arquitectura)}

{self._crear_contexto_texto(contexto_diferenciacion)}
"""
            
            tarea_diferenciacion = Task(
                description=f"""
{contexto_diferenciacion_texto}

{self._aplicar_feedback_flexible(feedback_arquitectura, "diferenciador")}

TAREA:
Como Personalizador Educativo, toma la arquitectura de experiencia anterior y personal√≠zala para cada estudiante espec√≠fico.
Si hay instrucciones espec√≠ficas del usuario, dales prioridad absoluta.
Mant√©n la calidad pedag√≥gica inspir√°ndote en los ejemplos k_.
NO repitas el contenido anterior, sino que PERSONALIZA la experiencia para cada estudiante del aula.
                """,
                agent=self.agente_diferenciador,
                expected_output="Actividad personalizada para cada estudiante basada en la arquitectura anterior"
            )
            
            crew_diferenciacion = Crew(
                agents=[self.agente_diferenciador],
                tasks=[tarea_diferenciacion],
                process=Process.sequential,
                verbose=True
            )
            
            resultado_diferenciacion = crew_diferenciacion.kickoff()
            resultados['diferenciacion'] = str(resultado_diferenciacion)
            
            # Construir contenido final
            contenido_completo = self._construir_contenido_final(resultados, feedback_acumulado)
            
            return ActividadEducativa(
                id=f"q2_{materia.lower()}_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                titulo=f"Actividad Q-Agents v2 - {materia}",
                materia=materia,
                tema=tema or "tema general",
                contenido=contenido_completo,
                estudiantes_objetivo=["001", "002", "003", "004", "005", "006", "007", "008"],
                tipo="colaborativa_q_agents_v2",
                adaptaciones=["feedback_estructurado", "contexto_rico", "agentes_dociles"],
                metadatos={
                    "total_estudiantes": 8,
                    "feedback_aplicado": len(feedback_acumulado),
                    "feedback_detalles": [{"agente": f.agente_objetivo, "prompt": f.prompt_usuario, "confianza": f.confianza, "intencion": f.intencion_detectada} for f in feedback_acumulado],
                    "modelo_usado": self.modelo_base,
                    "ejemplos_k_usados": list(self.ejemplos_k.keys()),
                    "version": "2.0_semantic_feedback"
                },
                timestamp=datetime.now().isoformat()
            )
        
        except Exception as e:
            logger.error(f"Error generando actividad Q-Agents v2: {e}")
            return ActividadEducativa(
                id=f"error_q2_{materia.lower() if materia else 'unknown'}_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                titulo=f"Actividad Error - {materia or 'Unknown'}",
                materia=materia or "unknown",
                tema=tema or "tema general",
                contenido=f"Error generando actividad Q-Agents v2: {e}",
                estudiantes_objetivo=[],
                tipo="error_q_agents_v2",
                adaptaciones=[],
                metadatos={"error": str(e), "version": "2.0"},
                timestamp=datetime.now().isoformat()
            )
    
    def _detectar_materia(self, prompt: str) -> Optional[str]:
        """Detecta materia en el prompt"""
        prompt_lower = prompt.lower()
        
        materias = {
            'matematicas': ['matem√°ticas', 'mates', 'n√∫meros', 'c√°lculo', 'geometr√≠a', '√°lgebra', 'fracciones'],
            'lengua': ['lengua', 'idioma', 'escritura', 'lectura', 'gram√°tica', 'literatura'],
            'ciencias': ['ciencias', 'biolog√≠a', 'f√≠sica', 'qu√≠mica', 'naturales', 'cient√≠fico', 'c√©lulas']
        }
        
        for materia, keywords in materias.items():
            if any(keyword in prompt_lower for keyword in keywords):
                return materia
        return None
    
    def _detectar_tema(self, prompt: str) -> Optional[str]:
        """Detecta tema espec√≠fico en el prompt"""
        import re
        
        tema_patterns = [
            r'sobre[:\s]*([^.,\n]+)',
            r'tema[:\s]*([^.,\n]+)',
            r'acerca de[:\s]*([^.,\n]+)'
        ]
        
        for pattern in tema_patterns:
            match = re.search(pattern, prompt.lower())
            if match:
                return match.group(1).strip()
        return None
    
    def _construir_contenido_final(self, resultados: Dict[str, str], feedback_acumulado: List[FeedbackFlexible]) -> str:
        """Construye el contenido final de la actividad"""
        contenido = "=" * 80 + "\n"
        contenido += "ACTIVIDAD GENERADA CON Q-AGENTS V2\n"
        contenido += "Sistema con Feedback Estructurado y Contexto Rico\n"
        contenido += "=" * 80 + "\n\n"
        
        # Resumen de feedback aplicado
        if feedback_acumulado:
            contenido += "üéØ FEEDBACK APLICADO DEL USUARIO:\n"
            contenido += "-" * 40 + "\n"
            for i, feedback in enumerate(feedback_acumulado, 1):
                contenido += f"{i}. AGENTE: {feedback.agente_objetivo.upper()}\n"
                contenido += f"   Solicitud: {feedback.prompt_usuario}\n"
                contenido += f"   Confianza: {feedback.confianza:.1%}\n"
                contenido += f"   Intenci√≥n: {feedback.intencion_detectada}\n\n"
        
        # Fases de desarrollo
        fases = {
            'inspiracion': 'üé≠ SEMILLA CREATIVA E INSPIRACI√ìN',
            'pedagogia': 'üìö ESTRUCTURA PEDAG√ìGICA',
            'arquitectura': 'üèóÔ∏è ARQUITECTURA DE LA EXPERIENCIA',
            'diferenciacion': 'üéØ DIFERENCIACI√ìN PERSONALIZADA'
        }
        
        for fase_key, fase_titulo in fases.items():
            if fase_key in resultados:
                contenido += f"\n{fase_titulo}\n"
                contenido += "=" * len(fase_titulo) + "\n"
                contenido += resultados[fase_key] + "\n\n"
        
        return contenido
    
    def guardar_actividad(self, actividad: ActividadEducativa, output_dir: str = "actividades_q") -> str:
        """Guarda la actividad generada"""
        script_dir = os.path.dirname(os.path.abspath(__file__))
        full_output_dir = os.path.join(script_dir, output_dir)
        os.makedirs(full_output_dir, exist_ok=True)
        
        filename = f"{actividad.id}.txt"
        filepath = os.path.join(full_output_dir, filename)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write("=" * 80 + "\n")
            f.write(f"ACTIVIDAD GENERADA CON Q-AGENTS V2\n")
            f.write("=" * 80 + "\n\n")
            f.write(f"ID: {actividad.id}\n")
            f.write(f"T√≠tulo: {actividad.titulo}\n")
            f.write(f"Materia: {actividad.materia}\n")
            f.write(f"Tema: {actividad.tema}\n")
            f.write(f"Tipo: {actividad.tipo}\n")
            f.write(f"Estudiantes objetivo: {', '.join(actividad.estudiantes_objetivo)}\n")
            f.write(f"Timestamp: {actividad.timestamp}\n")
            f.write("\n" + "-" * 50 + "\n")
            f.write("CONTENIDO DE LA ACTIVIDAD:\n")
            f.write("-" * 50 + "\n\n")
            f.write(actividad.contenido)
            f.write("\n\n" + "=" * 80 + "\n")
            f.write("METADATOS DEL SISTEMA Q-AGENTS V2:\n")
            f.write(json.dumps(actividad.metadatos, indent=2, ensure_ascii=False))
            f.write("\n")
        
        logger.info(f"üíæ Actividad Q-Agents v2 guardada en: {filepath}")
        return filepath


# -------------------------------
def main():
    print("=" * 70)
    print("üéì SISTEMA Q-AGENTS V2 - HUMAN-IN-THE-LOOP AVANZADO")
    print("=" * 70)

    try:
        OLLAMA_HOST = "192.168.1.10"
        MODELO_BASE = "qwen3:latest"
        PERFILES_PATH = "perfiles_4_primaria.json"

        print(f"\nüîß Inicializando Q-Agents v2:")
        print(f" Host Ollama: {OLLAMA_HOST}")
        print(f" Modelo base: {MODELO_BASE}")
        print(f" Arquitectura: Agentes d√≥ciles + Contexto rico + Feedback estructurado")

        sistema = SistemaQAgentsV2(
            ollama_host=OLLAMA_HOST,
            modelo_base=MODELO_BASE,
            perfiles_path=PERFILES_PATH
        )

        print("\n‚úÖ Sistema Q-Agents v2 inicializado correctamente!")
        print(f"üìñ Ejemplos k_ cargados: {len(sistema.ejemplos_k)}")

        while True:
            print("\n" + "="*50)
            print("üéì GENERACI√ìN Q-AGENTS V2")
            print("1. üéØ Generar actividad con feedback estructurado")
            print("2. ‚ùå Salir")

            opcion = input("\nüëâ Selecciona una opci√≥n (1-2): ").strip()
            if opcion == "1":
                print("\nüìù Describe tu actividad ideal:")
                print("Ejemplo: 'Actividad colaborativa de matem√°ticas sobre fracciones")
                print("         para estudiantes de 4¬∫ primaria, inclusiva para TEA'")
                prompt_inicial = input("\n‚ú® Tu prompt: ").strip()
                
                start_time = datetime.now()
                actividad = sistema.generar_actividad_colaborativa(prompt_inicial)
                archivo = sistema.guardar_actividad(actividad)
                end_time = datetime.now()
                duration = (end_time - start_time).total_seconds()
                
                print(f"\n‚úÖ Actividad Q-Agents v2 generada en {duration:.1f}s:")
                print(f" üìÑ ID: {actividad.id}")
                print(f" üìÅ Archivo: {archivo}")
                print(f" üéØ Sistema: Q-Agents v2 con feedback estructurado")
                print(f" üîß Feedback aplicado: {actividad.metadatos.get('feedback_aplicado', 0)} elementos")
                
            elif opcion == "2":
                print("\nüëã ¬°Hasta luego!")
                break
            else:
                print("\n‚ùå Opci√≥n no v√°lida. Selecciona 1-2.")

    except Exception as e:
        print(f"\n‚ùå Error inicializando sistema Q-Agents v2: {e}")
        print("\nüí° Verifica que:")
        print(" 1. Ollama est√© ejecut√°ndose")
        print(" 2. El modelo especificado est√© disponible")
        print(" 3. El archivo de perfiles exista")
        print(" 4. Los archivos k_ est√©n en actividades_generadas/")

if __name__ == "__main__":
    main()